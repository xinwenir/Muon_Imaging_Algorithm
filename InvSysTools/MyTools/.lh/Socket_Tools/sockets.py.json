{
    "sourceFile": "Socket_Tools/sockets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1697271220186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1697285049395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n sever_key=\"0x26916166291\"#双方程序需要\r\n cilent_key=\"0x3637126198\"\r\n \r\n Sever_Message_start=\"0x217732080\"\r\n-Sever_Message_end=\"0x0q89888079q\"\r\n+Sever_Message_end=[\"0x0q89888079sq\",\"0x0q8927102018wq\",\"0x0q8927102018eq\"]\r\n Sever_Message_confirm=\"0x327092\"\r\n EXIT=\"0x2917287197\"\r\n from myPrint import *\r\n class SocketServer(object):\r\n@@ -134,21 +134,32 @@\n         data =recver_message(socket)\r\n         if data == \"\":\r\n             time.sleep(0.5)\r\n         else:\r\n-            if data==Sever_Message_end:\r\n+            if data in Sever_Message_end:\r\n                 send_message(socket,Sever_Message_confirm)\r\n-                return blog_data\r\n+                return blog_data,Sever_Message_end.index(data)\r\n             else:\r\n                 blog_data +=\"\\n\"+data\r\n                 send_message(socket,Sever_Message_confirm)\r\n \r\n-def send_blog_message(socket, data_list):\r\n+def send_blog_message(socket, data_list,code=0):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+        code (_type_): 状态码\r\n+    \"\"\"\r\n+    if code>=len(Sever_Message_end):\r\n+        myPrint_Err(\"无效的状态码\")\r\n+        code=0\r\n+        \r\n     socket.send(Sever_Message_start.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n     for i in data_list:\r\n         socket.send(i.encode())\r\n         recver_message_block(socket, Sever_Message_confirm)\r\n         print(i)\r\n-    socket.send(Sever_Message_end.encode())\r\n+    socket.send(Sever_Message_end[code].encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n \r\n"
                },
                {
                    "date": 1697380000392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,155 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+\r\n+\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                data = recver_message(sock)\r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Success(\"客户端keyid:\", data)\r\n+                    sock.send(sever_key.encode())\r\n+                    if is_multithreading:\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.send(data.encode())\r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                send_message(sock,cilent_key)\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+        myPrint_Success(\"=============连接成功========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    count=0\r\n+    while 1:\r\n+        data = socket.recv(1024).decode('utf-8','ignore')\r\n+        if data == \"\":\r\n+            time.sleep(0.5)\r\n+            count+=1\r\n+            if count>20:\r\n+                print(\"连接似乎断开,服务器端回收资源\")\r\n+                socket.close()\r\n+            continue\r\n+        else:\r\n+            return data\r\n+def recv_blog(socket):\r\n+    send_message(socket, Sever_Message_confirm)\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+        if data == \"\":\r\n+            time.sleep(0.5)\r\n+        else:\r\n+            if data in Sever_Message_end:\r\n+                send_message(socket,Sever_Message_confirm)\r\n+                return blog_data,Sever_Message_end.index(data)\r\n+            else:\r\n+                blog_data +=\"\\n\"+data\r\n+                send_message(socket,Sever_Message_confirm)\r\n+\r\n+def send_blog_message(socket, data_list,code=0):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+        code (_type_): 状态码\r\n+    \"\"\"\r\n+    if code>=len(Sever_Message_end):\r\n+        myPrint_Err(\"无效的状态码\")\r\n+        code=0\r\n+        \r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.send(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.send(Sever_Message_end[code].encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n"
                }
            ],
            "date": 1697271220186,
            "name": "Commit-0",
            "content": "# author:高金磊\r\n# datetime:2022/6/22 9:48\r\nimport threading\r\nimport os\r\nimport sys\r\nBASE_DIR = os.path.dirname(__file__)\r\nfor i in range(3):###距离项目根目录的距离____终端使用\r\n    BASE_DIR=os.path.dirname(BASE_DIR)\r\nsys.path.append(BASE_DIR)\r\nimport socket\r\nimport time\r\n\r\nimport tqdm\r\n\r\nHost=\"127.0.0.1\"\r\n# Host=\"56s815617a.goho.co\"\r\nPORT = 12522\r\nEOF = '0x00'\r\n\r\nsever_key=\"0x26916166291\"#双方程序需要\r\ncilent_key=\"0x3637126198\"\r\n\r\nSever_Message_start=\"0x217732080\"\r\nSever_Message_end=\"0x0q89888079q\"\r\nSever_Message_confirm=\"0x327092\"\r\nEXIT=\"0x2917287197\"\r\nfrom myPrint import *\r\nclass SocketServer(object):\r\n\r\n    def __init__(self, port=PORT):\r\n        self.port = port\r\n\r\n    def startup(self,fun,is_multithreading=True):\r\n        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        sock_server.bind((Host, self.port))\r\n        sock_server.listen(0)\r\n        myPrint_Hint(\"===========等待连接================\")\r\n        while True:\r\n            try:\r\n                sock, address = sock_server.accept()\r\n                data = recver_message(sock)\r\n                if data!=cilent_key:\r\n                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n                    send_message(sock,sever_key)\r\n                    send_message(sock,\"拒绝连接\")\r\n                    sock.close()\r\n                else:\r\n                    myPrint_Success(\"客户端keyid:\", data)\r\n                    sock.send(sever_key.encode())\r\n                    if is_multithreading:\r\n                        thread = threading.Thread(target=fun, args=(sock,))\r\n                        thread.setDaemon(True)\r\n                        thread.start()\r\n                    else:\r\n                        fun(sock)\r\n\r\n            except Exception as e:\r\n                myPrint_Err(e)\r\n\r\n\r\n\r\n    def state(self):\r\n        pass\r\n\r\n\r\ndef send_message(socket,data):\r\n    socket.send(data.encode())\r\n\r\n\r\nclass SocketClient(object):\r\n\r\n    def __init__(self, host=Host, port=PORT):\r\n        self.host = host\r\n        self.port = port\r\n\r\n    def connect(self,fun,time_out=20):\r\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        # sock.settimeout(4)\r\n        for i in range(10):\r\n            try:\r\n                myPrint_Hint(\"=============连接中========================\")\r\n                sock.connect((self.host, self.port))\r\n                send_message(sock,cilent_key)\r\n                data=recver_message(sock)\r\n                break\r\n            except Exception as e:\r\n                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n                #     break\r\n                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n                myPrint_Hint(e)\r\n                if i==time_out-1:\r\n                    myPrint_Err(\"=============连接超时========================\")\r\n                    return -1\r\n                time.sleep(2)\r\n        myPrint_Success(\"=============连接成功========================\")\r\n        if data!=sever_key:\r\n            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n            send_message(sock,\"拒绝连接\")\r\n            myPrint_Success(\"=============连接断开========================\")\r\n            sock.close()\r\n        else:\r\n            myPrint_Success(\"=============服务器允许接入========================\")\r\n            myPrint_Hint(\"服务器keyid:\", data)\r\n            fun(sock)\r\n        return sock\r\n\r\n\r\n\r\n\r\n\r\n\r\ndef recver_message_block(socket,expect_message):\r\n    while recver_message(socket) !=expect_message:\r\n        pass\r\n    return True\r\ndef recver_message(socket):\r\n    count=0\r\n    while 1:\r\n        data = socket.recv(1024).decode('utf-8','ignore')\r\n        if data == \"\":\r\n            time.sleep(0.5)\r\n            count+=1\r\n            if count>20:\r\n                print(\"连接似乎断开,服务器端回收资源\")\r\n                socket.close()\r\n            continue\r\n        else:\r\n            return data\r\ndef recv_blog(socket):\r\n    send_message(socket, Sever_Message_confirm)\r\n    blog_data = \"\"\r\n    while 1:\r\n        # 接收批量结果\r\n        data =recver_message(socket)\r\n        if data == \"\":\r\n            time.sleep(0.5)\r\n        else:\r\n            if data==Sever_Message_end:\r\n                send_message(socket,Sever_Message_confirm)\r\n                return blog_data\r\n            else:\r\n                blog_data +=\"\\n\"+data\r\n                send_message(socket,Sever_Message_confirm)\r\n\r\ndef send_blog_message(socket, data_list):\r\n    socket.send(Sever_Message_start.encode())\r\n    recver_message_block(socket, Sever_Message_confirm)\r\n    for i in data_list:\r\n        socket.send(i.encode())\r\n        recver_message_block(socket, Sever_Message_confirm)\r\n        print(i)\r\n    socket.send(Sever_Message_end.encode())\r\n    recver_message_block(socket, Sever_Message_confirm)\r\n\r\n"
        }
    ]
}