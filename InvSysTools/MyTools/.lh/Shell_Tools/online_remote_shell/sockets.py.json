{
    "sourceFile": "Shell_Tools/online_remote_shell/sockets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 65,
            "patches": [
                {
                    "date": 1697380058746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1697380134594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,32 +124,29 @@\n         data =recver_message(socket)\r\n         if data == \"\":\r\n             time.sleep(0.5)\r\n         else:\r\n-            if data in Sever_Message_end:\r\n+            if data == Sever_Message_end:\r\n                 send_message(socket,Sever_Message_confirm)\r\n-                return blog_data,Sever_Message_end.index(data)\r\n+                return blog_data\r\n             else:\r\n                 blog_data +=\"\\n\"+data\r\n                 send_message(socket,Sever_Message_confirm)\r\n \r\n-def send_blog_message(socket, data_list,code=0):\r\n+def send_blog_message(socket, data_list):\r\n     \"\"\"\r\n     发送批量消息\r\n     Args:\r\n         socket (_type_): _description_\r\n         data_list (_type_): _description_\r\n         code (_type_): 状态码\r\n     \"\"\"\r\n-    if code>=len(Sever_Message_end):\r\n-        myPrint_Err(\"无效的状态码\")\r\n-        code=0\r\n         \r\n     socket.send(Sever_Message_start.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n     for i in data_list:\r\n         socket.send(i.encode())\r\n         recver_message_block(socket, Sever_Message_confirm)\r\n         print(i)\r\n-    socket.send(Sever_Message_end[code].encode())\r\n+    socket.send(Sever_Message_end.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n \r\n"
                },
                {
                    "date": 1697380629699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     BASE_DIR=os.path.dirname(BASE_DIR)\r\n sys.path.append(BASE_DIR)\r\n import socket\r\n import time\r\n-\r\n+import pickle\r\n import tqdm\r\n \r\n from Data import *\r\n \r\n@@ -130,23 +130,24 @@\n                 return blog_data\r\n             else:\r\n                 blog_data +=\"\\n\"+data\r\n                 send_message(socket,Sever_Message_confirm)\r\n+    return pickle.\r\n \r\n-def send_blog_message(socket, data_list):\r\n+def send_blog_message(socket, message):\r\n     \"\"\"\r\n     发送批量消息\r\n     Args:\r\n         socket (_type_): _description_\r\n         data_list (_type_): _description_\r\n-        code (_type_): 状态码\r\n     \"\"\"\r\n         \r\n     socket.send(Sever_Message_start.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.send(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n+    \r\n+    socket.send(pickle.dumps(message).encode())\r\n+    \r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n     socket.send(Sever_Message_end.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n \r\n"
                },
                {
                    "date": 1697380666007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,12 @@\n     BASE_DIR=os.path.dirname(BASE_DIR)\r\n sys.path.append(BASE_DIR)\r\n import socket\r\n import time\r\n-import pickle\r\n+\r\n import tqdm\r\n \r\n-from Data import *\r\n+from Data\r\n \r\n from myPrint import *\r\n class SocketServer(object):\r\n \r\n@@ -124,30 +124,32 @@\n         data =recver_message(socket)\r\n         if data == \"\":\r\n             time.sleep(0.5)\r\n         else:\r\n-            if data == Sever_Message_end:\r\n+            if data in Sever_Message_end:\r\n                 send_message(socket,Sever_Message_confirm)\r\n-                return blog_data\r\n+                return blog_data,Sever_Message_end.index(data)\r\n             else:\r\n                 blog_data +=\"\\n\"+data\r\n                 send_message(socket,Sever_Message_confirm)\r\n-    return pickle.\r\n \r\n-def send_blog_message(socket, message):\r\n+def send_blog_message(socket, data_list,code=0):\r\n     \"\"\"\r\n     发送批量消息\r\n     Args:\r\n         socket (_type_): _description_\r\n         data_list (_type_): _description_\r\n+        code (_type_): 状态码\r\n     \"\"\"\r\n+    if code>=len(Sever_Message_end):\r\n+        myPrint_Err(\"无效的状态码\")\r\n+        code=0\r\n         \r\n     socket.send(Sever_Message_start.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n-    \r\n-    socket.send(pickle.dumps(message).encode())\r\n-    \r\n+    for i in data_list:\r\n+        socket.send(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.send(Sever_Message_end[code].encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n \r\n-    socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n"
                },
                {
                    "date": 1697381025865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,11 @@\n import socket\r\n import time\r\n \r\n import tqdm\r\n+import pickle\r\n+from Data import *\r\n \r\n-from Data\r\n-\r\n from myPrint import *\r\n class SocketServer(object):\r\n \r\n     def __init__(self, port=PORT):\r\n@@ -124,32 +124,49 @@\n         data =recver_message(socket)\r\n         if data == \"\":\r\n             time.sleep(0.5)\r\n         else:\r\n-            if data in Sever_Message_end:\r\n+            if data == Sever_Message_end:\r\n                 send_message(socket,Sever_Message_confirm)\r\n-                return blog_data,Sever_Message_end.index(data)\r\n+                return blog_data\r\n             else:\r\n                 blog_data +=\"\\n\"+data\r\n                 send_message(socket,Sever_Message_confirm)\r\n-\r\n-def send_blog_message(socket, data_list,code=0):\r\n+def recver_obj(socket):\r\n+    count=0\r\n+    while 1:\r\n+        data = socket.recv(1024).decode()\r\n+        if data == \"\":\r\n+            time.sleep(0.5)\r\n+            count+=1\r\n+            if count>20:\r\n+                print(\"连接似乎断开,服务器端回收资源\")\r\n+                socket.close()\r\n+            continue\r\n+        else:\r\n+            return pickle.loads(data)\r\n+def send_blog_message(socket, data_list):\r\n     \"\"\"\r\n     发送批量消息\r\n     Args:\r\n         socket (_type_): _description_\r\n         data_list (_type_): _description_\r\n-        code (_type_): 状态码\r\n     \"\"\"\r\n-    if code>=len(Sever_Message_end):\r\n-        myPrint_Err(\"无效的状态码\")\r\n-        code=0\r\n         \r\n     socket.send(Sever_Message_start.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n     for i in data_list:\r\n         socket.send(i.encode())\r\n         recver_message_block(socket, Sever_Message_confirm)\r\n         print(i)\r\n-    socket.send(Sever_Message_end[code].encode())\r\n+    socket.send(Sever_Message_end.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n \r\n+def send_obj(socket,obj):\r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+    socket.send(pickle.dumps(obj=obj).encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+        \r\n+    socket.send(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697381762400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,8 +137,9 @@\n         data = socket.recv(1024).decode()\r\n         if data == \"\":\r\n             time.sleep(0.5)\r\n             count+=1\r\n+            myPrint_Wran(\"===============等待中==================\")\r\n             if count>20:\r\n                 print(\"连接似乎断开,服务器端回收资源\")\r\n                 socket.close()\r\n             continue\r\n"
                },
                {
                    "date": 1697381915352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,8 +105,9 @@\n     return True\r\n def recver_message(socket):\r\n     count=0\r\n     while 1:\r\n+        send_message(socket, Sever_Message_confirm)\r\n         data = socket.recv(1024).decode('utf-8','ignore')\r\n         if data == \"\":\r\n             time.sleep(0.5)\r\n             count+=1\r\n"
                },
                {
                    "date": 1697382164861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n     return True\r\n def recver_message(socket):\r\n     count=0\r\n     while 1:\r\n-        send_message(socket, Sever_Message_confirm)\r\n+        # send_message(socket, Sever_Message_confirm)\r\n         data = socket.recv(1024).decode('utf-8','ignore')\r\n         if data == \"\":\r\n             time.sleep(0.5)\r\n             count+=1\r\n"
                },
                {
                    "date": 1697382243082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                data = recver_message(sock)\r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Success(\"客户端keyid:\", data)\r\n+                    sock.send(sever_key.encode())\r\n+                    if is_multithreading:\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.send(data.encode())\r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                send_message(sock,cilent_key)\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+        myPrint_Success(\"=============连接成功========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    count=0\r\n+    while 1:\r\n+        data = socket.recv(1024).decode('utf-8','ignore')\r\n+        if data == \"\":\r\n+            time.sleep(0.5)\r\n+            count+=1\r\n+            if count>20:\r\n+                print(\"连接似乎断开,服务器端回收资源\")\r\n+                socket.close()\r\n+            continue\r\n+        else:\r\n+            return data\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+        if data == \"\":\r\n+            time.sleep(0.5)\r\n+        else:\r\n+            if data == Sever_Message_end:\r\n+                send_message(socket,Sever_Message_confirm)\r\n+                return blog_data\r\n+            else:\r\n+                blog_data +=\"\\n\"+data\r\n+                send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+    count=0\r\n+    while 1:\r\n+        data = socket.recv(1024).decode()\r\n+        if data == \"\":\r\n+            time.sleep(0.5)\r\n+            count+=1\r\n+            myPrint_Wran(\"===============等待中==================\")\r\n+            if count>20:\r\n+                print(\"连接似乎断开,服务器端回收资源\")\r\n+                socket.close()\r\n+            continue\r\n+        else:\r\n+            return pickle.loads(data)\r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.send(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.send(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket,obj):\r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+    socket.send(pickle.dumps(obj=obj).encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+        \r\n+    socket.send(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697382433794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                data = recver_message(sock)\r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Success(\"客户端keyid:\", data)\r\n+                    sock.send(sever_key.encode())\r\n+                    if is_multithreading:\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.send(data.encode())\r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                send_message(sock,cilent_key)\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+        myPrint_Success(\"=============连接成功========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    data = socket.recv(1024).decode('utf-8','ignore')\r\n+    return data\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+\r\n+        if data == Sever_Message_end:\r\n+            send_message(socket,Sever_Message_confirm)\r\n+            return blog_data\r\n+        else:\r\n+            blog_data +=\"\\n\"+data\r\n+            send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+        data = socket.recv(1024).decode()\r\n+        return pickle.loads(data)\r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.send(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.send(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket,obj):\r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+    socket.send(pickle.dumps(obj=obj).encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+        \r\n+    socket.send(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697382572245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,10 +118,11 @@\n         else:\r\n             blog_data +=\"\\n\"+data\r\n             send_message(socket,Sever_Message_confirm)\r\n def recver_obj(socket):\r\n-        data = socket.recv(1024).decode()\r\n-        return pickle.loads(data)\r\n+    print(\"recver_obj\")\r\n+    data = socket.recv(1024).decode()\r\n+    return pickle.loads(data)\r\n def send_blog_message(socket, data_list):\r\n     \"\"\"\r\n     发送批量消息\r\n     Args:\r\n@@ -138,12 +139,14 @@\n     socket.send(Sever_Message_end.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n \r\n def send_obj(socket,obj):\r\n+    print(\"send_obj_pre\")\r\n     socket.send(Sever_Message_start.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n+    print(\"send_obj\")\r\n+    \r\n     socket.send(pickle.dumps(obj=obj).encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n-        \r\n+    print(\"send_obj_last\")\r\n     socket.send(Sever_Message_end.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697382852638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n     while recver_message(socket) !=expect_message:\r\n         pass\r\n     return True\r\n def recver_message(socket):\r\n+    send_message(socket,Sever_Message_confirm)\r\n     data = socket.recv(1024).decode('utf-8','ignore')\r\n     return data\r\n def recv_blog(socket):\r\n     blog_data = \"\"\r\n@@ -140,13 +141,7 @@\n     recver_message_block(socket, Sever_Message_confirm)\r\n \r\n def send_obj(socket,obj):\r\n     print(\"send_obj_pre\")\r\n-    socket.send(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n+    \r\n+    socket.send(pickle.dumps(obj=obj))\r\n     print(\"send_obj\")\r\n-    \r\n-    socket.send(pickle.dumps(obj=obj).encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    print(\"send_obj_last\")\r\n\\ No newline at end of file\n-    socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\n"
                },
                {
                    "date": 1697382935364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,8 @@\n     while recver_message(socket) !=expect_message:\r\n         pass\r\n     return True\r\n def recver_message(socket):\r\n-    send_message(socket,Sever_Message_confirm)\r\n     data = socket.recv(1024).decode('utf-8','ignore')\r\n     return data\r\n def recv_blog(socket):\r\n     blog_data = \"\"\r\n@@ -144,350 +143,4 @@\n     print(\"send_obj_pre\")\r\n     \r\n     socket.send(pickle.dumps(obj=obj))\r\n     print(\"send_obj\")\r\n-# author:高金磊\r\n-# datetime:2022/6/22 9:48\r\n-import threading\r\n-import os\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-sys.path.append(BASE_DIR)\r\n-import socket\r\n-import time\r\n-\r\n-import tqdm\r\n-import pickle\r\n-from Data import *\r\n-\r\n-from myPrint import *\r\n-class SocketServer(object):\r\n-\r\n-    def __init__(self, port=PORT):\r\n-        self.port = port\r\n-\r\n-    def startup(self,fun,is_multithreading=True):\r\n-        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        sock_server.bind((Host, self.port))\r\n-        sock_server.listen(0)\r\n-        myPrint_Hint(\"===========等待连接================\")\r\n-        while True:\r\n-            try:\r\n-                sock, address = sock_server.accept()\r\n-                data = recver_message(sock)\r\n-                if data!=cilent_key:\r\n-                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n-                    send_message(sock,sever_key)\r\n-                    send_message(sock,\"拒绝连接\")\r\n-                    sock.close()\r\n-                else:\r\n-                    myPrint_Success(\"客户端keyid:\", data)\r\n-                    sock.send(sever_key.encode())\r\n-                    if is_multithreading:\r\n-                        thread = threading.Thread(target=fun, args=(sock,))\r\n-                        thread.setDaemon(True)\r\n-                        thread.start()\r\n-                    else:\r\n-                        fun(sock)\r\n-\r\n-            except Exception as e:\r\n-                myPrint_Err(e)\r\n-\r\n-\r\n-\r\n-    def state(self):\r\n-        pass\r\n-\r\n-\r\n-def send_message(socket,data):\r\n-    socket.send(data.encode())\r\n-\r\n-\r\n-class SocketClient(object):\r\n-\r\n-    def __init__(self, host=Host, port=PORT):\r\n-        self.host = host\r\n-        self.port = port\r\n-\r\n-    def connect(self,fun,time_out=20):\r\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        # sock.settimeout(4)\r\n-        for i in range(10):\r\n-            try:\r\n-                myPrint_Hint(\"=============连接中========================\")\r\n-                sock.connect((self.host, self.port))\r\n-                send_message(sock,cilent_key)\r\n-                data=recver_message(sock)\r\n-                break\r\n-            except Exception as e:\r\n-                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n-                #     break\r\n-                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n-                myPrint_Hint(e)\r\n-                if i==time_out-1:\r\n-                    myPrint_Err(\"=============连接超时========================\")\r\n-                    return -1\r\n-                time.sleep(2)\r\n-        myPrint_Success(\"=============连接成功========================\")\r\n-        if data!=sever_key:\r\n-            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n-            send_message(sock,\"拒绝连接\")\r\n-            myPrint_Success(\"=============连接断开========================\")\r\n-            sock.close()\r\n-        else:\r\n-            myPrint_Success(\"=============服务器允许接入========================\")\r\n-            myPrint_Hint(\"服务器keyid:\", data)\r\n-            fun(sock)\r\n-        return sock\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-def recver_message_block(socket,expect_message):\r\n-    while recver_message(socket) !=expect_message:\r\n-        pass\r\n-    return True\r\n-def recver_message(socket):\r\n-    count=0\r\n-    while 1:\r\n-        data = socket.recv(1024).decode('utf-8','ignore')\r\n-        if data == \"\":\r\n-            time.sleep(0.5)\r\n-            count+=1\r\n-            if count>20:\r\n-                print(\"连接似乎断开,服务器端回收资源\")\r\n-                socket.close()\r\n-            continue\r\n-        else:\r\n-            return data\r\n-def recv_blog(socket):\r\n-    blog_data = \"\"\r\n-    while 1:\r\n-        # 接收批量结果\r\n-        data =recver_message(socket)\r\n-        if data == \"\":\r\n-            time.sleep(0.5)\r\n-        else:\r\n-            if data == Sever_Message_end:\r\n-                send_message(socket,Sever_Message_confirm)\r\n-                return blog_data\r\n-            else:\r\n-                blog_data +=\"\\n\"+data\r\n-                send_message(socket,Sever_Message_confirm)\r\n-def recver_obj(socket):\r\n-    count=0\r\n-    while 1:\r\n-        data = socket.recv(1024).decode()\r\n-        if data == \"\":\r\n-            time.sleep(0.5)\r\n-            count+=1\r\n-            myPrint_Wran(\"===============等待中==================\")\r\n-            if count>20:\r\n-                print(\"连接似乎断开,服务器端回收资源\")\r\n-                socket.close()\r\n-            continue\r\n-        else:\r\n-            return pickle.loads(data)\r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.send(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.send(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n-    socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n-def send_obj(socket,obj):\r\n-    socket.send(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n-    socket.send(pickle.dumps(obj=obj).encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-        \r\n-    socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\n-# author:高金磊\r\n-# datetime:2022/6/22 9:48\r\n-import threading\r\n-import os\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-sys.path.append(BASE_DIR)\r\n-import socket\r\n-import time\r\n-\r\n-import tqdm\r\n-import pickle\r\n-from Data import *\r\n-\r\n-from myPrint import *\r\n-class SocketServer(object):\r\n-\r\n-    def __init__(self, port=PORT):\r\n-        self.port = port\r\n-\r\n-    def startup(self,fun,is_multithreading=True):\r\n-        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        sock_server.bind((Host, self.port))\r\n-        sock_server.listen(0)\r\n-        myPrint_Hint(\"===========等待连接================\")\r\n-        while True:\r\n-            try:\r\n-                sock, address = sock_server.accept()\r\n-                data = recver_message(sock)\r\n-                if data!=cilent_key:\r\n-                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n-                    send_message(sock,sever_key)\r\n-                    send_message(sock,\"拒绝连接\")\r\n-                    sock.close()\r\n-                else:\r\n-                    myPrint_Success(\"客户端keyid:\", data)\r\n-                    sock.send(sever_key.encode())\r\n-                    if is_multithreading:\r\n-                        thread = threading.Thread(target=fun, args=(sock,))\r\n-                        thread.setDaemon(True)\r\n-                        thread.start()\r\n-                    else:\r\n-                        fun(sock)\r\n-\r\n-            except Exception as e:\r\n-                myPrint_Err(e)\r\n-\r\n-\r\n-\r\n-    def state(self):\r\n-        pass\r\n-\r\n-\r\n-def send_message(socket,data):\r\n-    socket.send(data.encode())\r\n-\r\n-\r\n-class SocketClient(object):\r\n-\r\n-    def __init__(self, host=Host, port=PORT):\r\n-        self.host = host\r\n-        self.port = port\r\n-\r\n-    def connect(self,fun,time_out=20):\r\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        # sock.settimeout(4)\r\n-        for i in range(10):\r\n-            try:\r\n-                myPrint_Hint(\"=============连接中========================\")\r\n-                sock.connect((self.host, self.port))\r\n-                send_message(sock,cilent_key)\r\n-                data=recver_message(sock)\r\n-                break\r\n-            except Exception as e:\r\n-                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n-                #     break\r\n-                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n-                myPrint_Hint(e)\r\n-                if i==time_out-1:\r\n-                    myPrint_Err(\"=============连接超时========================\")\r\n-                    return -1\r\n-                time.sleep(2)\r\n-        myPrint_Success(\"=============连接成功========================\")\r\n-        if data!=sever_key:\r\n-            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n-            send_message(sock,\"拒绝连接\")\r\n-            myPrint_Success(\"=============连接断开========================\")\r\n-            sock.close()\r\n-        else:\r\n-            myPrint_Success(\"=============服务器允许接入========================\")\r\n-            myPrint_Hint(\"服务器keyid:\", data)\r\n-            fun(sock)\r\n-        return sock\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-def recver_message_block(socket,expect_message):\r\n-    while recver_message(socket) !=expect_message:\r\n-        pass\r\n-    return True\r\n-def recver_message(socket):\r\n-    count=0\r\n-    while 1:\r\n-        # send_message(socket, Sever_Message_confirm)\r\n-        data = socket.recv(1024).decode('utf-8','ignore')\r\n-        if data == \"\":\r\n-            time.sleep(0.5)\r\n-            count+=1\r\n-            if count>20:\r\n-                print(\"连接似乎断开,服务器端回收资源\")\r\n-                socket.close()\r\n-            continue\r\n-        else:\r\n-            return data\r\n-def recv_blog(socket):\r\n-    send_message(socket, Sever_Message_confirm)\r\n-    blog_data = \"\"\r\n-    while 1:\r\n-        # 接收批量结果\r\n-        data =recver_message(socket)\r\n-        if data == \"\":\r\n-            time.sleep(0.5)\r\n-        else:\r\n-            if data == Sever_Message_end:\r\n-                send_message(socket,Sever_Message_confirm)\r\n-                return blog_data\r\n-            else:\r\n-                blog_data +=\"\\n\"+data\r\n-                send_message(socket,Sever_Message_confirm)\r\n-def recver_obj(socket):\r\n-    count=0\r\n-    while 1:\r\n-        data = socket.recv(1024).decode()\r\n-        if data == \"\":\r\n-            time.sleep(0.5)\r\n-            count+=1\r\n-            myPrint_Wran(\"===============等待中==================\")\r\n-            if count>20:\r\n-                print(\"连接似乎断开,服务器端回收资源\")\r\n-                socket.close()\r\n-            continue\r\n-        else:\r\n-            return pickle.loads(data)\r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.send(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.send(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n-    socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n-def send_obj(socket,obj):\r\n-    socket.send(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n-    socket.send(pickle.dumps(obj=obj).encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-        \r\n-    socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\n"
                },
                {
                    "date": 1697383082141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,8 +139,5 @@\n     socket.send(Sever_Message_end.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n \r\n def send_obj(socket,obj):\r\n-    print(\"send_obj_pre\")\r\n-    \r\n     socket.send(pickle.dumps(obj=obj))\r\n-    print(\"send_obj\")\r\n"
                },
                {
                    "date": 1697383288902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,143 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                data = recver_message(sock)\r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Success(\"客户端keyid:\", data)\r\n+                    sock.send(sever_key.encode())\r\n+                    if is_multithreading:\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.send(data.encode())\r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                send_message(sock,cilent_key)\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+        myPrint_Success(\"=============连接成功========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    data = socket.recv(1024).decode('utf-8','ignore')\r\n+    return data\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+\r\n+        if data == Sever_Message_end:\r\n+            send_message(socket,Sever_Message_confirm)\r\n+            return blog_data\r\n+        else:\r\n+            blog_data +=\"\\n\"+data\r\n+            send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+    print(\"recver_obj\")\r\n+    data = socket.recv(1024).decode()\r\n+    return pickle.loads(data)\r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.send(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.send(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket,obj):\r\n+    socket.send(pickle.dumps(obj=obj).encode())\r\n"
                },
                {
                    "date": 1697383329917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n             blog_data +=\"\\n\"+data\r\n             send_message(socket,Sever_Message_confirm)\r\n def recver_obj(socket):\r\n     print(\"recver_obj\")\r\n-    data = socket.recv(1024).decode()\r\n+    data = socket.recv(1024)\r\n     return pickle.loads(data)\r\n def send_blog_message(socket, data_list):\r\n     \"\"\"\r\n     发送批量消息\r\n@@ -139,148 +139,5 @@\n     socket.send(Sever_Message_end.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n \r\n def send_obj(socket,obj):\r\n-    socket.send(pickle.dumps(obj=obj).encode())\r\n-# author:高金磊\r\n-# datetime:2022/6/22 9:48\r\n-import threading\r\n-import os\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-sys.path.append(BASE_DIR)\r\n-import socket\r\n-import time\r\n-\r\n-import tqdm\r\n-import pickle\r\n-from Data import *\r\n-\r\n-from myPrint import *\r\n-class SocketServer(object):\r\n-\r\n-    def __init__(self, port=PORT):\r\n-        self.port = port\r\n-\r\n-    def startup(self,fun,is_multithreading=True):\r\n-        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        sock_server.bind((Host, self.port))\r\n-        sock_server.listen(0)\r\n-        myPrint_Hint(\"===========等待连接================\")\r\n-        while True:\r\n-            try:\r\n-                sock, address = sock_server.accept()\r\n-                data = recver_message(sock)\r\n-                if data!=cilent_key:\r\n-                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n-                    send_message(sock,sever_key)\r\n-                    send_message(sock,\"拒绝连接\")\r\n-                    sock.close()\r\n-                else:\r\n-                    myPrint_Success(\"客户端keyid:\", data)\r\n-                    sock.send(sever_key.encode())\r\n-                    if is_multithreading:\r\n-                        thread = threading.Thread(target=fun, args=(sock,))\r\n-                        thread.setDaemon(True)\r\n-                        thread.start()\r\n-                    else:\r\n-                        fun(sock)\r\n-\r\n-            except Exception as e:\r\n-                myPrint_Err(e)\r\n-\r\n-\r\n-\r\n-    def state(self):\r\n-        pass\r\n-\r\n-\r\n-def send_message(socket,data):\r\n-    socket.send(data.encode())\r\n-\r\n-\r\n-class SocketClient(object):\r\n-\r\n-    def __init__(self, host=Host, port=PORT):\r\n-        self.host = host\r\n-        self.port = port\r\n-\r\n-    def connect(self,fun,time_out=20):\r\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        # sock.settimeout(4)\r\n-        for i in range(10):\r\n-            try:\r\n-                myPrint_Hint(\"=============连接中========================\")\r\n-                sock.connect((self.host, self.port))\r\n-                send_message(sock,cilent_key)\r\n-                data=recver_message(sock)\r\n-                break\r\n-            except Exception as e:\r\n-                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n-                #     break\r\n-                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n-                myPrint_Hint(e)\r\n-                if i==time_out-1:\r\n-                    myPrint_Err(\"=============连接超时========================\")\r\n-                    return -1\r\n-                time.sleep(2)\r\n-        myPrint_Success(\"=============连接成功========================\")\r\n-        if data!=sever_key:\r\n-            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n-            send_message(sock,\"拒绝连接\")\r\n-            myPrint_Success(\"=============连接断开========================\")\r\n-            sock.close()\r\n-        else:\r\n-            myPrint_Success(\"=============服务器允许接入========================\")\r\n-            myPrint_Hint(\"服务器keyid:\", data)\r\n-            fun(sock)\r\n-        return sock\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-def recver_message_block(socket,expect_message):\r\n-    while recver_message(socket) !=expect_message:\r\n-        pass\r\n-    return True\r\n-def recver_message(socket):\r\n-    data = socket.recv(1024).decode('utf-8','ignore')\r\n-    return data\r\n-def recv_blog(socket):\r\n-    blog_data = \"\"\r\n-    while 1:\r\n-        # 接收批量结果\r\n-        data =recver_message(socket)\r\n-\r\n-        if data == Sever_Message_end:\r\n-            send_message(socket,Sever_Message_confirm)\r\n-            return blog_data\r\n-        else:\r\n-            blog_data +=\"\\n\"+data\r\n-            send_message(socket,Sever_Message_confirm)\r\n-def recver_obj(socket):\r\n-    print(\"recver_obj\")\r\n-    data = socket.recv(1024).decode()\r\n-    return pickle.loads(data)\r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.send(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.send(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n-    socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n-def send_obj(socket,obj):\r\n     socket.send(pickle.dumps(obj=obj))\r\n"
                },
                {
                    "date": 1697383405604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,8 @@\n         else:\r\n             blog_data +=\"\\n\"+data\r\n             send_message(socket,Sever_Message_confirm)\r\n def recver_obj(socket):\r\n-    print(\"recver_obj\")\r\n     data = socket.recv(1024)\r\n     return pickle.loads(data)\r\n def send_blog_message(socket, data_list):\r\n     \"\"\"\r\n"
                },
                {
                    "date": 1697418343864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,4 +139,5 @@\n     recver_message_block(socket, Sever_Message_confirm)\r\n \r\n def send_obj(socket,obj):\r\n     socket.send(pickle.dumps(obj=obj))\r\n+    socket.send(Sever_Message_end.encode())\r\n"
                },
                {
                    "date": 1697418804912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,10 +103,15 @@\n     while recver_message(socket) !=expect_message:\r\n         pass\r\n     return True\r\n def recver_message(socket):\r\n-    data = socket.recv(1024).decode('utf-8','ignore')\r\n-    return data\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024).decode('utf-8','ignore')\r\n+        if middle==Sever_Message_end:\r\n+            return data\r\n+        else:\r\n+            data+=middle\r\n def recv_blog(socket):\r\n     blog_data = \"\"\r\n     while 1:\r\n         # 接收批量结果\r\n@@ -118,9 +123,15 @@\n         else:\r\n             blog_data +=\"\\n\"+data\r\n             send_message(socket,Sever_Message_confirm)\r\n def recver_obj(socket):\r\n-    data = socket.recv(1024)\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024)\r\n+        if middle==Sever_Message_end:\r\n+            return data\r\n+        else:\r\n+            data+=middle\r\n     return pickle.loads(data)\r\n def send_blog_message(socket, data_list):\r\n     \"\"\"\r\n     发送批量消息\r\n"
                },
                {
                    "date": 1697419025340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                data = recver_message(sock)\r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Success(\"客户端keyid:\", data)\r\n+                    sock.send(sever_key.encode())\r\n+                    if is_multithreading:\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.send(data.encode())\r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                send_message(sock,cilent_key)\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+        myPrint_Success(\"=============连接成功========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024).decode('utf-8','ignore')\r\n+        if middle==Sever_Message_end:\r\n+            return data\r\n+        else:\r\n+            data+=middle\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+\r\n+        if data == Sever_Message_end:\r\n+            send_message(socket,Sever_Message_confirm)\r\n+            return blog_data\r\n+        else:\r\n+            blog_data +=\"\\n\"+data\r\n+            send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024)\r\n+        if middle==Sever_Message_end.encode():\r\n+            return data\r\n+        else:\r\n+            data+=middle\r\n+    return pickle.loads(data)\r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.send(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.send(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket,obj):\r\n+    socket.send(pickle.dumps(obj=obj))\r\n+    socket.send(Sever_Message_end.encode())\r\n"
                },
                {
                    "date": 1697419175621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,164 +54,13 @@\n \r\n \r\n def send_message(socket,data):\r\n     socket.send(data.encode())\r\n-\r\n-\r\n-class SocketClient(object):\r\n-\r\n-    def __init__(self, host=Host, port=PORT):\r\n-        self.host = host\r\n-        self.port = port\r\n-\r\n-    def connect(self,fun,time_out=20):\r\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        # sock.settimeout(4)\r\n-        for i in range(10):\r\n-            try:\r\n-                myPrint_Hint(\"=============连接中========================\")\r\n-                sock.connect((self.host, self.port))\r\n-                send_message(sock,cilent_key)\r\n-                data=recver_message(sock)\r\n-                break\r\n-            except Exception as e:\r\n-                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n-                #     break\r\n-                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n-                myPrint_Hint(e)\r\n-                if i==time_out-1:\r\n-                    myPrint_Err(\"=============连接超时========================\")\r\n-                    return -1\r\n-                time.sleep(2)\r\n-        myPrint_Success(\"=============连接成功========================\")\r\n-        if data!=sever_key:\r\n-            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n-            send_message(sock,\"拒绝连接\")\r\n-            myPrint_Success(\"=============连接断开========================\")\r\n-            sock.close()\r\n-        else:\r\n-            myPrint_Success(\"=============服务器允许接入========================\")\r\n-            myPrint_Hint(\"服务器keyid:\", data)\r\n-            fun(sock)\r\n-        return sock\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-def recver_message_block(socket,expect_message):\r\n-    while recver_message(socket) !=expect_message:\r\n-        pass\r\n-    return True\r\n-def recver_message(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024).decode('utf-8','ignore')\r\n-        if middle==Sever_Message_end:\r\n-            return data\r\n-        else:\r\n-            data+=middle\r\n-def recv_blog(socket):\r\n-    blog_data = \"\"\r\n-    while 1:\r\n-        # 接收批量结果\r\n-        data =recver_message(socket)\r\n-\r\n-        if data == Sever_Message_end:\r\n-            send_message(socket,Sever_Message_confirm)\r\n-            return blog_data\r\n-        else:\r\n-            blog_data +=\"\\n\"+data\r\n-            send_message(socket,Sever_Message_confirm)\r\n-def recver_obj(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024)\r\n-        if middle==Sever_Message_end.encode():\r\n-            return data\r\n-        else:\r\n-            data+=middle\r\n-    return pickle.loads(data)\r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.send(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.send(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n     socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n \r\n-def send_obj(socket,obj):\r\n-    socket.send(pickle.dumps(obj=obj))\r\n-    socket.send(Sever_Message_end.encode())\r\n-# author:高金磊\r\n-# datetime:2022/6/22 9:48\r\n-import threading\r\n-import os\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-sys.path.append(BASE_DIR)\r\n-import socket\r\n-import time\r\n+    \r\n \r\n-import tqdm\r\n-import pickle\r\n-from Data import *\r\n \r\n-from myPrint import *\r\n-class SocketServer(object):\r\n-\r\n-    def __init__(self, port=PORT):\r\n-        self.port = port\r\n-\r\n-    def startup(self,fun,is_multithreading=True):\r\n-        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        sock_server.bind((Host, self.port))\r\n-        sock_server.listen(0)\r\n-        myPrint_Hint(\"===========等待连接================\")\r\n-        while True:\r\n-            try:\r\n-                sock, address = sock_server.accept()\r\n-                data = recver_message(sock)\r\n-                if data!=cilent_key:\r\n-                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n-                    send_message(sock,sever_key)\r\n-                    send_message(sock,\"拒绝连接\")\r\n-                    sock.close()\r\n-                else:\r\n-                    myPrint_Success(\"客户端keyid:\", data)\r\n-                    sock.send(sever_key.encode())\r\n-                    if is_multithreading:\r\n-                        thread = threading.Thread(target=fun, args=(sock,))\r\n-                        thread.setDaemon(True)\r\n-                        thread.start()\r\n-                    else:\r\n-                        fun(sock)\r\n-\r\n-            except Exception as e:\r\n-                myPrint_Err(e)\r\n-\r\n-\r\n-\r\n-    def state(self):\r\n-        pass\r\n-\r\n-\r\n-def send_message(socket,data):\r\n-    socket.send(data.encode())\r\n-\r\n-\r\n class SocketClient(object):\r\n \r\n     def __init__(self, host=Host, port=PORT):\r\n         self.host = host\r\n@@ -280,9 +129,9 @@\n def recver_obj(socket):\r\n     data=\"\"\r\n     while 1:\r\n         middle=socket.recv(1024)\r\n-        if middle==Sever_Message_end:\r\n+        if middle==Sever_Message_end.encode():\r\n             return data\r\n         else:\r\n             data+=middle\r\n     return pickle.loads(data)\r\n"
                },
                {
                    "date": 1697419347408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n                     send_message(sock,\"拒绝连接\")\r\n                     sock.close()\r\n                 else:\r\n                     myPrint_Success(\"客户端keyid:\", data)\r\n-                    sock.send(sever_key.encode())\r\n+                    send_message(socket,sever_key.encode())\r\n                     if is_multithreading:\r\n                         thread = threading.Thread(target=fun, args=(sock,))\r\n                         thread.setDaemon(True)\r\n                         thread.start()\r\n"
                },
                {
                    "date": 1697419744387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                data = recver_message(sock)\r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Success(\"客户端keyid:\", data)\r\n+                    send_message(socket,sever_key.encode())\r\n+                    if is_multithreading:\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.send(data.encode())\r\n+    socket.send(Sever_Message_end.encode())\r\n+\r\n+    \r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                send_message(sock,cilent_key)\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+        myPrint_Success(\"=============连接成功========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024).decode('utf-8','ignore')\r\n+        if middle==Sever_Message_end:\r\n+            return data\r\n+        else:\r\n+            data+=middle\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+\r\n+        if data == Sever_Message_end:\r\n+            send_message(socket,Sever_Message_confirm)\r\n+            return blog_data\r\n+        else:\r\n+            blog_data +=\"\\n\"+data\r\n+            send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024)\r\n+        if middle==Sever_Message_end.encode():\r\n+            return data\r\n+        else:\r\n+            data+=middle\r\n+    return pickle.loads(data)\r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.send(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.send(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket,obj):\r\n+    socket.send(pickle.dumps(obj=obj))\r\n+    socket.send(Sever_Message_end.encode())\r\n"
                },
                {
                    "date": 1697420101625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n \r\n \r\n def send_message(socket,data):\r\n     socket.send(data.encode())\r\n-    socket.send(Sever_Message_end.encode())\r\n+    socket.send(Sever_Message_end)\r\n \r\n     \r\n \r\n \r\n@@ -129,9 +129,9 @@\n def recver_obj(socket):\r\n     data=\"\"\r\n     while 1:\r\n         middle=socket.recv(1024)\r\n-        if middle==Sever_Message_end.encode():\r\n+        if middle==Sever_Message_end:\r\n             return data\r\n         else:\r\n             data+=middle\r\n     return pickle.loads(data)\r\n"
                },
                {
                    "date": 1697420329932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import sys\r\n BASE_DIR = os.path.dirname(__file__)\r\n for i in range(3):###距离项目根目录的距离____终端使用\r\n     BASE_DIR=os.path.dirname(BASE_DIR)\r\n-sys.path.append(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n import socket\r\n import time\r\n \r\n import tqdm\r\n@@ -154,161 +154,4 @@\n \r\n def send_obj(socket,obj):\r\n     socket.send(pickle.dumps(obj=obj))\r\n     socket.send(Sever_Message_end.encode())\r\n-# author:高金磊\r\n-# datetime:2022/6/22 9:48\r\n-import threading\r\n-import os\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-sys.path.append(BASE_DIR)\r\n-import socket\r\n-import time\r\n-\r\n-import tqdm\r\n-import pickle\r\n-from Data import *\r\n-\r\n-from myPrint import *\r\n-class SocketServer(object):\r\n-\r\n-    def __init__(self, port=PORT):\r\n-        self.port = port\r\n-\r\n-    def startup(self,fun,is_multithreading=True):\r\n-        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        sock_server.bind((Host, self.port))\r\n-        sock_server.listen(0)\r\n-        myPrint_Hint(\"===========等待连接================\")\r\n-        while True:\r\n-            try:\r\n-                sock, address = sock_server.accept()\r\n-                data = recver_message(sock)\r\n-                if data!=cilent_key:\r\n-                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n-                    send_message(sock,sever_key)\r\n-                    send_message(sock,\"拒绝连接\")\r\n-                    sock.close()\r\n-                else:\r\n-                    myPrint_Success(\"客户端keyid:\", data)\r\n-                    send_message(socket,sever_key.encode())\r\n-                    if is_multithreading:\r\n-                        thread = threading.Thread(target=fun, args=(sock,))\r\n-                        thread.setDaemon(True)\r\n-                        thread.start()\r\n-                    else:\r\n-                        fun(sock)\r\n-\r\n-            except Exception as e:\r\n-                myPrint_Err(e)\r\n-\r\n-\r\n-\r\n-    def state(self):\r\n-        pass\r\n-\r\n-\r\n-def send_message(socket,data):\r\n-    socket.send(data.encode())\r\n-    socket.send(Sever_Message_end.encode())\r\n-\r\n-    \r\n-\r\n-\r\n-class SocketClient(object):\r\n-\r\n-    def __init__(self, host=Host, port=PORT):\r\n-        self.host = host\r\n-        self.port = port\r\n-\r\n-    def connect(self,fun,time_out=20):\r\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        # sock.settimeout(4)\r\n-        for i in range(10):\r\n-            try:\r\n-                myPrint_Hint(\"=============连接中========================\")\r\n-                sock.connect((self.host, self.port))\r\n-                send_message(sock,cilent_key)\r\n-                data=recver_message(sock)\r\n-                break\r\n-            except Exception as e:\r\n-                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n-                #     break\r\n-                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n-                myPrint_Hint(e)\r\n-                if i==time_out-1:\r\n-                    myPrint_Err(\"=============连接超时========================\")\r\n-                    return -1\r\n-                time.sleep(2)\r\n-        myPrint_Success(\"=============连接成功========================\")\r\n-        if data!=sever_key:\r\n-            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n-            send_message(sock,\"拒绝连接\")\r\n-            myPrint_Success(\"=============连接断开========================\")\r\n-            sock.close()\r\n-        else:\r\n-            myPrint_Success(\"=============服务器允许接入========================\")\r\n-            myPrint_Hint(\"服务器keyid:\", data)\r\n-            fun(sock)\r\n-        return sock\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-def recver_message_block(socket,expect_message):\r\n-    while recver_message(socket) !=expect_message:\r\n-        pass\r\n-    return True\r\n-def recver_message(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024).decode('utf-8','ignore')\r\n-        if middle==Sever_Message_end:\r\n-            return data\r\n-        else:\r\n-            data+=middle\r\n-def recv_blog(socket):\r\n-    blog_data = \"\"\r\n-    while 1:\r\n-        # 接收批量结果\r\n-        data =recver_message(socket)\r\n-\r\n-        if data == Sever_Message_end:\r\n-            send_message(socket,Sever_Message_confirm)\r\n-            return blog_data\r\n-        else:\r\n-            blog_data +=\"\\n\"+data\r\n-            send_message(socket,Sever_Message_confirm)\r\n-def recver_obj(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024)\r\n-        if middle==Sever_Message_end.encode():\r\n-            return data\r\n-        else:\r\n-            data+=middle\r\n-    return pickle.loads(data)\r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.send(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.send(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n-    socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n-def send_obj(socket,obj):\r\n-    socket.send(pickle.dumps(obj=obj))\r\n-    socket.send(Sever_Message_end.encode())\r\n"
                },
                {
                    "date": 1697420404511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n                     send_message(sock,\"拒绝连接\")\r\n                     sock.close()\r\n                 else:\r\n                     myPrint_Success(\"客户端keyid:\", data)\r\n-                    send_message(socket,sever_key.encode())\r\n+                    send_message(sock,sever_key.encode())\r\n                     if is_multithreading:\r\n                         thread = threading.Thread(target=fun, args=(sock,))\r\n                         thread.setDaemon(True)\r\n                         thread.start()\r\n"
                },
                {
                    "date": 1697421025336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                data = recver_message(sock)\r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Success(\"客户端keyid:\", data)\r\n+                    send_message(sock,sever_key.encode())\r\n+                    if is_multithreading:\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.send(data.encode())\r\n+    socket.send(Sever_Message_end)\r\n+\r\n+    \r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                send_message(sock,cilent_key)\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+        myPrint_Success(\"=============连接成功========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024).decode('utf-8','ignore')\r\n+        if middle==Sever_Message_end:\r\n+            return data\r\n+        else:\r\n+            data+=middle\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+\r\n+        if data == Sever_Message_end:\r\n+            send_message(socket,Sever_Message_confirm)\r\n+            return blog_data\r\n+        else:\r\n+            blog_data +=\"\\n\"+data\r\n+            send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024)\r\n+        if middle==Sever_Message_end:\r\n+            return data\r\n+        else:\r\n+            data+=middle\r\n+    return pickle.loads(data)\r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.send(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.send(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket,obj):\r\n+    socket.send(pickle.dumps(obj=obj))\r\n+    socket.send(Sever_Message_end.encode())\r\n"
                },
                {
                    "date": 1697421298950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n # datetime:2022/6/22 9:48\r\n import threading\r\n import os\r\n import sys\r\n+import traceback\r\n BASE_DIR = os.path.dirname(__file__)\r\n for i in range(3):###距离项目根目录的距离____终端使用\r\n     BASE_DIR=os.path.dirname(BASE_DIR)\r\n     sys.path.append(BASE_DIR)\r\n@@ -44,8 +45,9 @@\n                     else:\r\n                         fun(sock)\r\n \r\n             except Exception as e:\r\n+                traceback.print_exc()\r\n                 myPrint_Err(e)\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1697421501961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,10 +56,30 @@\n \r\n \r\n def send_message(socket,data):\r\n     socket.send(data.encode())\r\n-    socket.send(Sever_Message_end)\r\n+    socket.send(Sever_Message_end.encode())\r\n+    \r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.send(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.send(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n \r\n+def send_obj(socket,obj):\r\n+    socket.send(pickle.dumps(obj=obj))\r\n+    socket.send(Sever_Message_end.encode())\r\n     \r\n \r\n \r\n class SocketClient(object):\r\n@@ -136,24 +156,5 @@\n             return data\r\n         else:\r\n             data+=middle\r\n     return pickle.loads(data)\r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.send(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.send(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n-    socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n \r\n-def send_obj(socket,obj):\r\n-    socket.send(pickle.dumps(obj=obj))\r\n-    socket.send(Sever_Message_end.encode())\r\n"
                },
                {
                    "date": 1697421571499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n         pass\r\n \r\n \r\n def send_message(socket,data):\r\n-    socket.send(data.encode())\r\n+    socket.send(data)\r\n     socket.send(Sever_Message_end.encode())\r\n     \r\n def send_blog_message(socket, data_list):\r\n     \"\"\"\r\n@@ -157,161 +157,4 @@\n         else:\r\n             data+=middle\r\n     return pickle.loads(data)\r\n \r\n-# author:高金磊\r\n-# datetime:2022/6/22 9:48\r\n-import threading\r\n-import os\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-import socket\r\n-import time\r\n-\r\n-import tqdm\r\n-import pickle\r\n-from Data import *\r\n-\r\n-from myPrint import *\r\n-class SocketServer(object):\r\n-\r\n-    def __init__(self, port=PORT):\r\n-        self.port = port\r\n-\r\n-    def startup(self,fun,is_multithreading=True):\r\n-        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        sock_server.bind((Host, self.port))\r\n-        sock_server.listen(0)\r\n-        myPrint_Hint(\"===========等待连接================\")\r\n-        while True:\r\n-            try:\r\n-                sock, address = sock_server.accept()\r\n-                data = recver_message(sock)\r\n-                if data!=cilent_key:\r\n-                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n-                    send_message(sock,sever_key)\r\n-                    send_message(sock,\"拒绝连接\")\r\n-                    sock.close()\r\n-                else:\r\n-                    myPrint_Success(\"客户端keyid:\", data)\r\n-                    send_message(sock,sever_key.encode())\r\n-                    if is_multithreading:\r\n-                        thread = threading.Thread(target=fun, args=(sock,))\r\n-                        thread.setDaemon(True)\r\n-                        thread.start()\r\n-                    else:\r\n-                        fun(sock)\r\n-\r\n-            except Exception as e:\r\n-                myPrint_Err(e)\r\n-\r\n-\r\n-\r\n-    def state(self):\r\n-        pass\r\n-\r\n-\r\n-def send_message(socket,data):\r\n-    socket.send(data.encode())\r\n-    socket.send(Sever_Message_end)\r\n-\r\n-    \r\n-\r\n-\r\n-class SocketClient(object):\r\n-\r\n-    def __init__(self, host=Host, port=PORT):\r\n-        self.host = host\r\n-        self.port = port\r\n-\r\n-    def connect(self,fun,time_out=20):\r\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        # sock.settimeout(4)\r\n-        for i in range(10):\r\n-            try:\r\n-                myPrint_Hint(\"=============连接中========================\")\r\n-                sock.connect((self.host, self.port))\r\n-                send_message(sock,cilent_key)\r\n-                data=recver_message(sock)\r\n-                break\r\n-            except Exception as e:\r\n-                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n-                #     break\r\n-                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n-                myPrint_Hint(e)\r\n-                if i==time_out-1:\r\n-                    myPrint_Err(\"=============连接超时========================\")\r\n-                    return -1\r\n-                time.sleep(2)\r\n-        myPrint_Success(\"=============连接成功========================\")\r\n-        if data!=sever_key:\r\n-            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n-            send_message(sock,\"拒绝连接\")\r\n-            myPrint_Success(\"=============连接断开========================\")\r\n-            sock.close()\r\n-        else:\r\n-            myPrint_Success(\"=============服务器允许接入========================\")\r\n-            myPrint_Hint(\"服务器keyid:\", data)\r\n-            fun(sock)\r\n-        return sock\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-def recver_message_block(socket,expect_message):\r\n-    while recver_message(socket) !=expect_message:\r\n-        pass\r\n-    return True\r\n-def recver_message(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024).decode('utf-8','ignore')\r\n-        if middle==Sever_Message_end:\r\n-            return data\r\n-        else:\r\n-            data+=middle\r\n-def recv_blog(socket):\r\n-    blog_data = \"\"\r\n-    while 1:\r\n-        # 接收批量结果\r\n-        data =recver_message(socket)\r\n-\r\n-        if data == Sever_Message_end:\r\n-            send_message(socket,Sever_Message_confirm)\r\n-            return blog_data\r\n-        else:\r\n-            blog_data +=\"\\n\"+data\r\n-            send_message(socket,Sever_Message_confirm)\r\n-def recver_obj(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024)\r\n-        if middle==Sever_Message_end:\r\n-            return data\r\n-        else:\r\n-            data+=middle\r\n-    return pickle.loads(data)\r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.send(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.send(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n-    socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n-def send_obj(socket,obj):\r\n-    socket.send(pickle.dumps(obj=obj))\r\n-    socket.send(Sever_Message_end.encode())\r\n"
                },
                {
                    "date": 1697421614341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n         pass\r\n \r\n \r\n def send_message(socket,data):\r\n-    socket.send(data)\r\n+    socket.send(data.encode())\r\n     socket.send(Sever_Message_end.encode())\r\n     \r\n def send_blog_message(socket, data_list):\r\n     \"\"\"\r\n"
                },
                {
                    "date": 1697421733664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,13 +2,12 @@\n # datetime:2022/6/22 9:48\r\n import threading\r\n import os\r\n import sys\r\n-import traceback\r\n BASE_DIR = os.path.dirname(__file__)\r\n for i in range(3):###距离项目根目录的距离____终端使用\r\n     BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n+sys.path.append(BASE_DIR)\r\n import socket\r\n import time\r\n \r\n import tqdm\r\n@@ -36,18 +35,17 @@\n                     send_message(sock,\"拒绝连接\")\r\n                     sock.close()\r\n                 else:\r\n                     myPrint_Success(\"客户端keyid:\", data)\r\n-                    send_message(sock,sever_key.encode())\r\n+                    sock.send(sever_key.encode())\r\n                     if is_multithreading:\r\n                         thread = threading.Thread(target=fun, args=(sock,))\r\n                         thread.setDaemon(True)\r\n                         thread.start()\r\n                     else:\r\n                         fun(sock)\r\n \r\n             except Exception as e:\r\n-                traceback.print_exc()\r\n                 myPrint_Err(e)\r\n \r\n \r\n \r\n@@ -56,33 +54,10 @@\n \r\n \r\n def send_message(socket,data):\r\n     socket.send(data.encode())\r\n-    socket.send(Sever_Message_end.encode())\r\n-    \r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.send(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.send(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n-    socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n \r\n-def send_obj(socket,obj):\r\n-    socket.send(pickle.dumps(obj=obj))\r\n-    socket.send(Sever_Message_end.encode())\r\n-    \r\n \r\n-\r\n class SocketClient(object):\r\n \r\n     def __init__(self, host=Host, port=PORT):\r\n         self.host = host\r\n@@ -128,15 +103,10 @@\n     while recver_message(socket) !=expect_message:\r\n         pass\r\n     return True\r\n def recver_message(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024).decode('utf-8','ignore')\r\n-        if middle==Sever_Message_end:\r\n-            return data\r\n-        else:\r\n-            data+=middle\r\n+    data = socket.recv(4096).decode('utf-8','ignore')\r\n+    return data\r\n def recv_blog(socket):\r\n     blog_data = \"\"\r\n     while 1:\r\n         # 接收批量结果\r\n@@ -148,13 +118,25 @@\n         else:\r\n             blog_data +=\"\\n\"+data\r\n             send_message(socket,Sever_Message_confirm)\r\n def recver_obj(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024)\r\n-        if middle==Sever_Message_end:\r\n-            return data\r\n-        else:\r\n-            data+=middle\r\n+    data = socket.recv(4096)\r\n     return pickle.loads(data)\r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.send(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.send(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n \r\n+def send_obj(socket,obj):\r\n+    socket.send(pickle.dumps(obj=obj))\r\n"
                },
                {
                    "date": 1697421766889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import sys\r\n BASE_DIR = os.path.dirname(__file__)\r\n for i in range(3):###距离项目根目录的距离____终端使用\r\n     BASE_DIR=os.path.dirname(BASE_DIR)\r\n-sys.path.append(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n import socket\r\n import time\r\n \r\n import tqdm\r\n"
                },
                {
                    "date": 1697421810936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+import traceback\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                data = recver_message(sock)\r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Success(\"客户端keyid:\", data)\r\n+                    send_message(sock,sever_key.encode())\r\n+                    if is_multithreading:\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                traceback.print_exc()\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.send(data.encode())\r\n+    socket.send(Sever_Message_end.encode())\r\n+    \r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.send(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.send(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket,obj):\r\n+    socket.send(pickle.dumps(obj=obj))\r\n+    socket.send(Sever_Message_end.encode())\r\n+    \r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                send_message(sock,cilent_key)\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+        myPrint_Success(\"=============连接成功========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024).decode('utf-8','ignore')\r\n+        if middle==Sever_Message_end:\r\n+            return data\r\n+        else:\r\n+            data+=middle\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+\r\n+        if data == Sever_Message_end:\r\n+            send_message(socket,Sever_Message_confirm)\r\n+            return blog_data\r\n+        else:\r\n+            blog_data +=\"\\n\"+data\r\n+            send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024)\r\n+        if middle==Sever_Message_end:\r\n+            return data\r\n+        else:\r\n+            data+=middle\r\n+    return pickle.loads(data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697421831919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n                     send_message(sock,\"拒绝连接\")\r\n                     sock.close()\r\n                 else:\r\n                     myPrint_Success(\"客户端keyid:\", data)\r\n-                    send_message(sock,sever_key.encode())\r\n+                    send_message(sock,sever_key)\r\n                     if is_multithreading:\r\n                         thread = threading.Thread(target=fun, args=(sock,))\r\n                         thread.setDaemon(True)\r\n                         thread.start()\r\n"
                },
                {
                    "date": 1697421946852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,147 +155,5 @@\n         if middle==Sever_Message_end:\r\n             return data\r\n         else:\r\n             data+=middle\r\n-    return pickle.loads(data)\n-# author:高金磊\r\n-# datetime:2022/6/22 9:48\r\n-import threading\r\n-import os\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-import socket\r\n-import time\r\n-\r\n-import tqdm\r\n-import pickle\r\n-from Data import *\r\n-\r\n-from myPrint import *\r\n-class SocketServer(object):\r\n-\r\n-    def __init__(self, port=PORT):\r\n-        self.port = port\r\n-\r\n-    def startup(self,fun,is_multithreading=True):\r\n-        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        sock_server.bind((Host, self.port))\r\n-        sock_server.listen(0)\r\n-        myPrint_Hint(\"===========等待连接================\")\r\n-        while True:\r\n-            try:\r\n-                sock, address = sock_server.accept()\r\n-                data = recver_message(sock)\r\n-                if data!=cilent_key:\r\n-                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n-                    send_message(sock,sever_key)\r\n-                    send_message(sock,\"拒绝连接\")\r\n-                    sock.close()\r\n-                else:\r\n-                    myPrint_Success(\"客户端keyid:\", data)\r\n-                    sock.send(sever_key.encode())\r\n-                    if is_multithreading:\r\n-                        thread = threading.Thread(target=fun, args=(sock,))\r\n-                        thread.setDaemon(True)\r\n-                        thread.start()\r\n-                    else:\r\n-                        fun(sock)\r\n-\r\n-            except Exception as e:\r\n-                myPrint_Err(e)\r\n-\r\n-\r\n-\r\n-    def state(self):\r\n-        pass\r\n-\r\n-\r\n-def send_message(socket,data):\r\n-    socket.send(data.encode())\r\n-\r\n-\r\n-class SocketClient(object):\r\n-\r\n-    def __init__(self, host=Host, port=PORT):\r\n-        self.host = host\r\n-        self.port = port\r\n-\r\n-    def connect(self,fun,time_out=20):\r\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        # sock.settimeout(4)\r\n-        for i in range(10):\r\n-            try:\r\n-                myPrint_Hint(\"=============连接中========================\")\r\n-                sock.connect((self.host, self.port))\r\n-                send_message(sock,cilent_key)\r\n-                data=recver_message(sock)\r\n-                break\r\n-            except Exception as e:\r\n-                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n-                #     break\r\n-                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n-                myPrint_Hint(e)\r\n-                if i==time_out-1:\r\n-                    myPrint_Err(\"=============连接超时========================\")\r\n-                    return -1\r\n-                time.sleep(2)\r\n-        myPrint_Success(\"=============连接成功========================\")\r\n-        if data!=sever_key:\r\n-            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n-            send_message(sock,\"拒绝连接\")\r\n-            myPrint_Success(\"=============连接断开========================\")\r\n-            sock.close()\r\n-        else:\r\n-            myPrint_Success(\"=============服务器允许接入========================\")\r\n-            myPrint_Hint(\"服务器keyid:\", data)\r\n-            fun(sock)\r\n-        return sock\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-def recver_message_block(socket,expect_message):\r\n-    while recver_message(socket) !=expect_message:\r\n-        pass\r\n-    return True\r\n-def recver_message(socket):\r\n-    data = socket.recv(4096).decode('utf-8','ignore')\r\n-    return data\r\n-def recv_blog(socket):\r\n-    blog_data = \"\"\r\n-    while 1:\r\n-        # 接收批量结果\r\n-        data =recver_message(socket)\r\n-\r\n-        if data == Sever_Message_end:\r\n-            send_message(socket,Sever_Message_confirm)\r\n-            return blog_data\r\n-        else:\r\n-            blog_data +=\"\\n\"+data\r\n-            send_message(socket,Sever_Message_confirm)\r\n-def recver_obj(socket):\r\n-    data = socket.recv(4096)\r\n-    return pickle.loads(data)\r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.send(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.send(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n-    socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n-def send_obj(socket,obj):\r\n-    socket.send(pickle.dumps(obj=obj))\n\\ No newline at end of file\n+    return pickle.loads(data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697422270736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,11 @@\n         myPrint_Hint(\"===========等待连接================\")\r\n         while True:\r\n             try:\r\n                 sock, address = sock_server.accept()\r\n+\r\n                 data = recver_message(sock)\r\n+ \r\n                 if data!=cilent_key:\r\n                     myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n                     send_message(sock,sever_key)\r\n                     send_message(sock,\"拒绝连接\")\r\n"
                },
                {
                    "date": 1697422339846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+import traceback\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+\r\n+                data = recver_message(sock)\r\n+ \r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Success(\"客户端keyid:\", data)\r\n+                    send_message(sock,sever_key)\r\n+                    if is_multithreading:\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                traceback.print_exc()\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.send(data.encode())\r\n+    socket.send(Sever_Message_end.encode())\r\n+    \r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.send(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.send(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket,obj):\r\n+    socket.send(pickle.dumps(obj=obj))\r\n+    socket.send(Sever_Message_end.encode())\r\n+    \r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                myPrint_Success(\"=============交换密匙========================\")\r\n+                send_message(sock,cilent_key)\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+        myPrint_Success(\"=============连接成功========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024).decode('utf-8','ignore')\r\n+        if middle==Sever_Message_end:\r\n+            return data\r\n+        else:\r\n+            data+=middle\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+\r\n+        if data == Sever_Message_end:\r\n+            send_message(socket,Sever_Message_confirm)\r\n+            return blog_data\r\n+        else:\r\n+            blog_data +=\"\\n\"+data\r\n+            send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024)\r\n+        if middle==Sever_Message_end:\r\n+            return data\r\n+        else:\r\n+            data+=middle\r\n+    return pickle.loads(data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697422428662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,8 +98,9 @@\n                 myPrint_Hint(\"=============连接中========================\")\r\n                 sock.connect((self.host, self.port))\r\n                 myPrint_Success(\"=============交换密匙========================\")\r\n                 send_message(sock,cilent_key)\r\n+                myPrint_Success(\"=============验证客户端密匙========================\")\r\n                 data=recver_message(sock)\r\n                 break\r\n             except Exception as e:\r\n                 # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n@@ -109,16 +110,18 @@\n                 if i==time_out-1:\r\n                     myPrint_Err(\"=============连接超时========================\")\r\n                     return -1\r\n                 time.sleep(2)\r\n-        myPrint_Success(\"=============连接成功========================\")\r\n+       \r\n+        myPrint_Success(\"=============验证客户端密匙========================\")\r\n         if data!=sever_key:\r\n             myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n             send_message(sock,\"拒绝连接\")\r\n             myPrint_Success(\"=============连接断开========================\")\r\n             sock.close()\r\n         else:\r\n             myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Success(\"=============连接成功========================\")\r\n             myPrint_Hint(\"服务器keyid:\", data)\r\n             fun(sock)\r\n         return sock\r\n \r\n"
                },
                {
                    "date": 1697422512777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,10 +96,12 @@\n         for i in range(10):\r\n             try:\r\n                 myPrint_Hint(\"=============连接中========================\")\r\n                 sock.connect((self.host, self.port))\r\n+                time.sleep(0.5)\r\n                 myPrint_Success(\"=============交换密匙========================\")\r\n                 send_message(sock,cilent_key)\r\n+                time.sleep(0.5)\r\n                 myPrint_Success(\"=============验证客户端密匙========================\")\r\n                 data=recver_message(sock)\r\n                 break\r\n             except Exception as e:\r\n@@ -111,9 +113,9 @@\n                     myPrint_Err(\"=============连接超时========================\")\r\n                     return -1\r\n                 time.sleep(2)\r\n        \r\n-        myPrint_Success(\"=============验证客户端密匙========================\")\r\n+        myPrint_Success(\"=============验证服务端密匙========================\")\r\n         if data!=sever_key:\r\n             myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n             send_message(sock,\"拒绝连接\")\r\n             myPrint_Success(\"=============连接断开========================\")\r\n@@ -161,166 +163,5 @@\n         if middle==Sever_Message_end:\r\n             return data\r\n         else:\r\n             data+=middle\r\n-    return pickle.loads(data)\n-# author:高金磊\r\n-# datetime:2022/6/22 9:48\r\n-import threading\r\n-import os\r\n-import sys\r\n-import traceback\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-import socket\r\n-import time\r\n-\r\n-import tqdm\r\n-import pickle\r\n-from Data import *\r\n-\r\n-from myPrint import *\r\n-class SocketServer(object):\r\n-\r\n-    def __init__(self, port=PORT):\r\n-        self.port = port\r\n-\r\n-    def startup(self,fun,is_multithreading=True):\r\n-        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        sock_server.bind((Host, self.port))\r\n-        sock_server.listen(0)\r\n-        myPrint_Hint(\"===========等待连接================\")\r\n-        while True:\r\n-            try:\r\n-                sock, address = sock_server.accept()\r\n-\r\n-                data = recver_message(sock)\r\n- \r\n-                if data!=cilent_key:\r\n-                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n-                    send_message(sock,sever_key)\r\n-                    send_message(sock,\"拒绝连接\")\r\n-                    sock.close()\r\n-                else:\r\n-                    myPrint_Success(\"客户端keyid:\", data)\r\n-                    send_message(sock,sever_key)\r\n-                    if is_multithreading:\r\n-                        thread = threading.Thread(target=fun, args=(sock,))\r\n-                        thread.setDaemon(True)\r\n-                        thread.start()\r\n-                    else:\r\n-                        fun(sock)\r\n-\r\n-            except Exception as e:\r\n-                traceback.print_exc()\r\n-                myPrint_Err(e)\r\n-\r\n-\r\n-\r\n-    def state(self):\r\n-        pass\r\n-\r\n-\r\n-def send_message(socket,data):\r\n-    socket.send(data.encode())\r\n-    socket.send(Sever_Message_end.encode())\r\n-    \r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.send(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.send(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n-    socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n-def send_obj(socket,obj):\r\n-    socket.send(pickle.dumps(obj=obj))\r\n-    socket.send(Sever_Message_end.encode())\r\n-    \r\n-\r\n-\r\n-class SocketClient(object):\r\n-\r\n-    def __init__(self, host=Host, port=PORT):\r\n-        self.host = host\r\n-        self.port = port\r\n-\r\n-    def connect(self,fun,time_out=20):\r\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        # sock.settimeout(4)\r\n-        for i in range(10):\r\n-            try:\r\n-                myPrint_Hint(\"=============连接中========================\")\r\n-                sock.connect((self.host, self.port))\r\n-                send_message(sock,cilent_key)\r\n-                data=recver_message(sock)\r\n-                break\r\n-            except Exception as e:\r\n-                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n-                #     break\r\n-                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n-                myPrint_Hint(e)\r\n-                if i==time_out-1:\r\n-                    myPrint_Err(\"=============连接超时========================\")\r\n-                    return -1\r\n-                time.sleep(2)\r\n-        myPrint_Success(\"=============连接成功========================\")\r\n-        if data!=sever_key:\r\n-            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n-            send_message(sock,\"拒绝连接\")\r\n-            myPrint_Success(\"=============连接断开========================\")\r\n-            sock.close()\r\n-        else:\r\n-            myPrint_Success(\"=============服务器允许接入========================\")\r\n-            myPrint_Hint(\"服务器keyid:\", data)\r\n-            fun(sock)\r\n-        return sock\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-def recver_message_block(socket,expect_message):\r\n-    while recver_message(socket) !=expect_message:\r\n-        pass\r\n-    return True\r\n-def recver_message(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024).decode('utf-8','ignore')\r\n-        if middle==Sever_Message_end:\r\n-            return data\r\n-        else:\r\n-            data+=middle\r\n-def recv_blog(socket):\r\n-    blog_data = \"\"\r\n-    while 1:\r\n-        # 接收批量结果\r\n-        data =recver_message(socket)\r\n-\r\n-        if data == Sever_Message_end:\r\n-            send_message(socket,Sever_Message_confirm)\r\n-            return blog_data\r\n-        else:\r\n-            blog_data +=\"\\n\"+data\r\n-            send_message(socket,Sever_Message_confirm)\r\n-def recver_obj(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024)\r\n-        if middle==Sever_Message_end:\r\n-            return data\r\n-        else:\r\n-            data+=middle\r\n     return pickle.loads(data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697422597924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,11 +28,11 @@\n         myPrint_Hint(\"===========等待连接================\")\r\n         while True:\r\n             try:\r\n                 sock, address = sock_server.accept()\r\n-\r\n+                myPrint_Hint(\"===========验证客户端密匙================\")\r\n                 data = recver_message(sock)\r\n- \r\n+                \r\n                 if data!=cilent_key:\r\n                     myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n                     send_message(sock,sever_key)\r\n                     send_message(sock,\"拒绝连接\")\r\n"
                },
                {
                    "date": 1697422677573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,9 @@\n                     send_message(sock,\"拒绝连接\")\r\n                     sock.close()\r\n                 else:\r\n                     myPrint_Success(\"客户端keyid:\", data)\r\n+                    myPrint_Hint(\"===========发送服务端================\")\r\n                     send_message(sock,sever_key)\r\n                     if is_multithreading:\r\n                         thread = threading.Thread(target=fun, args=(sock,))\r\n                         thread.setDaemon(True)\r\n"
                },
                {
                    "date": 1697422752804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,12 +98,12 @@\n             try:\r\n                 myPrint_Hint(\"=============连接中========================\")\r\n                 sock.connect((self.host, self.port))\r\n                 time.sleep(0.5)\r\n-                myPrint_Success(\"=============交换密匙========================\")\r\n+                myPrint_Success(\"=============发送客户端密匙========================\")\r\n                 send_message(sock,cilent_key)\r\n                 time.sleep(0.5)\r\n-                myPrint_Success(\"=============验证客户端密匙========================\")\r\n+                myPrint_Success(\"=============接收服务端密匙========================\")\r\n                 data=recver_message(sock)\r\n                 break\r\n             except Exception as e:\r\n                 # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n"
                },
                {
                    "date": 1697422818582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,19 +28,19 @@\n         myPrint_Hint(\"===========等待连接================\")\r\n         while True:\r\n             try:\r\n                 sock, address = sock_server.accept()\r\n-                myPrint_Hint(\"===========验证客户端密匙================\")\r\n+                myPrint_Hint(\"===========接收客户端密匙================\")\r\n                 data = recver_message(sock)\r\n                 \r\n                 if data!=cilent_key:\r\n                     myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n                     send_message(sock,sever_key)\r\n                     send_message(sock,\"拒绝连接\")\r\n                     sock.close()\r\n                 else:\r\n-                    myPrint_Success(\"客户端keyid:\", data)\r\n-                    myPrint_Hint(\"===========发送服务端================\")\r\n+                    myPrint_Hint(\"===========客户端密匙验证成功================\")\r\n+                    myPrint_Hint(\"===========发送服务端密匙================\")\r\n                     send_message(sock,sever_key)\r\n                     if is_multithreading:\r\n                         thread = threading.Thread(target=fun, args=(sock,))\r\n                         thread.setDaemon(True)\r\n"
                },
                {
                    "date": 1697424263402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+import traceback\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                myPrint_Hint(\"===========接收客户端密匙================\")\r\n+                data = recver_message(sock)\r\n+                \r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Hint(\"===========客户端密匙验证成功================\")\r\n+                    myPrint_Hint(\"===========发送服务端密匙================\")\r\n+                    send_message(sock,sever_key)\r\n+                    if is_multithreading:\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                traceback.print_exc()\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.send(data.encode())\r\n+    socket.send(Sever_Message_end.encode())\r\n+    \r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.send(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.send(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.send(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket:socket,obj):\r\n+    socket.sendall(pickle.dumps(obj=obj))\r\n+    socket.sendall(Sever_Message_end.encode())\r\n+    \r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                time.sleep(0.5)\r\n+                myPrint_Success(\"=============发送客户端密匙========================\")\r\n+                send_message(sock,cilent_key)\r\n+                time.sleep(0.5)\r\n+                myPrint_Success(\"=============接收服务端密匙========================\")\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+       \r\n+        myPrint_Success(\"=============验证服务端密匙========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Success(\"=============连接成功========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024).decode('utf-8','ignore')\r\n+        if middle==Sever_Message_end:\r\n+            return data\r\n+        else:\r\n+            data+=middle\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+\r\n+        if data == Sever_Message_end:\r\n+            send_message(socket,Sever_Message_confirm)\r\n+            return blog_data\r\n+        else:\r\n+            blog_data +=\"\\n\"+data\r\n+            send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024)\r\n+        if middle==Sever_Message_end:\r\n+            return data\r\n+        else:\r\n+            data+=middle\r\n+    return pickle.loads(data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697424338589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,10 +58,10 @@\n         pass\r\n \r\n \r\n def send_message(socket,data):\r\n-    socket.send(data.encode())\r\n-    socket.send(Sever_Message_end.encode())\r\n+    socket.sendall(data.encode())\r\n+    socket.sendall(Sever_Message_end.encode())\r\n     \r\n def send_blog_message(socket, data_list):\r\n     \"\"\"\r\n     发送批量消息\r\n@@ -69,20 +69,20 @@\n         socket (_type_): _description_\r\n         data_list (_type_): _description_\r\n     \"\"\"\r\n         \r\n-    socket.send(Sever_Message_start.encode())\r\n+    socket.sendall(Sever_Message_start.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n     for i in data_list:\r\n-        socket.send(i.encode())\r\n+        socket.sendall(i.encode())\r\n         recver_message_block(socket, Sever_Message_confirm)\r\n         print(i)\r\n-    socket.send(Sever_Message_end.encode())\r\n+    socket.sendall(Sever_Message_end.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n \r\n def send_obj(socket:socket,obj):\r\n-    socket.sendall(pickle.dumps(obj=obj))\r\n-    socket.sendall(Sever_Message_end.encode())\r\n+    socket.sendallall(pickle.dumps(obj=obj))\r\n+    socket.sendallall(Sever_Message_end.encode())\r\n     \r\n \r\n \r\n class SocketClient(object):\r\n"
                },
                {
                    "date": 1697424635731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n \r\n \r\n def send_message(socket,data):\r\n     socket.sendall(data.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n     socket.sendall(Sever_Message_end.encode())\r\n     \r\n def send_blog_message(socket, data_list):\r\n     \"\"\"\r\n@@ -79,10 +80,11 @@\n     socket.sendall(Sever_Message_end.encode())\r\n     recver_message_block(socket, Sever_Message_confirm)\r\n \r\n def send_obj(socket:socket,obj):\r\n-    socket.sendallall(pickle.dumps(obj=obj))\r\n-    socket.sendallall(Sever_Message_end.encode())\r\n+    socket.sendall(pickle.dumps(obj=obj))\r\n+    time.sleep(0.5)\r\n+    socket.sendall(Sever_Message_end.encode())\r\n     \r\n \r\n \r\n class SocketClient(object):\r\n@@ -144,176 +146,9 @@\n         if middle==Sever_Message_end:\r\n             return data\r\n         else:\r\n             data+=middle\r\n-def recv_blog(socket):\r\n-    blog_data = \"\"\r\n-    while 1:\r\n-        # 接收批量结果\r\n-        data =recver_message(socket)\r\n-\r\n-        if data == Sever_Message_end:\r\n             send_message(socket,Sever_Message_confirm)\r\n-            return blog_data\r\n-        else:\r\n-            blog_data +=\"\\n\"+data\r\n-            send_message(socket,Sever_Message_confirm)\r\n-def recver_obj(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024)\r\n-        if middle==Sever_Message_end:\r\n-            return data\r\n-        else:\r\n-            data+=middle\r\n-    return pickle.loads(data)\n-# author:高金磊\r\n-# datetime:2022/6/22 9:48\r\n-import threading\r\n-import os\r\n-import sys\r\n-import traceback\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-import socket\r\n-import time\r\n-\r\n-import tqdm\r\n-import pickle\r\n-from Data import *\r\n-\r\n-from myPrint import *\r\n-class SocketServer(object):\r\n-\r\n-    def __init__(self, port=PORT):\r\n-        self.port = port\r\n-\r\n-    def startup(self,fun,is_multithreading=True):\r\n-        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        sock_server.bind((Host, self.port))\r\n-        sock_server.listen(0)\r\n-        myPrint_Hint(\"===========等待连接================\")\r\n-        while True:\r\n-            try:\r\n-                sock, address = sock_server.accept()\r\n-                myPrint_Hint(\"===========接收客户端密匙================\")\r\n-                data = recver_message(sock)\r\n-                \r\n-                if data!=cilent_key:\r\n-                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n-                    send_message(sock,sever_key)\r\n-                    send_message(sock,\"拒绝连接\")\r\n-                    sock.close()\r\n-                else:\r\n-                    myPrint_Hint(\"===========客户端密匙验证成功================\")\r\n-                    myPrint_Hint(\"===========发送服务端密匙================\")\r\n-                    send_message(sock,sever_key)\r\n-                    if is_multithreading:\r\n-                        thread = threading.Thread(target=fun, args=(sock,))\r\n-                        thread.setDaemon(True)\r\n-                        thread.start()\r\n-                    else:\r\n-                        fun(sock)\r\n-\r\n-            except Exception as e:\r\n-                traceback.print_exc()\r\n-                myPrint_Err(e)\r\n-\r\n-\r\n-\r\n-    def state(self):\r\n-        pass\r\n-\r\n-\r\n-def send_message(socket,data):\r\n-    socket.send(data.encode())\r\n-    socket.send(Sever_Message_end.encode())\r\n-    \r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.send(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.send(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n-    socket.send(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n-def send_obj(socket,obj):\r\n-    socket.send(pickle.dumps(obj=obj))\r\n-    socket.send(Sever_Message_end.encode())\r\n-    \r\n-\r\n-\r\n-class SocketClient(object):\r\n-\r\n-    def __init__(self, host=Host, port=PORT):\r\n-        self.host = host\r\n-        self.port = port\r\n-\r\n-    def connect(self,fun,time_out=20):\r\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        # sock.settimeout(4)\r\n-        for i in range(10):\r\n-            try:\r\n-                myPrint_Hint(\"=============连接中========================\")\r\n-                sock.connect((self.host, self.port))\r\n-                time.sleep(0.5)\r\n-                myPrint_Success(\"=============发送客户端密匙========================\")\r\n-                send_message(sock,cilent_key)\r\n-                time.sleep(0.5)\r\n-                myPrint_Success(\"=============接收服务端密匙========================\")\r\n-                data=recver_message(sock)\r\n-                break\r\n-            except Exception as e:\r\n-                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n-                #     break\r\n-                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n-                myPrint_Hint(e)\r\n-                if i==time_out-1:\r\n-                    myPrint_Err(\"=============连接超时========================\")\r\n-                    return -1\r\n-                time.sleep(2)\r\n-       \r\n-        myPrint_Success(\"=============验证服务端密匙========================\")\r\n-        if data!=sever_key:\r\n-            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n-            send_message(sock,\"拒绝连接\")\r\n-            myPrint_Success(\"=============连接断开========================\")\r\n-            sock.close()\r\n-        else:\r\n-            myPrint_Success(\"=============服务器允许接入========================\")\r\n-            myPrint_Success(\"=============连接成功========================\")\r\n-            myPrint_Hint(\"服务器keyid:\", data)\r\n-            fun(sock)\r\n-        return sock\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-def recver_message_block(socket,expect_message):\r\n-    while recver_message(socket) !=expect_message:\r\n-        pass\r\n-    return True\r\n-def recver_message(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024).decode('utf-8','ignore')\r\n-        if middle==Sever_Message_end:\r\n-            return data\r\n-        else:\r\n-            data+=middle\r\n def recv_blog(socket):\r\n     blog_data = \"\"\r\n     while 1:\r\n         # 接收批量结果\r\n"
                },
                {
                    "date": 1697424910244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n \r\n \r\n def send_message(socket,data):\r\n     socket.sendall(data.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n+    \r\n     socket.sendall(Sever_Message_end.encode())\r\n     \r\n def send_blog_message(socket, data_list):\r\n     \"\"\"\r\n@@ -142,13 +142,15 @@\n def recver_message(socket):\r\n     data=\"\"\r\n     while 1:\r\n         middle=socket.recv(1024).decode('utf-8','ignore')\r\n-        if middle==Sever_Message_end:\r\n-            return data\r\n+        if middle.endswith(Sever_Message_end):\r\n+            middle.replace(Sever_Message_end,\"\")\r\n+            data+=middle\r\n+            break\r\n         else:\r\n             data+=middle\r\n-            send_message(socket,Sever_Message_confirm)\r\n+    return data\r\n def recv_blog(socket):\r\n     blog_data = \"\"\r\n     while 1:\r\n         # 接收批量结果\r\n@@ -163,9 +165,11 @@\n def recver_obj(socket):\r\n     data=\"\"\r\n     while 1:\r\n         middle=socket.recv(1024)\r\n-        if middle==Sever_Message_end:\r\n-            return data\r\n+        if middle.endswith(Sever_Message_end):\r\n+            middle.replace(Sever_Message_end,\"\")\r\n+            data+=middle\r\n+            break\r\n         else:\r\n             data+=middle\r\n     return pickle.loads(data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697425127777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n     data=\"\"\r\n     while 1:\r\n         middle=socket.recv(1024).decode('utf-8','ignore')\r\n         if middle.endswith(Sever_Message_end):\r\n-            middle.replace(Sever_Message_end,\"\")\r\n+            middle=middle.replace(Sever_Message_end,\"\")\r\n             data+=middle\r\n             break\r\n         else:\r\n             data+=middle\r\n@@ -166,9 +166,9 @@\n     data=\"\"\r\n     while 1:\r\n         middle=socket.recv(1024)\r\n         if middle.endswith(Sever_Message_end):\r\n-            middle.replace(Sever_Message_end,\"\")\r\n+            middle=middle.replace(Sever_Message_end,\"\")\r\n             data+=middle\r\n             break\r\n         else:\r\n             data+=middle\r\n"
                },
                {
                    "date": 1697425215400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n                     myPrint_Hint(\"===========客户端密匙验证成功================\")\r\n                     myPrint_Hint(\"===========发送服务端密匙================\")\r\n                     send_message(sock,sever_key)\r\n                     if is_multithreading:\r\n+                        myPrint_Success(\"===========连接成功================\")\r\n                         thread = threading.Thread(target=fun, args=(sock,))\r\n                         thread.setDaemon(True)\r\n                         thread.start()\r\n                     else:\r\n"
                },
                {
                    "date": 1697425364540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,8 @@\n     recver_message_block(socket, Sever_Message_confirm)\r\n \r\n def send_obj(socket:socket,obj):\r\n     socket.sendall(pickle.dumps(obj=obj))\r\n-    time.sleep(0.5)\r\n     socket.sendall(Sever_Message_end.encode())\r\n     \r\n \r\n \r\n"
                },
                {
                    "date": 1697425708515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,174 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+import traceback\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                myPrint_Hint(\"===========接收客户端密匙================\")\r\n+                data = recver_message(sock)\r\n+                \r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Hint(\"===========客户端密匙验证成功================\")\r\n+                    myPrint_Hint(\"===========发送服务端密匙================\")\r\n+                    send_message(sock,sever_key)\r\n+                    if is_multithreading:\r\n+                        myPrint_Success(\"===========连接成功================\")\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                traceback.print_exc()\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.sendall(data.encode())\r\n+    \r\n+    socket.sendall(Sever_Message_end.encode())\r\n+    \r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.sendall(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.sendall(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.sendall(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket:socket,obj):\r\n+    socket.sendall(pickle.dumps(obj=obj))\r\n+    \r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                time.sleep(0.5)\r\n+                myPrint_Success(\"=============发送客户端密匙========================\")\r\n+                send_message(sock,cilent_key)\r\n+                time.sleep(0.5)\r\n+                myPrint_Success(\"=============接收服务端密匙========================\")\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+       \r\n+        myPrint_Success(\"=============验证服务端密匙========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Success(\"=============连接成功========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024).decode('utf-8','ignore')\r\n+        if middle.endswith(Sever_Message_end):\r\n+            middle=middle.replace(Sever_Message_end,\"\")\r\n+            data+=middle\r\n+            break\r\n+        else:\r\n+            data+=middle\r\n+    return data\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+\r\n+        if data == Sever_Message_end:\r\n+            send_message(socket,Sever_Message_confirm)\r\n+            return blog_data\r\n+        else:\r\n+            blog_data +=\"\\n\"+data\r\n+            send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+    data=socket.recv(10240)\r\n+    # while 1:\r\n+    #     middle=socket.recv(1024)\r\n+    #     if middle.endswith(Sever_Message_end):\r\n+    #         middle=middle.replace(Sever_Message_end,\"\")\r\n+    #         data+=middle\r\n+    #         break\r\n+    #     else:\r\n+    #         data+=middle\r\n+    return pickle.loads(data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697425843187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,179 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+import traceback\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                myPrint_Hint(\"===========接收客户端密匙================\")\r\n+                data = recver_message(sock)\r\n+                \r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Hint(\"===========客户端密匙验证成功================\")\r\n+                    myPrint_Hint(\"===========发送服务端密匙================\")\r\n+                    send_message(sock,sever_key)\r\n+                    if is_multithreading:\r\n+                        myPrint_Success(\"===========连接成功================\")\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                traceback.print_exc()\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.sendall(data.encode())\r\n+    \r\n+    socket.sendall(Sever_Message_end.encode())\r\n+    \r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.sendall(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.sendall(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.sendall(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket:socket,obj):\r\n+    socket.sendall(pickle.dumps(obj=obj))\r\n+    \r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                time.sleep(0.5)\r\n+                myPrint_Success(\"=============发送客户端密匙========================\")\r\n+                send_message(sock,cilent_key)\r\n+                time.sleep(0.5)\r\n+                myPrint_Success(\"=============接收服务端密匙========================\")\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+       \r\n+        myPrint_Success(\"=============验证服务端密匙========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Success(\"=============连接成功========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024).decode('utf-8','ignore')\r\n+        if middle.endswith(Sever_Message_end):\r\n+            middle=middle.replace(Sever_Message_end,\"\")\r\n+            data+=middle\r\n+            break\r\n+        else:\r\n+            data+=middle\r\n+    return data\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+\r\n+        if data == Sever_Message_end:\r\n+            send_message(socket,Sever_Message_confirm)\r\n+            return blog_data\r\n+        else:\r\n+            blog_data +=\"\\n\"+data\r\n+            send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+    data=\"\"\r\n+    while True:\r\n+        packet = socket.recv(4096) \r\n+        if not packet:\r\n+            break\r\n+        data += packet\r\n+    # while 1:\r\n+    #     middle=socket.recv(1024)\r\n+    #     if middle.endswith(Sever_Message_end):\r\n+    #         middle=middle.replace(Sever_Message_end,\"\")\r\n+    #         data+=middle\r\n+    #         break\r\n+    #     else:\r\n+    #         data+=middle\r\n+    return pickle.loads(data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697425886088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,9 @@\n         else:\r\n             blog_data +=\"\\n\"+data\r\n             send_message(socket,Sever_Message_confirm)\r\n def recver_obj(socket):\r\n-    data=\"\"\r\n+    data=b\"\"\r\n     while True:\r\n         packet = socket.recv(4096) \r\n         if not packet:\r\n             break\r\n@@ -175,354 +175,5 @@\n     #         data+=middle\r\n     #         break\r\n     #     else:\r\n     #         data+=middle\r\n-    return pickle.loads(data)\n-# author:高金磊\r\n-# datetime:2022/6/22 9:48\r\n-import threading\r\n-import os\r\n-import sys\r\n-import traceback\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-import socket\r\n-import time\r\n-\r\n-import tqdm\r\n-import pickle\r\n-from Data import *\r\n-\r\n-from myPrint import *\r\n-class SocketServer(object):\r\n-\r\n-    def __init__(self, port=PORT):\r\n-        self.port = port\r\n-\r\n-    def startup(self,fun,is_multithreading=True):\r\n-        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        sock_server.bind((Host, self.port))\r\n-        sock_server.listen(0)\r\n-        myPrint_Hint(\"===========等待连接================\")\r\n-        while True:\r\n-            try:\r\n-                sock, address = sock_server.accept()\r\n-                myPrint_Hint(\"===========接收客户端密匙================\")\r\n-                data = recver_message(sock)\r\n-                \r\n-                if data!=cilent_key:\r\n-                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n-                    send_message(sock,sever_key)\r\n-                    send_message(sock,\"拒绝连接\")\r\n-                    sock.close()\r\n-                else:\r\n-                    myPrint_Hint(\"===========客户端密匙验证成功================\")\r\n-                    myPrint_Hint(\"===========发送服务端密匙================\")\r\n-                    send_message(sock,sever_key)\r\n-                    if is_multithreading:\r\n-                        myPrint_Success(\"===========连接成功================\")\r\n-                        thread = threading.Thread(target=fun, args=(sock,))\r\n-                        thread.setDaemon(True)\r\n-                        thread.start()\r\n-                    else:\r\n-                        fun(sock)\r\n-\r\n-            except Exception as e:\r\n-                traceback.print_exc()\r\n-                myPrint_Err(e)\r\n-\r\n-\r\n-\r\n-    def state(self):\r\n-        pass\r\n-\r\n-\r\n-def send_message(socket,data):\r\n-    socket.sendall(data.encode())\r\n-    \r\n-    socket.sendall(Sever_Message_end.encode())\r\n-    \r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.sendall(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.sendall(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n-    socket.sendall(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n-def send_obj(socket:socket,obj):\r\n-    socket.sendall(pickle.dumps(obj=obj))\r\n-    \r\n-\r\n-\r\n-class SocketClient(object):\r\n-\r\n-    def __init__(self, host=Host, port=PORT):\r\n-        self.host = host\r\n-        self.port = port\r\n-\r\n-    def connect(self,fun,time_out=20):\r\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        # sock.settimeout(4)\r\n-        for i in range(10):\r\n-            try:\r\n-                myPrint_Hint(\"=============连接中========================\")\r\n-                sock.connect((self.host, self.port))\r\n-                time.sleep(0.5)\r\n-                myPrint_Success(\"=============发送客户端密匙========================\")\r\n-                send_message(sock,cilent_key)\r\n-                time.sleep(0.5)\r\n-                myPrint_Success(\"=============接收服务端密匙========================\")\r\n-                data=recver_message(sock)\r\n-                break\r\n-            except Exception as e:\r\n-                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n-                #     break\r\n-                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n-                myPrint_Hint(e)\r\n-                if i==time_out-1:\r\n-                    myPrint_Err(\"=============连接超时========================\")\r\n-                    return -1\r\n-                time.sleep(2)\r\n-       \r\n-        myPrint_Success(\"=============验证服务端密匙========================\")\r\n-        if data!=sever_key:\r\n-            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n-            send_message(sock,\"拒绝连接\")\r\n-            myPrint_Success(\"=============连接断开========================\")\r\n-            sock.close()\r\n-        else:\r\n-            myPrint_Success(\"=============服务器允许接入========================\")\r\n-            myPrint_Success(\"=============连接成功========================\")\r\n-            myPrint_Hint(\"服务器keyid:\", data)\r\n-            fun(sock)\r\n-        return sock\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-def recver_message_block(socket,expect_message):\r\n-    while recver_message(socket) !=expect_message:\r\n-        pass\r\n-    return True\r\n-def recver_message(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024).decode('utf-8','ignore')\r\n-        if middle.endswith(Sever_Message_end):\r\n-            middle=middle.replace(Sever_Message_end,\"\")\r\n-            data+=middle\r\n-            break\r\n-        else:\r\n-            data+=middle\r\n-    return data\r\n-def recv_blog(socket):\r\n-    blog_data = \"\"\r\n-    while 1:\r\n-        # 接收批量结果\r\n-        data =recver_message(socket)\r\n-\r\n-        if data == Sever_Message_end:\r\n-            send_message(socket,Sever_Message_confirm)\r\n-            return blog_data\r\n-        else:\r\n-            blog_data +=\"\\n\"+data\r\n-            send_message(socket,Sever_Message_confirm)\r\n-def recver_obj(socket):\r\n-    data=socket.recv(10240)\r\n-    # while 1:\r\n-    #     middle=socket.recv(1024)\r\n-    #     if middle.endswith(Sever_Message_end):\r\n-    #         middle=middle.replace(Sever_Message_end,\"\")\r\n-    #         data+=middle\r\n-    #         break\r\n-    #     else:\r\n-    #         data+=middle\r\n-    return pickle.loads(data)\n-# author:高金磊\r\n-# datetime:2022/6/22 9:48\r\n-import threading\r\n-import os\r\n-import sys\r\n-import traceback\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-import socket\r\n-import time\r\n-\r\n-import tqdm\r\n-import pickle\r\n-from Data import *\r\n-\r\n-from myPrint import *\r\n-class SocketServer(object):\r\n-\r\n-    def __init__(self, port=PORT):\r\n-        self.port = port\r\n-\r\n-    def startup(self,fun,is_multithreading=True):\r\n-        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        sock_server.bind((Host, self.port))\r\n-        sock_server.listen(0)\r\n-        myPrint_Hint(\"===========等待连接================\")\r\n-        while True:\r\n-            try:\r\n-                sock, address = sock_server.accept()\r\n-                myPrint_Hint(\"===========接收客户端密匙================\")\r\n-                data = recver_message(sock)\r\n-                \r\n-                if data!=cilent_key:\r\n-                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n-                    send_message(sock,sever_key)\r\n-                    send_message(sock,\"拒绝连接\")\r\n-                    sock.close()\r\n-                else:\r\n-                    myPrint_Hint(\"===========客户端密匙验证成功================\")\r\n-                    myPrint_Hint(\"===========发送服务端密匙================\")\r\n-                    send_message(sock,sever_key)\r\n-                    if is_multithreading:\r\n-                        myPrint_Success(\"===========连接成功================\")\r\n-                        thread = threading.Thread(target=fun, args=(sock,))\r\n-                        thread.setDaemon(True)\r\n-                        thread.start()\r\n-                    else:\r\n-                        fun(sock)\r\n-\r\n-            except Exception as e:\r\n-                traceback.print_exc()\r\n-                myPrint_Err(e)\r\n-\r\n-\r\n-\r\n-    def state(self):\r\n-        pass\r\n-\r\n-\r\n-def send_message(socket,data):\r\n-    socket.sendall(data.encode())\r\n-    \r\n-    socket.sendall(Sever_Message_end.encode())\r\n-    \r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.sendall(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.sendall(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n-    socket.sendall(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n-def send_obj(socket:socket,obj):\r\n-    socket.sendall(pickle.dumps(obj=obj))\r\n-    socket.sendall(Sever_Message_end.encode())\r\n-    \r\n-\r\n-\r\n-class SocketClient(object):\r\n-\r\n-    def __init__(self, host=Host, port=PORT):\r\n-        self.host = host\r\n-        self.port = port\r\n-\r\n-    def connect(self,fun,time_out=20):\r\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        # sock.settimeout(4)\r\n-        for i in range(10):\r\n-            try:\r\n-                myPrint_Hint(\"=============连接中========================\")\r\n-                sock.connect((self.host, self.port))\r\n-                time.sleep(0.5)\r\n-                myPrint_Success(\"=============发送客户端密匙========================\")\r\n-                send_message(sock,cilent_key)\r\n-                time.sleep(0.5)\r\n-                myPrint_Success(\"=============接收服务端密匙========================\")\r\n-                data=recver_message(sock)\r\n-                break\r\n-            except Exception as e:\r\n-                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n-                #     break\r\n-                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n-                myPrint_Hint(e)\r\n-                if i==time_out-1:\r\n-                    myPrint_Err(\"=============连接超时========================\")\r\n-                    return -1\r\n-                time.sleep(2)\r\n-       \r\n-        myPrint_Success(\"=============验证服务端密匙========================\")\r\n-        if data!=sever_key:\r\n-            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n-            send_message(sock,\"拒绝连接\")\r\n-            myPrint_Success(\"=============连接断开========================\")\r\n-            sock.close()\r\n-        else:\r\n-            myPrint_Success(\"=============服务器允许接入========================\")\r\n-            myPrint_Success(\"=============连接成功========================\")\r\n-            myPrint_Hint(\"服务器keyid:\", data)\r\n-            fun(sock)\r\n-        return sock\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-def recver_message_block(socket,expect_message):\r\n-    while recver_message(socket) !=expect_message:\r\n-        pass\r\n-    return True\r\n-def recver_message(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024).decode('utf-8','ignore')\r\n-        if middle.endswith(Sever_Message_end):\r\n-            middle=middle.replace(Sever_Message_end,\"\")\r\n-            data+=middle\r\n-            break\r\n-        else:\r\n-            data+=middle\r\n-    return data\r\n-def recv_blog(socket):\r\n-    blog_data = \"\"\r\n-    while 1:\r\n-        # 接收批量结果\r\n-        data =recver_message(socket)\r\n-\r\n-        if data == Sever_Message_end:\r\n-            send_message(socket,Sever_Message_confirm)\r\n-            return blog_data\r\n-        else:\r\n-            blog_data +=\"\\n\"+data\r\n-            send_message(socket,Sever_Message_confirm)\r\n-def recver_obj(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024)\r\n-        if middle.endswith(Sever_Message_end):\r\n-            middle=middle.replace(Sever_Message_end,\"\")\r\n-            data+=middle\r\n-            break\r\n-        else:\r\n-            data+=middle\r\n     return pickle.loads(data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697426545410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,12 +24,14 @@\n     def startup(self,fun,is_multithreading=True):\r\n         sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n         sock_server.bind((Host, self.port))\r\n         sock_server.listen(0)\r\n+    \r\n         myPrint_Hint(\"===========等待连接================\")\r\n         while True:\r\n             try:\r\n                 sock, address = sock_server.accept()\r\n+                sock.setblocking(False)\r\n                 myPrint_Hint(\"===========接收客户端密匙================\")\r\n                 data = recver_message(sock)\r\n                 \r\n                 if data!=cilent_key:\r\n@@ -98,8 +100,9 @@\n         for i in range(10):\r\n             try:\r\n                 myPrint_Hint(\"=============连接中========================\")\r\n                 sock.connect((self.host, self.port))\r\n+                sock.setblocking(False)\r\n                 time.sleep(0.5)\r\n                 myPrint_Success(\"=============发送客户端密匙========================\")\r\n                 send_message(sock,cilent_key)\r\n                 time.sleep(0.5)\r\n"
                },
                {
                    "date": 1697426576940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,8 @@\n         myPrint_Hint(\"===========等待连接================\")\r\n         while True:\r\n             try:\r\n                 sock, address = sock_server.accept()\r\n-                sock.setblocking(False)\r\n                 myPrint_Hint(\"===========接收客户端密匙================\")\r\n                 data = recver_message(sock)\r\n                 \r\n                 if data!=cilent_key:\r\n@@ -100,9 +99,8 @@\n         for i in range(10):\r\n             try:\r\n                 myPrint_Hint(\"=============连接中========================\")\r\n                 sock.connect((self.host, self.port))\r\n-                sock.setblocking(False)\r\n                 time.sleep(0.5)\r\n                 myPrint_Success(\"=============发送客户端密匙========================\")\r\n                 send_message(sock,cilent_key)\r\n                 time.sleep(0.5)\r\n"
                },
                {
                    "date": 1697426617098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,14 +162,10 @@\n         else:\r\n             blog_data +=\"\\n\"+data\r\n             send_message(socket,Sever_Message_confirm)\r\n def recver_obj(socket):\r\n-    data=b\"\"\r\n-    while True:\r\n-        packet = socket.recv(4096) \r\n-        if not packet:\r\n-            break\r\n-        data += packet\r\n+    time.sleep(0.5)\r\n+    data=socket.recv(4096) \r\n     # while 1:\r\n     #     middle=socket.recv(1024)\r\n     #     if middle.endswith(Sever_Message_end):\r\n     #         middle=middle.replace(Sever_Message_end,\"\")\r\n"
                },
                {
                    "date": 1697426645613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,10 +162,10 @@\n         else:\r\n             blog_data +=\"\\n\"+data\r\n             send_message(socket,Sever_Message_confirm)\r\n def recver_obj(socket):\r\n-    time.sleep(0.5)\r\n-    data=socket.recv(4096) \r\n+    time.sleep(1.5)\r\n+    data=socket.recv(409600) \r\n     # while 1:\r\n     #     middle=socket.recv(1024)\r\n     #     if middle.endswith(Sever_Message_end):\r\n     #         middle=middle.replace(Sever_Message_end,\"\")\r\n"
                },
                {
                    "date": 1697426674922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+import traceback\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+    \r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                myPrint_Hint(\"===========接收客户端密匙================\")\r\n+                data = recver_message(sock)\r\n+                \r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Hint(\"===========客户端密匙验证成功================\")\r\n+                    myPrint_Hint(\"===========发送服务端密匙================\")\r\n+                    send_message(sock,sever_key)\r\n+                    if is_multithreading:\r\n+                        myPrint_Success(\"===========连接成功================\")\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                traceback.print_exc()\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.sendall(data.encode())\r\n+    \r\n+    socket.sendall(Sever_Message_end.encode())\r\n+    \r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.sendall(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.sendall(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.sendall(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket:socket,obj):\r\n+    socket.sendall(pickle.dumps(obj=obj))\r\n+    \r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                time.sleep(0.5)\r\n+                myPrint_Success(\"=============发送客户端密匙========================\")\r\n+                send_message(sock,cilent_key)\r\n+                time.sleep(0.5)\r\n+                myPrint_Success(\"=============接收服务端密匙========================\")\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+       \r\n+        myPrint_Success(\"=============验证服务端密匙========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Success(\"=============连接成功========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024).decode('utf-8','ignore')\r\n+        if middle.endswith(Sever_Message_end):\r\n+            middle=middle.replace(Sever_Message_end,\"\")\r\n+            data+=middle\r\n+            break\r\n+        else:\r\n+            data+=middle\r\n+    return data\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+\r\n+        if data == Sever_Message_end:\r\n+            send_message(socket,Sever_Message_confirm)\r\n+            return blog_data\r\n+        else:\r\n+            blog_data +=\"\\n\"+data\r\n+            send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+    time.sleep(1)\r\n+    data=socket.recv(100000) \r\n+    # while 1:\r\n+    #     middle=socket.recv(1024)\r\n+    #     if middle.endswith(Sever_Message_end):\r\n+    #         middle=middle.replace(Sever_Message_end,\"\")\r\n+    #         data+=middle\r\n+    #         break\r\n+    #     else:\r\n+    #         data+=middle\r\n+    return pickle.loads(data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697436934946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,15 +162,23 @@\n         else:\r\n             blog_data +=\"\\n\"+data\r\n             send_message(socket,Sever_Message_confirm)\r\n def recver_obj(socket):\r\n-    time.sleep(1)\r\n-    data=socket.recv(100000) \r\n+    # time.sleep(1)\r\n+    data=b\"\"\r\n     # while 1:\r\n     #     middle=socket.recv(1024)\r\n     #     if middle.endswith(Sever_Message_end):\r\n     #         middle=middle.replace(Sever_Message_end,\"\")\r\n     #         data+=middle\r\n     #         break\r\n     #     else:\r\n\\ No newline at end of file\n     #         data+=middle\r\n-    return pickle.loads(data)\n+    while 1:\r\n+        data+=socket.recv(1024)\r\n+        try:\r\n+            obj=pickle.loads(data)\r\n+        except Exception as e:\r\n+            if(e==\"\"):\r\n+                continue\r\n+            else:\r\n+                return\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697437430550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,186 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+import traceback\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+    \r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                myPrint_Hint(\"===========接收客户端密匙================\")\r\n+                data = recver_message(sock)\r\n+                \r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Hint(\"===========客户端密匙验证成功================\")\r\n+                    myPrint_Hint(\"===========发送服务端密匙================\")\r\n+                    send_message(sock,sever_key)\r\n+                    if is_multithreading:\r\n+                        myPrint_Success(\"===========连接成功================\")\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                traceback.print_exc()\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.sendall(data.encode())\r\n+    \r\n+    socket.sendall(Sever_Message_end.encode())\r\n+    \r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.sendall(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.sendall(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.sendall(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket:socket,obj):\r\n+    socket.sendall(pickle.dumps(obj=obj))\r\n+    \r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                time.sleep(0.5)\r\n+                myPrint_Success(\"=============发送客户端密匙========================\")\r\n+                send_message(sock,cilent_key)\r\n+                time.sleep(0.5)\r\n+                myPrint_Success(\"=============接收服务端密匙========================\")\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+       \r\n+        myPrint_Success(\"=============验证服务端密匙========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Success(\"=============连接成功========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024).decode('utf-8','ignore')\r\n+        if middle.endswith(Sever_Message_end):\r\n+            middle=middle.replace(Sever_Message_end,\"\")\r\n+            data+=middle\r\n+            break\r\n+        else:\r\n+            data+=middle\r\n+    return data\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+\r\n+        if data == Sever_Message_end:\r\n+            send_message(socket,Sever_Message_confirm)\r\n+            return blog_data\r\n+        else:\r\n+            blog_data +=\"\\n\"+data\r\n+            send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+    # time.sleep(1)\r\n+    data=b\"\"\r\n+    # while 1:\r\n+    #     middle=socket.recv(1024)\r\n+    #     if middle.endswith(Sever_Message_end):\r\n+    #         middle=middle.replace(Sever_Message_end,\"\")\r\n+    #         data+=middle\r\n+    #         break\r\n+    #     else:\r\n+    #         data+=middle\r\n+    while 1:\r\n+        data+=socket.recv(1024)\r\n+        try:\r\n+            obj=pickle.loads(data)\r\n+            return obj\r\n+        except Exception as e:\r\n+            if(e==\"\"):\r\n+                continue\r\n+            else:\r\n+                import Result\r\n+                return Result.Result.getResult(processor=\"net\",output=\"网络波动，数据异常\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697437543242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,365 +182,6 @@\n             if(e==\"\"):\r\n                 continue\r\n             else:\r\n                 import Result\r\n-                return Result.Result.getResult(processor=\"net\",output=\"网络波动，数据异常\")\n-# author:高金磊\r\n-# datetime:2022/6/22 9:48\r\n-import threading\r\n-import os\r\n-import sys\r\n-import traceback\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-import socket\r\n-import time\r\n-\r\n-import tqdm\r\n-import pickle\r\n-from Data import *\r\n-\r\n-from myPrint import *\r\n-class SocketServer(object):\r\n-\r\n-    def __init__(self, port=PORT):\r\n-        self.port = port\r\n-\r\n-    def startup(self,fun,is_multithreading=True):\r\n-        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        sock_server.bind((Host, self.port))\r\n-        sock_server.listen(0)\r\n-    \r\n-        myPrint_Hint(\"===========等待连接================\")\r\n-        while True:\r\n-            try:\r\n-                sock, address = sock_server.accept()\r\n-                myPrint_Hint(\"===========接收客户端密匙================\")\r\n-                data = recver_message(sock)\r\n-                \r\n-                if data!=cilent_key:\r\n-                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n-                    send_message(sock,sever_key)\r\n-                    send_message(sock,\"拒绝连接\")\r\n-                    sock.close()\r\n-                else:\r\n-                    myPrint_Hint(\"===========客户端密匙验证成功================\")\r\n-                    myPrint_Hint(\"===========发送服务端密匙================\")\r\n-                    send_message(sock,sever_key)\r\n-                    if is_multithreading:\r\n-                        myPrint_Success(\"===========连接成功================\")\r\n-                        thread = threading.Thread(target=fun, args=(sock,))\r\n-                        thread.setDaemon(True)\r\n-                        thread.start()\r\n-                    else:\r\n-                        fun(sock)\r\n-\r\n-            except Exception as e:\r\n-                traceback.print_exc()\r\n-                myPrint_Err(e)\r\n-\r\n-\r\n-\r\n-    def state(self):\r\n-        pass\r\n-\r\n-\r\n-def send_message(socket,data):\r\n-    socket.sendall(data.encode())\r\n-    \r\n-    socket.sendall(Sever_Message_end.encode())\r\n-    \r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.sendall(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.sendall(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n-    socket.sendall(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n-def send_obj(socket:socket,obj):\r\n-    socket.sendall(pickle.dumps(obj=obj))\r\n-    \r\n-\r\n-\r\n-class SocketClient(object):\r\n-\r\n-    def __init__(self, host=Host, port=PORT):\r\n-        self.host = host\r\n-        self.port = port\r\n-\r\n-    def connect(self,fun,time_out=20):\r\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        # sock.settimeout(4)\r\n-        for i in range(10):\r\n-            try:\r\n-                myPrint_Hint(\"=============连接中========================\")\r\n-                sock.connect((self.host, self.port))\r\n-                time.sleep(0.5)\r\n-                myPrint_Success(\"=============发送客户端密匙========================\")\r\n-                send_message(sock,cilent_key)\r\n-                time.sleep(0.5)\r\n-                myPrint_Success(\"=============接收服务端密匙========================\")\r\n-                data=recver_message(sock)\r\n-                break\r\n-            except Exception as e:\r\n-                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n-                #     break\r\n-                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n-                myPrint_Hint(e)\r\n-                if i==time_out-1:\r\n-                    myPrint_Err(\"=============连接超时========================\")\r\n-                    return -1\r\n-                time.sleep(2)\r\n-       \r\n-        myPrint_Success(\"=============验证服务端密匙========================\")\r\n-        if data!=sever_key:\r\n-            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n-            send_message(sock,\"拒绝连接\")\r\n-            myPrint_Success(\"=============连接断开========================\")\r\n-            sock.close()\r\n-        else:\r\n-            myPrint_Success(\"=============服务器允许接入========================\")\r\n-            myPrint_Success(\"=============连接成功========================\")\r\n-            myPrint_Hint(\"服务器keyid:\", data)\r\n-            fun(sock)\r\n-        return sock\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-def recver_message_block(socket,expect_message):\r\n-    while recver_message(socket) !=expect_message:\r\n-        pass\r\n-    return True\r\n-def recver_message(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024).decode('utf-8','ignore')\r\n-        if middle.endswith(Sever_Message_end):\r\n-            middle=middle.replace(Sever_Message_end,\"\")\r\n-            data+=middle\r\n-            break\r\n-        else:\r\n-            data+=middle\r\n-    return data\r\n-def recv_blog(socket):\r\n-    blog_data = \"\"\r\n-    while 1:\r\n-        # 接收批量结果\r\n-        data =recver_message(socket)\r\n-\r\n-        if data == Sever_Message_end:\r\n-            send_message(socket,Sever_Message_confirm)\r\n-            return blog_data\r\n-        else:\r\n-            blog_data +=\"\\n\"+data\r\n-            send_message(socket,Sever_Message_confirm)\r\n-def recver_obj(socket):\r\n-    # time.sleep(1)\r\n-    data=b\"\"\r\n-    # while 1:\r\n-    #     middle=socket.recv(1024)\r\n-    #     if middle.endswith(Sever_Message_end):\r\n-    #         middle=middle.replace(Sever_Message_end,\"\")\r\n-    #         data+=middle\r\n-    #         break\r\n-    #     else:\r\n-    #         data+=middle\r\n-    while 1:\r\n-        data+=socket.recv(1024)\r\n-        try:\r\n-            obj=pickle.loads(data)\r\n-        except Exception as e:\r\n-            if(e==\"\"):\r\n-                continue\r\n-            else:\r\n-                return\n-# author:高金磊\r\n-# datetime:2022/6/22 9:48\r\n-import threading\r\n-import os\r\n-import sys\r\n-import traceback\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-import socket\r\n-import time\r\n-\r\n-import tqdm\r\n-import pickle\r\n-from Data import *\r\n-\r\n-from myPrint import *\r\n-class SocketServer(object):\r\n-\r\n-    def __init__(self, port=PORT):\r\n-        self.port = port\r\n-\r\n-    def startup(self,fun,is_multithreading=True):\r\n-        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        sock_server.bind((Host, self.port))\r\n-        sock_server.listen(0)\r\n-    \r\n-        myPrint_Hint(\"===========等待连接================\")\r\n-        while True:\r\n-            try:\r\n-                sock, address = sock_server.accept()\r\n-                myPrint_Hint(\"===========接收客户端密匙================\")\r\n-                data = recver_message(sock)\r\n-                \r\n-                if data!=cilent_key:\r\n-                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n-                    send_message(sock,sever_key)\r\n-                    send_message(sock,\"拒绝连接\")\r\n-                    sock.close()\r\n-                else:\r\n-                    myPrint_Hint(\"===========客户端密匙验证成功================\")\r\n-                    myPrint_Hint(\"===========发送服务端密匙================\")\r\n-                    send_message(sock,sever_key)\r\n-                    if is_multithreading:\r\n-                        myPrint_Success(\"===========连接成功================\")\r\n-                        thread = threading.Thread(target=fun, args=(sock,))\r\n-                        thread.setDaemon(True)\r\n-                        thread.start()\r\n-                    else:\r\n-                        fun(sock)\r\n-\r\n-            except Exception as e:\r\n-                traceback.print_exc()\r\n-                myPrint_Err(e)\r\n-\r\n-\r\n-\r\n-    def state(self):\r\n-        pass\r\n-\r\n-\r\n-def send_message(socket,data):\r\n-    socket.sendall(data.encode())\r\n-    \r\n-    socket.sendall(Sever_Message_end.encode())\r\n-    \r\n-def send_blog_message(socket, data_list):\r\n-    \"\"\"\r\n-    发送批量消息\r\n-    Args:\r\n-        socket (_type_): _description_\r\n-        data_list (_type_): _description_\r\n-    \"\"\"\r\n-        \r\n-    socket.sendall(Sever_Message_start.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-    for i in data_list:\r\n-        socket.sendall(i.encode())\r\n-        recver_message_block(socket, Sever_Message_confirm)\r\n-        print(i)\r\n-    socket.sendall(Sever_Message_end.encode())\r\n-    recver_message_block(socket, Sever_Message_confirm)\r\n-\r\n-def send_obj(socket:socket,obj):\r\n-    socket.sendall(pickle.dumps(obj=obj))\r\n-    \r\n-\r\n-\r\n-class SocketClient(object):\r\n-\r\n-    def __init__(self, host=Host, port=PORT):\r\n-        self.host = host\r\n-        self.port = port\r\n-\r\n-    def connect(self,fun,time_out=20):\r\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n-        # sock.settimeout(4)\r\n-        for i in range(10):\r\n-            try:\r\n-                myPrint_Hint(\"=============连接中========================\")\r\n-                sock.connect((self.host, self.port))\r\n-                time.sleep(0.5)\r\n-                myPrint_Success(\"=============发送客户端密匙========================\")\r\n-                send_message(sock,cilent_key)\r\n-                time.sleep(0.5)\r\n-                myPrint_Success(\"=============接收服务端密匙========================\")\r\n-                data=recver_message(sock)\r\n-                break\r\n-            except Exception as e:\r\n-                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n-                #     break\r\n-                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n-                myPrint_Hint(e)\r\n-                if i==time_out-1:\r\n-                    myPrint_Err(\"=============连接超时========================\")\r\n-                    return -1\r\n-                time.sleep(2)\r\n-       \r\n-        myPrint_Success(\"=============验证服务端密匙========================\")\r\n-        if data!=sever_key:\r\n-            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n-            send_message(sock,\"拒绝连接\")\r\n-            myPrint_Success(\"=============连接断开========================\")\r\n-            sock.close()\r\n-        else:\r\n-            myPrint_Success(\"=============服务器允许接入========================\")\r\n-            myPrint_Success(\"=============连接成功========================\")\r\n-            myPrint_Hint(\"服务器keyid:\", data)\r\n-            fun(sock)\r\n-        return sock\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-def recver_message_block(socket,expect_message):\r\n-    while recver_message(socket) !=expect_message:\r\n-        pass\r\n-    return True\r\n-def recver_message(socket):\r\n-    data=\"\"\r\n-    while 1:\r\n-        middle=socket.recv(1024).decode('utf-8','ignore')\r\n-        if middle.endswith(Sever_Message_end):\r\n-            middle=middle.replace(Sever_Message_end,\"\")\r\n-            data+=middle\r\n-            break\r\n-        else:\r\n-            data+=middle\r\n-    return data\r\n-def recv_blog(socket):\r\n-    blog_data = \"\"\r\n-    while 1:\r\n-        # 接收批量结果\r\n-        data =recver_message(socket)\r\n-\r\n-        if data == Sever_Message_end:\r\n-            send_message(socket,Sever_Message_confirm)\r\n-            return blog_data\r\n-        else:\r\n-            blog_data +=\"\\n\"+data\r\n-            send_message(socket,Sever_Message_confirm)\r\n-def recver_obj(socket):\r\n-    time.sleep(1.5)\r\n-    data=socket.recv(409600) \r\n-    # while 1:\r\n-    #     middle=socket.recv(1024)\r\n-    #     if middle.endswith(Sever_Message_end):\r\n-    #         middle=middle.replace(Sever_Message_end,\"\")\r\n-    #         data+=middle\r\n-    #         break\r\n-    #     else:\r\n-    #         data+=middle\r\n-    return pickle.loads(data)\n\\ No newline at end of file\n+                import Data\r\n+                return Result.Result.getResult(processor=\"net\",output=\"网络波动，数据异常\",returncode=Data.NETWORK_ERROR)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697439009030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+import traceback\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+    \r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                myPrint_Hint(\"===========接收客户端密匙================\")\r\n+                data = recver_message(sock)\r\n+                \r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Hint(\"===========客户端密匙验证成功================\")\r\n+                    myPrint_Hint(\"===========发送服务端密匙================\")\r\n+                    send_message(sock,sever_key)\r\n+                    if is_multithreading:\r\n+                        myPrint_Success(\"===========连接成功================\")\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                traceback.print_exc()\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.sendall(data.encode())\r\n+    \r\n+    socket.sendall(Sever_Message_end.encode())\r\n+    \r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.sendall(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.sendall(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.sendall(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket:socket,obj):\r\n+    socket.sendall(pickle.dumps(obj=obj))\r\n+    \r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                time.sleep(0.5)\r\n+                myPrint_Success(\"=============发送客户端密匙========================\")\r\n+                send_message(sock,cilent_key)\r\n+                time.sleep(0.5)\r\n+                myPrint_Success(\"=============接收服务端密匙========================\")\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+       \r\n+        myPrint_Success(\"=============验证服务端密匙========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Success(\"=============连接成功========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024).decode('utf-8','ignore')\r\n+        if middle.endswith(Sever_Message_end):\r\n+            middle=middle.replace(Sever_Message_end,\"\")\r\n+            data+=middle\r\n+            break\r\n+        else:\r\n+            data+=middle\r\n+    return data\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+\r\n+        if data == Sever_Message_end:\r\n+            send_message(socket,Sever_Message_confirm)\r\n+            return blog_data\r\n+        else:\r\n+            blog_data +=\"\\n\"+data\r\n+            send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+    # time.sleep(1)\r\n+    data=b\"\"\r\n+    # while 1:\r\n+    #     middle=socket.recv(1024)\r\n+    #     if middle.endswith(Sever_Message_end):\r\n+    #         middle=middle.replace(Sever_Message_end,\"\")\r\n+    #         data+=middle\r\n+    #         break\r\n+    #     else:\r\n+    #         data+=middle\r\n+    while 1:\r\n+        data+=socket.recv(1024)\r\n+        try:\r\n+            obj=pickle.loads(data)\r\n+            return obj\r\n+        except Exception as e:\r\n+            print(e)\r\n+            if(e==\"\"):\r\n+                continue\r\n+            else:\r\n+                import Result\r\n+                import Data\r\n+                return Result.Result.getResult(processor=\"net\",output=\"网络波动，数据异常\",returncode=Data.NETWORK_ERROR)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697439042288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,9 @@\n             obj=pickle.loads(data)\r\n             return obj\r\n         except Exception as e:\r\n             print(e)\r\n-            if(e==\"\"):\r\n+            if(e==\"pickle data was truncated\"):\r\n                 continue\r\n             else:\r\n                 import Result\r\n                 import Data\r\n"
                },
                {
                    "date": 1697439090457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,9 @@\n             obj=pickle.loads(data)\r\n             return obj\r\n         except Exception as e:\r\n             print(e)\r\n-            if(e==\"pickle data was truncated\"):\r\n+            if(str(e)==\"pickle data was truncated\"):\r\n                 continue\r\n             else:\r\n                 import Result\r\n                 import Data\r\n"
                },
                {
                    "date": 1697439137954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 9:48\r\n+import threading\r\n+import os\r\n+import sys\r\n+import traceback\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+import socket\r\n+import time\r\n+\r\n+import tqdm\r\n+import pickle\r\n+from Data import *\r\n+\r\n+from myPrint import *\r\n+class SocketServer(object):\r\n+\r\n+    def __init__(self, port=PORT):\r\n+        self.port = port\r\n+\r\n+    def startup(self,fun,is_multithreading=True):\r\n+        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        sock_server.bind((Host, self.port))\r\n+        sock_server.listen(0)\r\n+    \r\n+        myPrint_Hint(\"===========等待连接================\")\r\n+        while True:\r\n+            try:\r\n+                sock, address = sock_server.accept()\r\n+                myPrint_Hint(\"===========接收客户端密匙================\")\r\n+                data = recver_message(sock)\r\n+                \r\n+                if data!=cilent_key:\r\n+                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n+                    send_message(sock,sever_key)\r\n+                    send_message(sock,\"拒绝连接\")\r\n+                    sock.close()\r\n+                else:\r\n+                    myPrint_Hint(\"===========客户端密匙验证成功================\")\r\n+                    myPrint_Hint(\"===========发送服务端密匙================\")\r\n+                    send_message(sock,sever_key)\r\n+                    if is_multithreading:\r\n+                        myPrint_Success(\"===========连接成功================\")\r\n+                        thread = threading.Thread(target=fun, args=(sock,))\r\n+                        thread.setDaemon(True)\r\n+                        thread.start()\r\n+                    else:\r\n+                        fun(sock)\r\n+\r\n+            except Exception as e:\r\n+                traceback.print_exc()\r\n+                myPrint_Err(e)\r\n+\r\n+\r\n+\r\n+    def state(self):\r\n+        pass\r\n+\r\n+\r\n+def send_message(socket,data):\r\n+    socket.sendall(data.encode())\r\n+    \r\n+    socket.sendall(Sever_Message_end.encode())\r\n+    \r\n+def send_blog_message(socket, data_list):\r\n+    \"\"\"\r\n+    发送批量消息\r\n+    Args:\r\n+        socket (_type_): _description_\r\n+        data_list (_type_): _description_\r\n+    \"\"\"\r\n+        \r\n+    socket.sendall(Sever_Message_start.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+    for i in data_list:\r\n+        socket.sendall(i.encode())\r\n+        recver_message_block(socket, Sever_Message_confirm)\r\n+        print(i)\r\n+    socket.sendall(Sever_Message_end.encode())\r\n+    recver_message_block(socket, Sever_Message_confirm)\r\n+\r\n+def send_obj(socket:socket,obj):\r\n+    socket.sendall(pickle.dumps(obj=obj))\r\n+    time.sleep(0.5)\r\n+    \r\n+\r\n+\r\n+class SocketClient(object):\r\n+\r\n+    def __init__(self, host=Host, port=PORT):\r\n+        self.host = host\r\n+        self.port = port\r\n+\r\n+    def connect(self,fun,time_out=20):\r\n+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n+        # sock.settimeout(4)\r\n+        for i in range(10):\r\n+            try:\r\n+                myPrint_Hint(\"=============连接中========================\")\r\n+                sock.connect((self.host, self.port))\r\n+                time.sleep(0.5)\r\n+                myPrint_Success(\"=============发送客户端密匙========================\")\r\n+                send_message(sock,cilent_key)\r\n+                time.sleep(0.5)\r\n+                myPrint_Success(\"=============接收服务端密匙========================\")\r\n+                data=recver_message(sock)\r\n+                break\r\n+            except Exception as e:\r\n+                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n+                #     break\r\n+                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n+                myPrint_Hint(e)\r\n+                if i==time_out-1:\r\n+                    myPrint_Err(\"=============连接超时========================\")\r\n+                    return -1\r\n+                time.sleep(2)\r\n+       \r\n+        myPrint_Success(\"=============验证服务端密匙========================\")\r\n+        if data!=sever_key:\r\n+            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n+            send_message(sock,\"拒绝连接\")\r\n+            myPrint_Success(\"=============连接断开========================\")\r\n+            sock.close()\r\n+        else:\r\n+            myPrint_Success(\"=============服务器允许接入========================\")\r\n+            myPrint_Success(\"=============连接成功========================\")\r\n+            myPrint_Hint(\"服务器keyid:\", data)\r\n+            fun(sock)\r\n+        return sock\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+def recver_message_block(socket,expect_message):\r\n+    while recver_message(socket) !=expect_message:\r\n+        pass\r\n+    return True\r\n+def recver_message(socket):\r\n+    data=\"\"\r\n+    while 1:\r\n+        middle=socket.recv(1024).decode('utf-8','ignore')\r\n+        if middle.endswith(Sever_Message_end):\r\n+            middle=middle.replace(Sever_Message_end,\"\")\r\n+            data+=middle\r\n+            break\r\n+        else:\r\n+            data+=middle\r\n+    return data\r\n+def recv_blog(socket):\r\n+    blog_data = \"\"\r\n+    while 1:\r\n+        # 接收批量结果\r\n+        data =recver_message(socket)\r\n+\r\n+        if data == Sever_Message_end:\r\n+            send_message(socket,Sever_Message_confirm)\r\n+            return blog_data\r\n+        else:\r\n+            blog_data +=\"\\n\"+data\r\n+            send_message(socket,Sever_Message_confirm)\r\n+def recver_obj(socket):\r\n+    # time.sleep(1)\r\n+    data=b\"\"\r\n+    # while 1:\r\n+    #     middle=socket.recv(1024)\r\n+    #     if middle.endswith(Sever_Message_end):\r\n+    #         middle=middle.replace(Sever_Message_end,\"\")\r\n+    #         data+=middle\r\n+    #         break\r\n+    #     else:\r\n+    #         data+=middle\r\n+    while 1:\r\n+        data+=socket.recv(1024)\r\n+        try:\r\n+            obj=pickle.loads(data)\r\n+            return obj\r\n+        except Exception as e:\r\n+            if(str(e)==\"pickle data was truncated\"):\r\n+                continue\r\n+            else:\r\n+                import Result\r\n+                import Data\r\n+                return Result.Result.getResult(processor=\"net\",output=\"网络波动，数据异常\",returncode=Data.NETWORK_ERROR)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1697380058746,
            "name": "Commit-0",
            "content": "# author:高金磊\r\n# datetime:2022/6/22 9:48\r\nimport threading\r\nimport os\r\nimport sys\r\nBASE_DIR = os.path.dirname(__file__)\r\nfor i in range(3):###距离项目根目录的距离____终端使用\r\n    BASE_DIR=os.path.dirname(BASE_DIR)\r\nsys.path.append(BASE_DIR)\r\nimport socket\r\nimport time\r\n\r\nimport tqdm\r\n\r\nfrom Data import *\r\n\r\nfrom myPrint import *\r\nclass SocketServer(object):\r\n\r\n    def __init__(self, port=PORT):\r\n        self.port = port\r\n\r\n    def startup(self,fun,is_multithreading=True):\r\n        sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        sock_server.bind((Host, self.port))\r\n        sock_server.listen(0)\r\n        myPrint_Hint(\"===========等待连接================\")\r\n        while True:\r\n            try:\r\n                sock, address = sock_server.accept()\r\n                data = recver_message(sock)\r\n                if data!=cilent_key:\r\n                    myPrint_Wran(\"客户端keyid不正确\", data, \"请检查版本是否一致\")\r\n                    send_message(sock,sever_key)\r\n                    send_message(sock,\"拒绝连接\")\r\n                    sock.close()\r\n                else:\r\n                    myPrint_Success(\"客户端keyid:\", data)\r\n                    sock.send(sever_key.encode())\r\n                    if is_multithreading:\r\n                        thread = threading.Thread(target=fun, args=(sock,))\r\n                        thread.setDaemon(True)\r\n                        thread.start()\r\n                    else:\r\n                        fun(sock)\r\n\r\n            except Exception as e:\r\n                myPrint_Err(e)\r\n\r\n\r\n\r\n    def state(self):\r\n        pass\r\n\r\n\r\ndef send_message(socket,data):\r\n    socket.send(data.encode())\r\n\r\n\r\nclass SocketClient(object):\r\n\r\n    def __init__(self, host=Host, port=PORT):\r\n        self.host = host\r\n        self.port = port\r\n\r\n    def connect(self,fun,time_out=20):\r\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        # sock.settimeout(4)\r\n        for i in range(10):\r\n            try:\r\n                myPrint_Hint(\"=============连接中========================\")\r\n                sock.connect((self.host, self.port))\r\n                send_message(sock,cilent_key)\r\n                data=recver_message(sock)\r\n                break\r\n            except Exception as e:\r\n                # if str(e).endswith(\"在一个已经连接的套接字上做了一个连接请求。\"):\r\n                #     break\r\n                myPrint_Wran(\"连接失败,正在进行尝试........\")\r\n                myPrint_Hint(e)\r\n                if i==time_out-1:\r\n                    myPrint_Err(\"=============连接超时========================\")\r\n                    return -1\r\n                time.sleep(2)\r\n        myPrint_Success(\"=============连接成功========================\")\r\n        if data!=sever_key:\r\n            myPrint_Wran(\"服务器keyid不正确\",data,\"请检查版本是否一致\")\r\n            send_message(sock,\"拒绝连接\")\r\n            myPrint_Success(\"=============连接断开========================\")\r\n            sock.close()\r\n        else:\r\n            myPrint_Success(\"=============服务器允许接入========================\")\r\n            myPrint_Hint(\"服务器keyid:\", data)\r\n            fun(sock)\r\n        return sock\r\n\r\n\r\n\r\n\r\n\r\n\r\ndef recver_message_block(socket,expect_message):\r\n    while recver_message(socket) !=expect_message:\r\n        pass\r\n    return True\r\ndef recver_message(socket):\r\n    count=0\r\n    while 1:\r\n        data = socket.recv(1024).decode('utf-8','ignore')\r\n        if data == \"\":\r\n            time.sleep(0.5)\r\n            count+=1\r\n            if count>20:\r\n                print(\"连接似乎断开,服务器端回收资源\")\r\n                socket.close()\r\n            continue\r\n        else:\r\n            return data\r\ndef recv_blog(socket):\r\n    send_message(socket, Sever_Message_confirm)\r\n    blog_data = \"\"\r\n    while 1:\r\n        # 接收批量结果\r\n        data =recver_message(socket)\r\n        if data == \"\":\r\n            time.sleep(0.5)\r\n        else:\r\n            if data in Sever_Message_end:\r\n                send_message(socket,Sever_Message_confirm)\r\n                return blog_data,Sever_Message_end.index(data)\r\n            else:\r\n                blog_data +=\"\\n\"+data\r\n                send_message(socket,Sever_Message_confirm)\r\n\r\ndef send_blog_message(socket, data_list,code=0):\r\n    \"\"\"\r\n    发送批量消息\r\n    Args:\r\n        socket (_type_): _description_\r\n        data_list (_type_): _description_\r\n        code (_type_): 状态码\r\n    \"\"\"\r\n    if code>=len(Sever_Message_end):\r\n        myPrint_Err(\"无效的状态码\")\r\n        code=0\r\n        \r\n    socket.send(Sever_Message_start.encode())\r\n    recver_message_block(socket, Sever_Message_confirm)\r\n    for i in data_list:\r\n        socket.send(i.encode())\r\n        recver_message_block(socket, Sever_Message_confirm)\r\n        print(i)\r\n    socket.send(Sever_Message_end[code].encode())\r\n    recver_message_block(socket, Sever_Message_confirm)\r\n\r\n"
        }
    ]
}