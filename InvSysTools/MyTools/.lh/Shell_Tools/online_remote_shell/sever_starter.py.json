{
    "sourceFile": "Shell_Tools/online_remote_shell/sever_starter.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 86,
            "patches": [
                {
                    "date": 1697271608243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1697284040143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,73 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err\r\n+cwd=\"\"\r\n+def general_manage(data,funs):\r\n+    if data =='-h':\r\n+        data='help'\r\n+    f = os.popen(data, 'r', )\r\n+    d = f.readlines()\r\n+    f.close()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\" \"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    return [\"\",res]\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"-h\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return [\"\", res + funs[0](command, funs)[1]]\r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return [\"get_os_info\",_all_fun[command]()]\r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+\r\n+def _run(socket):\r\n+    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+        if data == \"exit\":\r\n+            socket.close()\r\n+            return 1\r\n+        else:\r\n+            if data==\"\":\r\n+                continue\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]])\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697284438666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n # author:高金磊\r\n # datetime:2022/6/22 10:08\r\n import os\r\n+import subprocess\r\n import sys\r\n BASE_DIR = os.path.dirname(__file__)\r\n for i in range(3):###距离项目根目录的距离____终端使用\r\n     BASE_DIR=os.path.dirname(BASE_DIR)\r\n@@ -12,14 +13,16 @@\n from Os_Tools.Os_Info import get_os_info\r\n from Os_Tools.process_tool import Chain_Process_tool\r\n from myPrint import myPrint_Success,myPrint_Err\r\n cwd=\"\"\r\n-def general_manage(data,funs):\r\n-    if data =='-h':\r\n-        data='help'\r\n-    f = os.popen(data, 'r', )\r\n-    d = f.readlines()\r\n-    f.close()\r\n+def general_manage(command,funs):\r\n+    if command =='-h':\r\n+        command='help'\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n+    p=res.stdout\r\n+    code=res.returncode\r\n+    d = p.readlines()\r\n+    p.close()\r\n     if len(funs) != 1:\r\n         myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n     res=\" \"\r\n     for i in d:\r\n"
                },
                {
                    "date": 1697284499970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err\r\n+cwd=\"\"\r\n+def general_manage(command,funs):\r\n+    if command =='-h':\r\n+        command='help'\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n+    p=res.stdout\r\n+    code=res.returncode\r\n+    d = p.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\" \"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    return [\"\",res,code]\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"-h\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return [\"\", res + funs[0](command, funs)[1]]\r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return [\"get_os_info\",_all_fun[command]()]\r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+\r\n+def _run(socket):\r\n+    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+        if data == \"exit\":\r\n+            socket.close()\r\n+            return 1\r\n+        else:\r\n+            if data==\"\":\r\n+                continue\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]])\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697284674762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err\r\n+cwd=\"\"\r\n+def general_manage(command,funs):\r\n+    if command =='-h':\r\n+        command='help'\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n+    p=res.stdout\r\n+    code=res.returncode\r\n+    d = p.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\" \"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    return [\"\",res,code]\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"-h\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return [\"\", res + funs[0](command, funs)[1]]\r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return [\"get_os_info\",_all_fun[command]()]\r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+\r\n+def _run(socket):\r\n+    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+        if data == \"exit\":\r\n+            socket.close()\r\n+            return 1\r\n+        else:\r\n+            if data==\"\":\r\n+                continue\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]],)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697285245353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \r\n def _run(socket):\r\n     funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n     while 1:\r\n-        data = recver_message(socket)\r\n+        data,code = recver_message(socket)\r\n         myPrint_Success(\"收到:\", data)\r\n         if data == \"exit\":\r\n             socket.close()\r\n             return 1\r\n@@ -71,229 +71,5 @@\n \r\n if __name__ == '__main__':\r\n     from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n \r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err\r\n-cwd=\"\"\r\n-def general_manage(command,funs):\r\n-    if command =='-h':\r\n-        command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n-    p=res.stdout\r\n-    code=res.returncode\r\n-    d = p.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\" \"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    return [\"\",res,code]\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"-h\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return [\"\", res + funs[0](command, funs)[1]]\r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return [\"get_os_info\",_all_fun[command]()]\r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-\r\n-def _run(socket):\r\n-    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-        if data == \"exit\":\r\n-            socket.close()\r\n-            return 1\r\n-        else:\r\n-            if data==\"\":\r\n-                continue\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]])\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err\r\n-cwd=\"\"\r\n-def general_manage(command,funs):\r\n-    if command =='-h':\r\n-        command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n-    p=res.stdout\r\n-    code=res.returncode\r\n-    d = p.readlines()\r\n-    p.close()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\" \"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    return [\"\",res]\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"-h\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return [\"\", res + funs[0](command, funs)[1]]\r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return [\"get_os_info\",_all_fun[command]()]\r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-\r\n-def _run(socket):\r\n-    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-        if data == \"exit\":\r\n-            socket.close()\r\n-            return 1\r\n-        else:\r\n-            if data==\"\":\r\n-                continue\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]])\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err\r\n-\r\n-def general_manage(data,funs):\r\n-    if data =='-h':\r\n-        data='help'\r\n-    f = os.popen(data, 'r', )\r\n-    d = f.readlines()\r\n-    f.close()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\" \"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    return [\"\",res]\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"-h\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return [\"\", res + funs[0](command, funs)[1]]\r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return [\"get_os_info\",_all_fun[command]()]\r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-\r\n-def _run(socket):\r\n-    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-        if data == \"exit\":\r\n-            socket.close()\r\n-            return 1\r\n-        else:\r\n-            if data==\"\":\r\n-                continue\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]])\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697286328162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,14 @@\n \r\n from Image_Tools.Image_char import get_txt_image\r\n from Os_Tools.Os_Info import get_os_info\r\n from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n cwd=\"\"\r\n+debug=True\r\n def general_manage(command,funs):\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n     if command =='-h':\r\n         command='help'\r\n     res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n     p=res.stdout\r\n"
                },
                {
                    "date": 1697371531091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,12 @@\n         myPrint_Hint(\"general_manage\")\r\n     if command =='-h':\r\n         command='help'\r\n     res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n-    p=res.stdout\r\n+    output, errors = res.communicate()\r\n     code=res.returncode\r\n-    d = p.readlines()\r\n+    d = output.readlines()\r\n+    e = errors.readlines()\r\n     if len(funs) != 1:\r\n         myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n     res=\" \"\r\n     for i in d:\r\n@@ -58,9 +59,9 @@\n \r\n def _run(socket):\r\n     funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n     while 1:\r\n-        data,code = recver_message(socket)\r\n+        data = recver_message(socket)\r\n         myPrint_Success(\"收到:\", data)\r\n         if data == \"exit\":\r\n             socket.close()\r\n             return 1\r\n"
                },
                {
                    "date": 1697371570588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n     output, errors = res.communicate()\r\n     code=res.returncode\r\n     d = output.readlines()\r\n-    e = errors.readlines()\r\n+    e = errors.decode(\"utf-8\")\r\n     if len(funs) != 1:\r\n         myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n     res=\" \"\r\n     for i in d:\r\n"
                },
                {
                    "date": 1697371670891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs):\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    if command =='-h':\r\n+        command='help'\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n+    output, errors = res.communicate()\r\n+    code=res.returncode\r\n+    d = output.readlines()\r\n+    e = errors.read().decode(\"utf-8\")\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\" \"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    return [\"\",res,code]\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"-h\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return [\"\", res + funs[0](command, funs)[1]]\r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return [\"get_os_info\",_all_fun[command]()]\r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+\r\n+def _run(socket):\r\n+    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+        if data == \"exit\":\r\n+            socket.close()\r\n+            return 1\r\n+        else:\r\n+            if data==\"\":\r\n+                continue\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]],)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697371695292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         command='help'\r\n     res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n     output, errors = res.communicate()\r\n     code=res.returncode\r\n-    d = output.readlines()\r\n+    d = output.read().decode(\"utf-8\")\r\n     e = errors.read().decode(\"utf-8\")\r\n     if len(funs) != 1:\r\n         myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n     res=\" \"\r\n@@ -75,84 +75,5 @@\n \r\n if __name__ == '__main__':\r\n     from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n \r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs):\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    if command =='-h':\r\n-        command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n-    output, errors = res.communicate()\r\n-    code=res.returncode\r\n-    d = output.readlines()\r\n-    e = errors.decode(\"utf-8\")\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\" \"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    return [\"\",res,code]\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"-h\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return [\"\", res + funs[0](command, funs)[1]]\r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return [\"get_os_info\",_all_fun[command]()]\r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-\r\n-def _run(socket):\r\n-    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-        if data == \"exit\":\r\n-            socket.close()\r\n-            return 1\r\n-        else:\r\n-            if data==\"\":\r\n-                continue\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]],)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697371731792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs):\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    if command =='-h':\r\n+        command='help'\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n+    output, errors = res.communicate()\r\n+    code=res.returncode\r\n+    d = output.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\" \"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    return [\"\",res,code]\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"-h\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return [\"\", res + funs[0](command, funs)[1]]\r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return [\"get_os_info\",_all_fun[command]()]\r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+\r\n+def _run(socket):\r\n+    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+        if data == \"exit\":\r\n+            socket.close()\r\n+            return 1\r\n+        else:\r\n+            if data==\"\":\r\n+                continue\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]],)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697371792884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,11 @@\n         myPrint_Hint(\"general_manage\")\r\n     if command =='-h':\r\n         command='help'\r\n     res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n-    output, errors = res.communicate()\r\n     code=res.returncode\r\n-    d = output.readlines()\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n     if len(funs) != 1:\r\n         myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n     res=\" \"\r\n     for i in d:\r\n@@ -74,84 +74,5 @@\n \r\n if __name__ == '__main__':\r\n     from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n \r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs):\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    if command =='-h':\r\n-        command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n-    output, errors = res.communicate()\r\n-    code=res.returncode\r\n-    d = output.read().decode(\"utf-8\")\r\n-    e = errors.read().decode(\"utf-8\")\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\" \"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    return [\"\",res,code]\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"-h\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return [\"\", res + funs[0](command, funs)[1]]\r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return [\"get_os_info\",_all_fun[command]()]\r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-\r\n-def _run(socket):\r\n-    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-        if data == \"exit\":\r\n-            socket.close()\r\n-            return 1\r\n-        else:\r\n-            if data==\"\":\r\n-                continue\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]],)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697371844565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs):\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    if command =='-h':\r\n+        command='help'\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\" \"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    return [\"\",res,code]\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"-h\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return [\"\", res + funs[0](command, funs)[1]]\r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return [\"get_os_info\",_all_fun[command]()]\r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+\r\n+def _run(socket):\r\n+    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+        if data == \"exit\":\r\n+            socket.close()\r\n+            return 1\r\n+        else:\r\n+            if data==\"\":\r\n+                continue\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]],)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697372032051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     if debug:\r\n         myPrint_Hint(\"general_manage\")\r\n     if command =='-h':\r\n         command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.STDOUT)\r\n     code=res.returncode\r\n     d = res.stdout.readlines()\r\n     e = res.stderr.readlines()\r\n     if len(funs) != 1:\r\n@@ -74,83 +74,5 @@\n \r\n if __name__ == '__main__':\r\n     from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n \r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs):\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    if command =='-h':\r\n-        command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\" \"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    return [\"\",res,code]\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"-h\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return [\"\", res + funs[0](command, funs)[1]]\r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return [\"get_os_info\",_all_fun[command]()]\r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-\r\n-def _run(socket):\r\n-    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-        if data == \"exit\":\r\n-            socket.close()\r\n-            return 1\r\n-        else:\r\n-            if data==\"\":\r\n-                continue\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]],)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697372143448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs):\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    if command =='-h':\r\n+        command='help'\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n+    p=res.stdout\r\n+    code=res.returncode\r\n+    d = p.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\" \"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    return [\"\",res,code]\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"-h\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return [\"\", res + funs[0](command, funs)[1]]\r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return [\"get_os_info\",_all_fun[command]()]\r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+\r\n+def _run(socket):\r\n+    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+        if data == \"exit\":\r\n+            socket.close()\r\n+            return 1\r\n+        else:\r\n+            if data==\"\":\r\n+                continue\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]],)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697372167560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     if debug:\r\n         myPrint_Hint(\"general_manage\")\r\n     if command =='-h':\r\n         command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.STDOUT,stderr=subprocess.STDOUT)\r\n     p=res.stdout\r\n     code=res.returncode\r\n     d = p.readlines()\r\n     if len(funs) != 1:\r\n@@ -74,83 +74,5 @@\n \r\n if __name__ == '__main__':\r\n     from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n \r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs):\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    if command =='-h':\r\n-        command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.STDOUT)\r\n-    code=res.returncode\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\" \"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    return [\"\",res,code]\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"-h\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return [\"\", res + funs[0](command, funs)[1]]\r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return [\"get_os_info\",_all_fun[command]()]\r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-\r\n-def _run(socket):\r\n-    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-        if data == \"exit\":\r\n-            socket.close()\r\n-            return 1\r\n-        else:\r\n-            if data==\"\":\r\n-                continue\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]],)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697372188114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     if debug:\r\n         myPrint_Hint(\"general_manage\")\r\n     if command =='-h':\r\n         command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.STDOUT,stderr=subprocess.STDOUT)\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.STDOUT)\r\n     p=res.stdout\r\n     code=res.returncode\r\n     d = p.readlines()\r\n     if len(funs) != 1:\r\n"
                },
                {
                    "date": 1697372486714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     if len(funs) != 1:\r\n         myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n     res=\" \"\r\n     for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n+        res+=\"%s\\n\"%(bytes(i, encoding=\"utf-8\").decode())\r\n     return [\"\",res,code]\r\n def other_command(command,funs):\r\n     def hello():\r\n        return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n"
                },
                {
                    "date": 1697372585829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     if len(funs) != 1:\r\n         myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n     res=\" \"\r\n     for i in d:\r\n-        res+=\"%s\\n\"%(bytes(i, encoding=\"utf-8\").decode())\r\n+        res+=\"%s\\n\"%(bytes(i, encoding).decode())\r\n     return [\"\",res,code]\r\n def other_command(command,funs):\r\n     def hello():\r\n        return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n"
                },
                {
                    "date": 1697372893276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     if debug:\r\n         myPrint_Hint(\"general_manage\")\r\n     if command =='-h':\r\n         command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.STDOUT)\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.STDOUT,encoding=\"utf-8\")\r\n     p=res.stdout\r\n     code=res.returncode\r\n     d = p.readlines()\r\n     if len(funs) != 1:\r\n"
                },
                {
                    "date": 1697372959559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     if debug:\r\n         myPrint_Hint(\"general_manage\")\r\n     if command =='-h':\r\n         command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.STDOUT,encoding=\"utf-8\")\r\n+    res = subprocess.run(command,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE,encoding=\"utf-8\",timeout=1)\r\n     p=res.stdout\r\n     code=res.returncode\r\n     d = p.readlines()\r\n     if len(funs) != 1:\r\n"
                },
                {
                    "date": 1697373219039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,17 +19,17 @@\n     if debug:\r\n         myPrint_Hint(\"general_manage\")\r\n     if command =='-h':\r\n         command='help'\r\n-    res = subprocess.run(command,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE,encoding=\"utf-8\",timeout=1)\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n     p=res.stdout\r\n     code=res.returncode\r\n     d = p.readlines()\r\n     if len(funs) != 1:\r\n         myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n     res=\" \"\r\n     for i in d:\r\n-        res+=\"%s\\n\"%(bytes(i, encoding).decode())\r\n+        res+=\"%s\\n\"%(i)\r\n     return [\"\",res,code]\r\n def other_command(command,funs):\r\n     def hello():\r\n        return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n"
                },
                {
                    "date": 1697374416389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,17 +20,20 @@\n         myPrint_Hint(\"general_manage\")\r\n     if command =='-h':\r\n         command='help'\r\n     res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    p=res.stdout\r\n     code=res.returncode\r\n-    d = p.readlines()\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n     if len(funs) != 1:\r\n         myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\" \"\r\n+    res=\"\"\r\n     for i in d:\r\n         res+=\"%s\\n\"%(i)\r\n-    return [\"\",res,code]\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    return [\"\",code,res,err_res]\r\n def other_command(command,funs):\r\n     def hello():\r\n        return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n         \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n@@ -51,9 +54,9 @@\n     try:\r\n         if command not in _all_fun.keys():\r\n             return funs[0](command,funs)\r\n         else:\r\n-            return [\"get_os_info\",_all_fun[command]()]\r\n+            return [\"get_os_info\",1,_all_fun[command](),\"\"]\r\n     except Exception as e:\r\n         return funs[0](command,funs)\r\n \r\n def _run(socket):\r\n"
                },
                {
                    "date": 1697377435238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs):\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    if command =='-h':\r\n+        command='help'\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    return [\"\",code,res,err_res]\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"-h\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return [\"\", res + funs[0](command, funs)[1]]\r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return [\"get_os_info\",1,_all_fun[command](),\"\"]\r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+\r\n+def _run(socket):\r\n+    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+        if data == \"exit\":\r\n+            socket.close()\r\n+            return 1\r\n+        else:\r\n+            if data==\"\":\r\n+                continue\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]],)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697377588883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         res+=\"%s\\n\"%(i)\r\n     err_res=\"\"\r\n     for i in e:\r\n         err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return [\"\",code,res,err_res]\r\n+    return Result.getResult(processor=\"{ip}Sys_cmd\") [\"\",code,res,err_res]\r\n def other_command(command,funs):\r\n     def hello():\r\n        return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n         \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n"
                },
                {
                    "date": 1697377674762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs):\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    if command =='-h':\r\n+        command='help'\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) [\"\",code,res,err_res]\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"-h\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return [\"\", res + funs[0](command, funs)[1]]\r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return [\"get_os_info\",1,_all_fun[command](),\"\"]\r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+\r\n+def _run(socket):\r\n+    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+        if data == \"exit\":\r\n+            socket.close()\r\n+            return 1\r\n+        else:\r\n+            if data==\"\":\r\n+                continue\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]],)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697377750323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n from Os_Tools.process_tool import Chain_Process_tool\r\n from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n cwd=\"\"\r\n debug=True\r\n-def general_manage(command,funs):\r\n+def general_manage(command,funs)->Result:\r\n     if debug:\r\n         myPrint_Hint(\"general_manage\")\r\n     if command =='-h':\r\n         command='help'\r\n@@ -31,9 +31,9 @@\n         res+=\"%s\\n\"%(i)\r\n     err_res=\"\"\r\n     for i in e:\r\n         err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) [\"\",code,res,err_res]\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n def other_command(command,funs):\r\n     def hello():\r\n        return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n         \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n@@ -54,9 +54,9 @@\n     try:\r\n         if command not in _all_fun.keys():\r\n             return funs[0](command,funs)\r\n         else:\r\n-            return [\"get_os_info\",1,_all_fun[command](),\"\"]\r\n+            return Result.getResult(processor=\"os_info\",) [\"get_os_info\",1,_all_fun[command](),\"\"]\r\n     except Exception as e:\r\n         return funs[0](command,funs)\r\n \r\n def _run(socket):\r\n"
                },
                {
                    "date": 1697378088222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs)->Result:\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    if command =='-h':\r\n+        command='help'\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"-h\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return [\"\", res + funs[0](command, funs)[1]]\r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+def exit(command,funs):\r\n+        if command == \"exit\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=10003)\r\n+    \r\n+def _run(socket):\r\n+    funs=[exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]],)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697378232074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+import Data\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs)->Result:\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    if command =='-h':\r\n+        command='help'\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"-h\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return [\"\", res + funs[0](command, funs)[1]]\r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+def exit(command,funs):\r\n+        if command == \"exit\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=Data.logout)\r\n+    \r\n+def _run(socket):\r\n+    funs=[exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]],)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697378254708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     except Exception as e:\r\n         return funs[0](command,funs)\r\n def exit(command,funs):\r\n         if command == \"exit\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=Data.logout)\r\n+            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n     \r\n def _run(socket):\r\n     funs=[exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n     while 1:\r\n"
                },
                {
                    "date": 1697378496277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,22 +50,30 @@\n         res = get_txt_image()+\"\\n\"\r\n         for re in _all_fun.keys():\r\n             res += str(re)\r\n             res += '\\n'\r\n-        return [\"\", res + funs[0](command, funs)[1]]\r\n+        return Result.getResult(processor=) [\"\", res + funs[0](command, funs)[1]]\r\n     try:\r\n         if command not in _all_fun.keys():\r\n             return funs[0](command,funs)\r\n         else:\r\n             return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n     except Exception as e:\r\n         return funs[0](command,funs)\r\n def exit(command,funs):\r\n-        if command == \"exit\":  \r\n+        if command == \"exit\" or command == \"logout\":  \r\n             return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n-    \r\n+        else:\r\n+            funs.pop(0)\r\n+            funs[0](command,funs)\r\n+def fliter(command,funs):\r\n+    if command == \"\":  \r\n+        return Result.getResult()\r\n+    else:\r\n+        funs.pop(0)\r\n+        funs[0](command,funs)\r\n def _run(socket):\r\n-    funs=[exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    funs=[fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n     while 1:\r\n         data = recver_message(socket)\r\n         myPrint_Success(\"收到:\", data)\r\n \r\n"
                },
                {
                    "date": 1697378660533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+import Data\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs)->Result:\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    if command =='-h':\r\n+        command='help'\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"-h\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return Result.getResult(processor=\"\") [\"\", res + funs[0](command, funs)[1]]\r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+def exit(command,funs):\r\n+        if command == \"exit\" or command == \"logout\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n+        else:\r\n+            funs.pop(0)\r\n+            return funs[0](command,funs)\r\n+def help(command,funs):\r\n+    if command == \"\":  \r\n+        return Result.getResult()\r\n+    else:\r\n+        funs.pop(0)\r\n+        funs[0](command,funs)\r\n+def fliter(command,funs):\r\n+    if command == \"\":  \r\n+        return Result.getResult()\r\n+    else:\r\n+        funs.pop(0)\r\n+        return funs[0](command,funs)\r\n+def _run(socket):\r\n+    funs=[fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]],)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697378801298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+import Data\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs)->Result:\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    if command =='-h':\r\n+        command='help'\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"-h\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return Result.getResult(processor=\"\") [\"\", res + funs[0](command, funs)[1]]\r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+def exit(command,funs):\r\n+        if command == \"exit\" or command == \"logout\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n+        else:\r\n+            funs.pop(0)\r\n+            return funs[0](command,funs)\r\n+def help(command,funs):\r\n+    \"\"\"\r\n+    !todo 实现所有方法的help\r\n+\r\n+    Args:\r\n+        command (_type_): _description_\r\n+        funs (_type_): _description_\r\n+\r\n+    Returns:\r\n+        _type_: _description_\r\n+    \"\"\"\r\n+    if command == \"help\":  \r\n+        return Result.getResult()\r\n+    else:\r\n+        funs.pop(0)\r\n+        funs[0](command,funs)\r\n+def fliter(command,funs):\r\n+    if command == \"\":  \r\n+        return Result.getResult()\r\n+    else:\r\n+        funs.pop(0)\r\n+        return funs[0](command,funs)\r\n+def _run(socket):\r\n+    funs=[fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]],)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697379452607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+import Data\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs)->Result:\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    if command == \"help\" or command.split(\" \")[1]==\"-h\":\r\n+        code=Data.HELP\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"help\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return Result.getResult(processor=\"\",output=res) \r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+def exit(command,funs):\r\n+        if command == \"exit\" or command == \"logout\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n+        else:\r\n+            funs.pop(0)\r\n+            return funs[0](command,funs)\r\n+def help(command : str,funs):\r\n+    \"\"\"\r\n+    !todo 实现所有方法的help\r\n+\r\n+    Args:\r\n+        command (_type_): _description_\r\n+        funs (_type_): _description_\r\n+\r\n+    Returns:\r\n+        _type_: _description_\r\n+    \"\"\"\r\n+    if command == \"help\" or command.split(\" \")[1]==\"help\": \r\n+        output=\"\" \r\n+        for fun in funs:\r\n+            res:Result=fun(command,[])\r\n+            if res.returncode==Data.HELP:\r\n+                output+=res.output+res.err+\"\\n\"\r\n+        return Result.getResult(output=output)\r\n+                    \r\n+    else:\r\n+        funs.pop(0)\r\n+        return funs[0](command,funs)\r\n+def fliter(command,funs):\r\n+    if command == \"help\" or command.split(\" \")[1]==\"help\":\r\n+        return Result.getResult(\"这是fliter，暂时没有帮助文档\")\r\n+    if command == \"\":  \r\n+        return Result.getResult()\r\n+    else:\r\n+        funs.pop(0)\r\n+        return funs[0](command,funs)\r\n+def _run(socket):\r\n+    funs=[fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]],)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697379620179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+import Data\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs)->Result:\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    if command == \"help\" or command.split(\" \")[1]==\"-h\":\r\n+        code=Data.HELP\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"help\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return Result.getResult(processor=\"\",output=res) \r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+def exit(command,funs):\r\n+        if command == \"exit\" or command == \"logout\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n+        else:\r\n+            funs.pop(0)\r\n+            return funs[0](command,funs)\r\n+def help(command : str,funs):\r\n+    \"\"\"\r\n+    !todo 实现所有方法的help\r\n+\r\n+    Args:\r\n+        command (_type_): _description_\r\n+        funs (_type_): _description_\r\n+\r\n+    Returns:\r\n+        _type_: _description_\r\n+    \"\"\"\r\n+    if command == \"help\" or command.split(\" \")[1]==\"help\": \r\n+        output=\"\" \r\n+        for fun in funs:\r\n+            res:Result=fun(command,[])\r\n+            if res.returncode==Data.HELP:\r\n+                output+=res.output+res.err+\"\\n\"\r\n+        return Result.getResult(output=output)\r\n+                    \r\n+    else:\r\n+        funs.pop(0)\r\n+        return funs[0](command,funs)\r\n+def fliter(command,funs):\r\n+    if command == \"help\" or command.split(\" \")[1]==\"help\":\r\n+        return Result.getResult(\"这是fliter，暂时没有帮助文档\\n\")\r\n+    if command == \"\":  \r\n+        return Result.getResult()\r\n+    else:\r\n+        funs.pop(0)\r\n+        return funs[0](command,funs)\r\n+def _run(socket):\r\n+    funs=[fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]],)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697379660069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+import Data\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs)->Result:\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n+        code=Data.HELP\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"help\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return Result.getResult(processor=\"\",output=res) \r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+def exit(command,funs):\r\n+        if command == \"exit\" or command == \"logout\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n+        else:\r\n+            funs.pop(0)\r\n+            return funs[0](command,funs)\r\n+def help(command : str,funs):\r\n+    \"\"\"\r\n+    !todo 实现所有方法的help\r\n+\r\n+    Args:\r\n+        command (_type_): _description_\r\n+        funs (_type_): _description_\r\n+\r\n+    Returns:\r\n+        _type_: _description_\r\n+    \"\"\"\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n+        output=\"\" \r\n+        for fun in funs:\r\n+            res:Result=fun(command,[])\r\n+            if res.returncode==Data.HELP:\r\n+                output+=res.output+res.err+\"\\n\"\r\n+        return Result.getResult(output=output)\r\n+                    \r\n+    else:\r\n+        funs.pop(0)\r\n+        return funs[0](command,funs)\r\n+def fliter(command,funs):\r\n+    if command == \"help\" or command.split(\" \")[1]==\"help\":\r\n+        return Result.getResult(\"这是fliter，暂时没有帮助文档\\n\")\r\n+    if command == \"\":  \r\n+        return Result.getResult()\r\n+    else:\r\n+        funs.pop(0)\r\n+        return funs[0](command,funs)\r\n+def _run(socket):\r\n+    funs=[fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        response_message=funs[0](data,copy(funs))\r\n+        myPrint_Success(response_message)\r\n+        send_blog_message(socket, [response_message[1]],)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697379706842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     else:\r\n         funs.pop(0)\r\n         return funs[0](command,funs)\r\n def fliter(command,funs):\r\n-    if command == \"help\" or command.split(\" \")[1]==\"help\":\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n         return Result.getResult(\"这是fliter，暂时没有帮助文档\\n\")\r\n     if command == \"\":  \r\n         return Result.getResult()\r\n     else:\r\n@@ -108,833 +108,5 @@\n \r\n if __name__ == '__main__':\r\n     from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n \r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-import Data\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs)->Result:\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    if command == \"help\" or command.split(\" \")[1]==\"-h\":\r\n-        code=Data.HELP\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n-\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"help\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return Result.getResult(processor=\"\",output=res) \r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-def exit(command,funs):\r\n-        if command == \"exit\" or command == \"logout\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n-        else:\r\n-            funs.pop(0)\r\n-            return funs[0](command,funs)\r\n-def help(command : str,funs):\r\n-    \"\"\"\r\n-    !todo 实现所有方法的help\r\n-\r\n-    Args:\r\n-        command (_type_): _description_\r\n-        funs (_type_): _description_\r\n-\r\n-    Returns:\r\n-        _type_: _description_\r\n-    \"\"\"\r\n-    if command == \"help\" or command.split(\" \")[1]==\"help\": \r\n-        output=\"\" \r\n-        for fun in funs:\r\n-            res:Result=fun(command,[])\r\n-            if res.returncode==Data.HELP:\r\n-                output+=res.output+res.err+\"\\n\"\r\n-        return Result.getResult(output=output)\r\n-                    \r\n-    else:\r\n-        funs.pop(0)\r\n-        return funs[0](command,funs)\r\n-def fliter(command,funs):\r\n-    if command == \"help\" or command.split(\" \")[1]==\"help\":\r\n-        return Result.getResult(\"这是fliter，暂时没有帮助文档\\n\")\r\n-    if command == \"\":  \r\n-        return Result.getResult()\r\n-    else:\r\n-        funs.pop(0)\r\n-        return funs[0](command,funs)\r\n-def _run(socket):\r\n-    funs=[fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]],)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-import Data\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs)->Result:\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    if command == \"help\" or command.split(\" \")[1]==\"-h\":\r\n-        code=Data.HELP\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n-\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"help\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return Result.getResult(processor=\"\",output=res) \r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-def exit(command,funs):\r\n-        if command == \"exit\" or command == \"logout\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n-        else:\r\n-            funs.pop(0)\r\n-            return funs[0](command,funs)\r\n-def help(command : str,funs):\r\n-    \"\"\"\r\n-    !todo 实现所有方法的help\r\n-\r\n-    Args:\r\n-        command (_type_): _description_\r\n-        funs (_type_): _description_\r\n-\r\n-    Returns:\r\n-        _type_: _description_\r\n-    \"\"\"\r\n-    if command == \"help\" or command.split(\" \")[1]==\"help\": \r\n-        output=\"\" \r\n-        for fun in funs:\r\n-            res:Result=fun(command,[])\r\n-            if res.returncode==Data.HELP:\r\n-                output+=res.output+res.err+\"\\n\"\r\n-        return Result.getResult(output=output)\r\n-                    \r\n-    else:\r\n-        funs.pop(0)\r\n-        return funs[0](command,funs)\r\n-def fliter(command,funs):\r\n-    if command == \"help\" or command.split(\" \")[1]==\"help\":\r\n-        return Result.getResult(\"这是fliter，暂时没有帮助文档\")\r\n-    if command == \"\":  \r\n-        return Result.getResult()\r\n-    else:\r\n-        funs.pop(0)\r\n-        return funs[0](command,funs)\r\n-def _run(socket):\r\n-    funs=[fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]],)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-import Data\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs)->Result:\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    if command =='-h':\r\n-        command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"-h\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return Result.getResult(processor=\"\") [\"\", res + funs[0](command, funs)[1]]\r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-def exit(command,funs):\r\n-        if command == \"exit\" or command == \"logout\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n-        else:\r\n-            funs.pop(0)\r\n-            return funs[0](command,funs)\r\n-def help(command,funs):\r\n-    \"\"\"\r\n-    !todo 实现所有方法的help\r\n-\r\n-    Args:\r\n-        command (_type_): _description_\r\n-        funs (_type_): _description_\r\n-\r\n-    Returns:\r\n-        _type_: _description_\r\n-    \"\"\"\r\n-    if command == \"help\":  \r\n-        return Result.getResult()\r\n-    else:\r\n-        funs.pop(0)\r\n-        funs[0](command,funs)\r\n-def fliter(command,funs):\r\n-    if command == \"\":  \r\n-        return Result.getResult()\r\n-    else:\r\n-        funs.pop(0)\r\n-        return funs[0](command,funs)\r\n-def _run(socket):\r\n-    funs=[fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]],)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-import Data\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs)->Result:\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    if command =='-h':\r\n-        command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"-h\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return Result.getResult(processor=\"\") [\"\", res + funs[0](command, funs)[1]]\r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-def exit(command,funs):\r\n-        if command == \"exit\" or command == \"logout\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n-        else:\r\n-            funs.pop(0)\r\n-            return funs[0](command,funs)\r\n-def help(command,funs):\r\n-    if command == \"\":  \r\n-        return Result.getResult()\r\n-    else:\r\n-        funs.pop(0)\r\n-        funs[0](command,funs)\r\n-def fliter(command,funs):\r\n-    if command == \"\":  \r\n-        return Result.getResult()\r\n-    else:\r\n-        funs.pop(0)\r\n-        return funs[0](command,funs)\r\n-def _run(socket):\r\n-    funs=[fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]],)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-import Data\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs)->Result:\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    if command =='-h':\r\n-        command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"-h\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return Result.getResult(processor=) [\"\", res + funs[0](command, funs)[1]]\r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-def exit(command,funs):\r\n-        if command == \"exit\" or command == \"logout\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n-        else:\r\n-            funs.pop(0)\r\n-            funs[0](command,funs)\r\n-def fliter(command,funs):\r\n-    if command == \"\":  \r\n-        return Result.getResult()\r\n-    else:\r\n-        funs.pop(0)\r\n-        funs[0](command,funs)\r\n-def _run(socket):\r\n-    funs=[fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]],)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs)->Result:\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    if command =='-h':\r\n-        command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"-h\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return [\"\", res + funs[0](command, funs)[1]]\r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-def exit(command,funs):\r\n-        if command == \"exit\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=10003)\r\n-    \r\n-def _run(socket):\r\n-    funs=[exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]],)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs)->Result:\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    if command =='-h':\r\n-        command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"-h\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return [\"\", res + funs[0](command, funs)[1]]\r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",) [\"get_os_info\",1,_all_fun[command](),\"\"]\r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-\r\n-def _run(socket):\r\n-    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-        if data == \"exit\":\r\n-            socket.close()\r\n-            return 1\r\n-        else:\r\n-            if data==\"\":\r\n-                continue\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]],)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs):\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    if command =='-h':\r\n-        command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"{ip}Sys_cmd\") [\"\",code,res,err_res]\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"-h\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return [\"\", res + funs[0](command, funs)[1]]\r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return [\"get_os_info\",1,_all_fun[command](),\"\"]\r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-\r\n-def _run(socket):\r\n-    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-        if data == \"exit\":\r\n-            socket.close()\r\n-            return 1\r\n-        else:\r\n-            if data==\"\":\r\n-                continue\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]],)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs):\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    if command =='-h':\r\n-        command='help'\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return [\"\",code,res,err_res]\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"-h\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return [\"\", res + funs[0](command, funs)[1]]\r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return [\"get_os_info\",1,_all_fun[command](),\"\"]\r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-\r\n-def _run(socket):\r\n-    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-        if data == \"exit\":\r\n-            socket.close()\r\n-            return 1\r\n-        else:\r\n-            if data==\"\":\r\n-                continue\r\n-\r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]],)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n-\r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697379767212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,11 +101,11 @@\n     while 1:\r\n         data = recver_message(socket)\r\n         myPrint_Success(\"收到:\", data)\r\n \r\n-        response_message=funs[0](data,copy(funs))\r\n-        myPrint_Success(response_message)\r\n-        send_blog_message(socket, [response_message[1]],)\r\n+        res:Result=funs[0](data,copy(funs))\r\n+        myPrint_Success(res)\r\n+        send_blog_message(socket, )\r\n \r\n if __name__ == '__main__':\r\n     from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n \r\n"
                },
                {
                    "date": 1697379824656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,10 @@\n from Os_Tools.Os_Info import get_os_info\r\n from Os_Tools.process_tool import Chain_Process_tool\r\n from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n import Data\r\n+\r\n+import pickle\r\n cwd=\"\"\r\n debug=True\r\n def general_manage(command,funs)->Result:\r\n     if debug:\r\n@@ -103,9 +105,9 @@\n         myPrint_Success(\"收到:\", data)\r\n \r\n         res:Result=funs[0](data,copy(funs))\r\n         myPrint_Success(res)\r\n-        send_blog_message(socket, )\r\n+        send_blog_message(socket, res)\r\n \r\n if __name__ == '__main__':\r\n     from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n \r\n"
                },
                {
                    "date": 1697380065298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,7 +108,7 @@\n         myPrint_Success(res)\r\n         send_blog_message(socket, res)\r\n \r\n if __name__ == '__main__':\r\n-    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n+    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_blog_message\r\n \r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697381075271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,10 +105,10 @@\n         myPrint_Success(\"收到:\", data)\r\n \r\n         res:Result=funs[0](data,copy(funs))\r\n         myPrint_Success(res)\r\n-        send_blog_message(socket, res)\r\n+        send_obj(socket, res)\r\n \r\n if __name__ == '__main__':\r\n-    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_blog_message\r\n+    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697383629798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n         res = get_txt_image()+\"\\n\"\r\n         for re in _all_fun.keys():\r\n             res += str(re)\r\n             res += '\\n'\r\n-        return Result.getResult(processor=\"\",output=res) \r\n+        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n     try:\r\n         if command not in _all_fun.keys():\r\n             return funs[0](command,funs)\r\n         else:\r\n@@ -91,9 +91,9 @@\n         funs.pop(0)\r\n         return funs[0](command,funs)\r\n def fliter(command,funs):\r\n     if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n-        return Result.getResult(\"这是fliter，暂时没有帮助文档\\n\")\r\n+        return Result.getResult(\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n     if command == \"\":  \r\n         return Result.getResult()\r\n     else:\r\n         funs.pop(0)\r\n"
                },
                {
                    "date": 1697383890326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,16 +91,16 @@\n         funs.pop(0)\r\n         return funs[0](command,funs)\r\n def fliter(command,funs):\r\n     if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n-        return Result.getResult(\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n+        return Result.getResult(processor=\"fliter\" output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n     if command == \"\":  \r\n         return Result.getResult()\r\n     else:\r\n         funs.pop(0)\r\n         return funs[0](command,funs)\r\n def _run(socket):\r\n-    funs=[fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n     while 1:\r\n         data = recver_message(socket)\r\n         myPrint_Success(\"收到:\", data)\r\n \r\n"
                },
                {
                    "date": 1697383910425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,114 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+import Data\r\n+\r\n+import pickle\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs)->Result:\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n+        code=Data.HELP\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    funs.pop(0)\r\n+    if command == \"help\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return funs[0](command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return funs[0](command,funs)\r\n+def exit(command,funs):\r\n+        if command == \"exit\" or command == \"logout\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n+        else:\r\n+            funs.pop(0)\r\n+            return funs[0](command,funs)\r\n+def help(command : str,funs):\r\n+    \"\"\"\r\n+    !todo 实现所有方法的help\r\n+\r\n+    Args:\r\n+        command (_type_): _description_\r\n+        funs (_type_): _description_\r\n+\r\n+    Returns:\r\n+        _type_: _description_\r\n+    \"\"\"\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n+        output=\"\" \r\n+        for fun in funs:\r\n+            res:Result=fun(command,[])\r\n+            if res.returncode==Data.HELP:\r\n+                output+=res.output+res.err+\"\\n\"\r\n+        return Result.getResult(output=output)\r\n+                    \r\n+    else:\r\n+        funs.pop(0)\r\n+        return funs[0](command,funs)\r\n+def fliter(command,funs):\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n+        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n+    if command == \"\":  \r\n+        return Result.getResult()\r\n+    else:\r\n+        funs.pop(0)\r\n+        return funs[0](command,funs)\r\n+def _run(socket):\r\n+    funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        res:Result=funs[0](data,copy(funs))\r\n+        myPrint_Success(res)\r\n+        send_obj(socket, res)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697415570150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,26 +47,35 @@\n     _all_fun = {\r\n        \"hello\":hello,\r\n         \"who\":get_txt_image\r\n     }\r\n-    funs.pop(0)\r\n+    if len(funs)>0:\r\n+        funs.pop(0)\r\n     if command == \"help\":\r\n         res = get_txt_image()+\"\\n\"\r\n         for re in _all_fun.keys():\r\n             res += str(re)\r\n             res += '\\n'\r\n         return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n     try:\r\n         if command not in _all_fun.keys():\r\n+            if len(funs)==0:\r\n+                return Result.getResult()\r\n             return funs[0](command,funs)\r\n         else:\r\n             return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n     except Exception as e:\r\n+        if len(funs)==0:\r\n+            return Result.getResult()\r\n         return funs[0](command,funs)\r\n+def nextLines(command,funs):\r\n+    pass\r\n def exit(command,funs):\r\n         if command == \"exit\" or command == \"logout\":  \r\n             return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n         else:\r\n+            if len(funs)==0:\r\n+                return Result.getResult()\r\n             funs.pop(0)\r\n             return funs[0](command,funs)\r\n def help(command : str,funs):\r\n     \"\"\"\r\n@@ -87,17 +96,19 @@\n                 output+=res.output+res.err+\"\\n\"\r\n         return Result.getResult(output=output)\r\n                     \r\n     else:\r\n-        funs.pop(0)\r\n+        if len(funs)==0:\r\n+            return Result.getResult()\r\n         return funs[0](command,funs)\r\n def fliter(command,funs):\r\n     if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n         return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n     if command == \"\":  \r\n         return Result.getResult()\r\n     else:\r\n-        funs.pop(0)\r\n+        if len(funs)==0:\r\n+            return Result.getResult()\r\n         return funs[0](command,funs)\r\n def _run(socket):\r\n     funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n     while 1:\r\n"
                },
                {
                    "date": 1697416306034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,125 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+import Data\r\n+\r\n+import pickle\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs)->Result:\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n+        code=Data.HELP\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    if len(funs)>0:\r\n+        funs.pop(0)\r\n+    if command == \"help\":\r\n+        res = get_txt_image()+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return next_Cpu(command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return next_Cpu(command,funs)\r\n+def next_Cpu(command,funs):\r\n+    if len(funs)==0:\r\n+        return Result.getResult(processor=\"next_cpu\")\r\n+    else:\r\n+        funs.pop(0)\r\n+        return funs[0](command,funs)\r\n+def exit(command,funs):\r\n+        if command == \"exit\" or command == \"logout\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n+        else:\r\n+            if len(funs)==0:\r\n+                return Result.getResult()\r\n+            funs.pop(0)\r\n+            return funs[0](command,funs)\r\n+def help(command : str,funs):\r\n+    \"\"\"\r\n+    !todo 实现所有方法的help\r\n+\r\n+    Args:\r\n+        command (_type_): _description_\r\n+        funs (_type_): _description_\r\n+\r\n+    Returns:\r\n+        _type_: _description_\r\n+    \"\"\"\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n+        output=\"\" \r\n+        for fun in funs:\r\n+            res:Result=fun(command,[])\r\n+            if res.returncode==Data.HELP:\r\n+                output+=res.output+res.err+\"\\n\"\r\n+        return Result.getResult(output=output)\r\n+                    \r\n+    else:\r\n+        if len(funs)==0:\r\n+            return Result.getResult()\r\n+        return funs[0](command,funs)\r\n+def fliter(command,funs):\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n+        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n+    if command == \"\":  \r\n+        return Result.getResult()\r\n+    else:\r\n+        if len(funs)==0:\r\n+            return Result.getResult()\r\n+        return funs[0](command,funs)\r\n+def _run(socket):\r\n+    funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        res:Result=funs[0](data,copy(funs))\r\n+        myPrint_Success(res)\r\n+        send_obj(socket, res)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697416475268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,12 +72,9 @@\n def exit(command,funs):\r\n         if command == \"exit\" or command == \"logout\":  \r\n             return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n         else:\r\n-            if len(funs)==0:\r\n-                return Result.getResult()\r\n-            funs.pop(0)\r\n-            return funs[0](command,funs)\r\n+           return next_Cpu(command,funs)\r\n def help(command : str,funs):\r\n     \"\"\"\r\n     !todo 实现所有方法的help\r\n \r\n@@ -96,20 +93,16 @@\n                 output+=res.output+res.err+\"\\n\"\r\n         return Result.getResult(output=output)\r\n                     \r\n     else:\r\n-        if len(funs)==0:\r\n-            return Result.getResult()\r\n-        return funs[0](command,funs)\r\n+        return next_Cpu(command,funs)\r\n def fliter(command,funs):\r\n     if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n         return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n     if command == \"\":  \r\n-        return Result.getResult()\r\n+        return Result.getResult(processor=\"fliter\")\r\n     else:\r\n-        if len(funs)==0:\r\n-            return Result.getResult()\r\n-        return funs[0](command,funs)\r\n+        return next_Cpu(command,funs)\r\n def _run(socket):\r\n     funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n     while 1:\r\n         data = recver_message(socket)\r\n@@ -121,244 +114,5 @@\n \r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-import Data\r\n-\r\n-import pickle\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs)->Result:\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n-        code=Data.HELP\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n-\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    if len(funs)>0:\r\n-        funs.pop(0)\r\n-    if command == \"help\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            if len(funs)==0:\r\n-                return Result.getResult()\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n-    except Exception as e:\r\n-        if len(funs)==0:\r\n-            return Result.getResult()\r\n-        return funs[0](command,funs)\r\n-def nextLines(command,funs):\r\n-    pass\r\n-def exit(command,funs):\r\n-        if command == \"exit\" or command == \"logout\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n-        else:\r\n-            if len(funs)==0:\r\n-                return Result.getResult()\r\n-            funs.pop(0)\r\n-            return funs[0](command,funs)\r\n-def help(command : str,funs):\r\n-    \"\"\"\r\n-    !todo 实现所有方法的help\r\n-\r\n-    Args:\r\n-        command (_type_): _description_\r\n-        funs (_type_): _description_\r\n-\r\n-    Returns:\r\n-        _type_: _description_\r\n-    \"\"\"\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n-        output=\"\" \r\n-        for fun in funs:\r\n-            res:Result=fun(command,[])\r\n-            if res.returncode==Data.HELP:\r\n-                output+=res.output+res.err+\"\\n\"\r\n-        return Result.getResult(output=output)\r\n-                    \r\n-    else:\r\n-        if len(funs)==0:\r\n-            return Result.getResult()\r\n-        return funs[0](command,funs)\r\n-def fliter(command,funs):\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n-        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n-    if command == \"\":  \r\n-        return Result.getResult()\r\n-    else:\r\n-        if len(funs)==0:\r\n-            return Result.getResult()\r\n-        return funs[0](command,funs)\r\n-def _run(socket):\r\n-    funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-\r\n-        res:Result=funs[0](data,copy(funs))\r\n-        myPrint_Success(res)\r\n-        send_obj(socket, res)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n-\r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-import Data\r\n-\r\n-import pickle\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs)->Result:\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n-        code=Data.HELP\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n-\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    funs.pop(0)\r\n-    if command == \"help\":\r\n-        res = get_txt_image()+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return funs[0](command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n-    except Exception as e:\r\n-        return funs[0](command,funs)\r\n-def exit(command,funs):\r\n-        if command == \"exit\" or command == \"logout\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n-        else:\r\n-            funs.pop(0)\r\n-            return funs[0](command,funs)\r\n-def help(command : str,funs):\r\n-    \"\"\"\r\n-    !todo 实现所有方法的help\r\n-\r\n-    Args:\r\n-        command (_type_): _description_\r\n-        funs (_type_): _description_\r\n-\r\n-    Returns:\r\n-        _type_: _description_\r\n-    \"\"\"\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n-        output=\"\" \r\n-        for fun in funs:\r\n-            res:Result=fun(command,[])\r\n-            if res.returncode==Data.HELP:\r\n-                output+=res.output+res.err+\"\\n\"\r\n-        return Result.getResult(output=output)\r\n-                    \r\n-    else:\r\n-        funs.pop(0)\r\n-        return funs[0](command,funs)\r\n-def fliter(command,funs):\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n-        return Result.getResult(processor=\"fliter\" output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n-    if command == \"\":  \r\n-        return Result.getResult()\r\n-    else:\r\n-        funs.pop(0)\r\n-        return funs[0](command,funs)\r\n-def _run(socket):\r\n-    funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-\r\n-        res:Result=funs[0](data,copy(funs))\r\n-        myPrint_Success(res)\r\n-        send_obj(socket, res)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n-\r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697416661298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     }\r\n     if len(funs)>0:\r\n         funs.pop(0)\r\n     if command == \"help\":\r\n-        res = get_txt_image()+\"\\n\"\r\n+        res = get_txt_image(Data.QIAN_MING_IMAGE)+\"\\n\"\r\n         for re in _all_fun.keys():\r\n             res += str(re)\r\n             res += '\\n'\r\n         return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n"
                },
                {
                    "date": 1697416828664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,113 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+import Data\r\n+\r\n+import pickle\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs)->Result:\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n+        code=Data.HELP\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) != 1:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i)\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    if len(funs)>0:\r\n+        funs.pop(0)\r\n+    if command == \"help\":\r\n+        res = get_txt_image(Data.QIAN_MING_IMAGE)+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return next_Cpu(command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return next_Cpu(command,funs)\r\n+\r\n+def exit(command,funs):\r\n+        if command == \"exit\" or command == \"logout\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n+        else:\r\n+           return next_Cpu(command,funs)\r\n+def help(command : str,funs):\r\n+    \"\"\"\r\n+    !todo 实现所有方法的help\r\n+\r\n+    Args:\r\n+        command (_type_): _description_\r\n+        funs (_type_): _description_\r\n+\r\n+    Returns:\r\n+        _type_: _description_\r\n+    \"\"\"\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n+        output=\"\" \r\n+        for fun in funs:\r\n+            res:Result=fun(command,[])\r\n+            if res.returncode==Data.HELP:\r\n+                output+=res.output+res.err+\"\\n\"\r\n+        return Result.getResult(output=output)\r\n+                    \r\n+    else:\r\n+        return next_Cpu(command,funs)\r\n+def fliter(command,funs):\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n+        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n+    if command == \"\":  \r\n+        return Result.getResult(processor=\"fliter\")\r\n+    else:\r\n+        return next_Cpu(command,funs)\r\n+def _run(socket):\r\n+    funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        res:Result=funs[0](data,copy(funs))\r\n+        myPrint_Success(res)\r\n+        send_obj(socket, res)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697416881827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,121 +2,10 @@\n # datetime:2022/6/22 10:08\r\n import os\r\n import subprocess\r\n import sys\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-import Data\r\n \r\n-import pickle\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs)->Result:\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n-        code=Data.HELP\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n \r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    if len(funs)>0:\r\n-        funs.pop(0)\r\n-    if command == \"help\":\r\n-        res = get_txt_image(Data.QIAN_MING_IMAGE)+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return next_Cpu(command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n-    except Exception as e:\r\n-        return next_Cpu(command,funs)\r\n-\r\n-def exit(command,funs):\r\n-        if command == \"exit\" or command == \"logout\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n-        else:\r\n-           return next_Cpu(command,funs)\r\n-def help(command : str,funs):\r\n-    \"\"\"\r\n-    !todo 实现所有方法的help\r\n-\r\n-    Args:\r\n-        command (_type_): _description_\r\n-        funs (_type_): _description_\r\n-\r\n-    Returns:\r\n-        _type_: _description_\r\n-    \"\"\"\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n-        output=\"\" \r\n-        for fun in funs:\r\n-            res:Result=fun(command,[])\r\n-            if res.returncode==Data.HELP:\r\n-                output+=res.output+res.err+\"\\n\"\r\n-        return Result.getResult(output=output)\r\n-                    \r\n-    else:\r\n-        return next_Cpu(command,funs)\r\n-def fliter(command,funs):\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n-        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n-    if command == \"\":  \r\n-        return Result.getResult(processor=\"fliter\")\r\n-    else:\r\n-        return next_Cpu(command,funs)\r\n-def _run(socket):\r\n-    funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-\r\n-        res:Result=funs[0](data,copy(funs))\r\n-        myPrint_Success(res)\r\n-        send_obj(socket, res)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n-\r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n BASE_DIR = os.path.dirname(__file__)\r\n for i in range(3):###距离项目根目录的距离____终端使用\r\n     BASE_DIR=os.path.dirname(BASE_DIR)\r\n     sys.path.append(BASE_DIR)\r\n@@ -126,9 +15,9 @@\n from Os_Tools.Os_Info import get_os_info\r\n from Os_Tools.process_tool import Chain_Process_tool\r\n from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n import Data\r\n-\r\n+from Shell_Tools.online_remote_shell.Tools import next_Cpu\r\n import pickle\r\n cwd=\"\"\r\n debug=True\r\n def general_manage(command,funs)->Result:\r\n@@ -175,14 +64,9 @@\n         else:\r\n             return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n     except Exception as e:\r\n         return next_Cpu(command,funs)\r\n-def next_Cpu(command,funs):\r\n-    if len(funs)==0:\r\n-        return Result.getResult(processor=\"next_cpu\")\r\n-    else:\r\n-        funs.pop(0)\r\n-        return funs[0](command,funs)\r\n+\r\n def exit(command,funs):\r\n         if command == \"exit\" or command == \"logout\":  \r\n             return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n         else:\r\n"
                },
                {
                    "date": 1697439376835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     if len(funs) != 1:\r\n         myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n     res=\"\"\r\n     for i in d:\r\n-        res+=\"%s\\n\"%(i)\r\n+        res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n     err_res=\"\"\r\n     for i in e:\r\n         err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n     return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n"
                },
                {
                    "date": 1697439687156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n     while 1:\r\n         data = recver_message(socket)\r\n         myPrint_Success(\"收到:\", data)\r\n \r\n-        res:Result=funs[0](data,copy(funs))\r\n+        res:Result=next_Cpu(data,copy(funs))\r\n         myPrint_Success(res)\r\n         send_obj(socket, res)\r\n \r\n if __name__ == '__main__':\r\n"
                },
                {
                    "date": 1697443470277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+\r\n+\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+import Data\r\n+from Shell_Tools.online_remote_shell.Tools import next_Cpu\r\n+import pickle\r\n+cwd=\"\"\r\n+debug=True\r\n+def general_manage(command,funs)->Result:\r\n+    if debug:\r\n+        myPrint_Hint(\"general_manage\")\r\n+    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n+        code=Data.HELP\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) !=0:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    if len(funs)>0:\r\n+        funs.pop(0)\r\n+    if command == \"help\":\r\n+        res = get_txt_image(Data.QIAN_MING_IMAGE)+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return next_Cpu(command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return next_Cpu(command,funs)\r\n+\r\n+def exit(command,funs):\r\n+        if command == \"exit\" or command == \"logout\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n+        else:\r\n+           return next_Cpu(command,funs)\r\n+def help(command : str,funs):\r\n+    \"\"\"\r\n+    !todo 实现所有方法的help\r\n+\r\n+    Args:\r\n+        command (_type_): _description_\r\n+        funs (_type_): _description_\r\n+\r\n+    Returns:\r\n+        _type_: _description_\r\n+    \"\"\"\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n+        output=\"\" \r\n+        for fun in funs:\r\n+            res:Result=fun(command,[])\r\n+            if res.returncode==Data.HELP:\r\n+                output+=res.output+res.err+\"\\n\"\r\n+        return Result.getResult(output=output)\r\n+                    \r\n+    else:\r\n+        return next_Cpu(command,funs)\r\n+def fliter(command,funs):\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n+        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n+    if command == \"\":  \r\n+        return Result.getResult(processor=\"fliter\")\r\n+    else:\r\n+        return next_Cpu(command,funs)\r\n+def _run(socket):\r\n+    funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        res:Result=next_Cpu(data,copy(funs))\r\n+        myPrint_Success(res)\r\n+        send_obj(socket, res)\r\n+\r\n+if __name__ == '__main__':\r\n+    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697445006628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,8 @@\n import pickle\r\n cwd=\"\"\r\n debug=True\r\n def general_manage(command,funs)->Result:\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n     res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n     code=res.returncode\r\n     if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n         code=Data.HELP\r\n@@ -105,126 +103,11 @@\n         data = recver_message(socket)\r\n         myPrint_Success(\"收到:\", data)\r\n \r\n         res:Result=next_Cpu(data,copy(funs))\r\n-        myPrint_Success(res)\r\n+        # myPrint_Success(res)\r\n         send_obj(socket, res)\r\n \r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-\r\n-\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-import Data\r\n-from Shell_Tools.online_remote_shell.Tools import next_Cpu\r\n-import pickle\r\n-cwd=\"\"\r\n-debug=True\r\n-def general_manage(command,funs)->Result:\r\n-    if debug:\r\n-        myPrint_Hint(\"general_manage\")\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n-        code=Data.HELP\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) != 1:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n-\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    if len(funs)>0:\r\n-        funs.pop(0)\r\n-    if command == \"help\":\r\n-        res = get_txt_image(Data.QIAN_MING_IMAGE)+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return next_Cpu(command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n-    except Exception as e:\r\n-        return next_Cpu(command,funs)\r\n-\r\n-def exit(command,funs):\r\n-        if command == \"exit\" or command == \"logout\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n-        else:\r\n-           return next_Cpu(command,funs)\r\n-def help(command : str,funs):\r\n-    \"\"\"\r\n-    !todo 实现所有方法的help\r\n-\r\n-    Args:\r\n-        command (_type_): _description_\r\n-        funs (_type_): _description_\r\n-\r\n-    Returns:\r\n-        _type_: _description_\r\n-    \"\"\"\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n-        output=\"\" \r\n-        for fun in funs:\r\n-            res:Result=fun(command,[])\r\n-            if res.returncode==Data.HELP:\r\n-                output+=res.output+res.err+\"\\n\"\r\n-        return Result.getResult(output=output)\r\n-                    \r\n-    else:\r\n-        return next_Cpu(command,funs)\r\n-def fliter(command,funs):\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n-        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n-    if command == \"\":  \r\n-        return Result.getResult(processor=\"fliter\")\r\n-    else:\r\n-        return next_Cpu(command,funs)\r\n-def _run(socket):\r\n-    funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-\r\n-        res:Result=next_Cpu(data,copy(funs))\r\n-        myPrint_Success(res)\r\n-        send_obj(socket, res)\r\n-\r\n-if __name__ == '__main__':\r\n-    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n-\r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697445082309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,12 +30,12 @@\n     if len(funs) !=0:\r\n         myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n     res=\"\"\r\n     for i in d:\r\n-        res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+        res+=\"%s\"%(i.decode(\"gbk\"))\r\n     err_res=\"\"\r\n     for i in e:\r\n-        err_res+=\"%s\\n\"%(i.decode(\"gbk\"))\r\n+        err_res+=\"%s\"%(i.decode(\"gbk\"))\r\n     return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n \r\n def other_command(command,funs):\r\n     def hello():\r\n"
                },
                {
                    "date": 1697445163312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,8 @@\n     _all_fun = {\r\n        \"hello\":hello,\r\n         \"who\":get_txt_image\r\n     }\r\n-    if len(funs)>0:\r\n-        funs.pop(0)\r\n     if command == \"help\":\r\n         res = get_txt_image(Data.QIAN_MING_IMAGE)+\"\\n\"\r\n         for re in _all_fun.keys():\r\n             res += str(re)\r\n"
                },
                {
                    "date": 1697445284090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,12 @@\n     e = res.stderr.readlines()\r\n     if len(funs) !=0:\r\n         myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n     res=\"\"\r\n+    if d==None:\r\n+        d=\"\"\r\n+    if e==None:\r\n+        e=\"\"\r\n     for i in d:\r\n         res+=\"%s\"%(i.decode(\"gbk\"))\r\n     err_res=\"\"\r\n     for i in e:\r\n"
                },
                {
                    "date": 1697446333824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,10 @@\n     else:\r\n         return next_Cpu(command,funs)\r\n def _run(socket):\r\n     funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    #默认dos目录获取\r\n+    \r\n     while 1:\r\n         data = recver_message(socket)\r\n         myPrint_Success(\"收到:\", data)\r\n \r\n"
                },
                {
                    "date": 1697446649832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,10 @@\n \r\n         res:Result=next_Cpu(data,copy(funs))\r\n         # myPrint_Success(res)\r\n         send_obj(socket, res)\r\n-\r\n+def cd_pwd():\r\n+    general_manage(Data.Data.pwd_cd)\r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697446896250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,12 +17,15 @@\n from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n import Data\r\n from Shell_Tools.online_remote_shell.Tools import next_Cpu\r\n import pickle\r\n-cwd=\"\"\r\n+cwd=None\r\n debug=True\r\n def general_manage(command,funs)->Result:\r\n-    res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    if cwd is None:\r\n+        res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    else: \r\n+        res = subprocess.Popen(command,cwd=cwd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n     code=res.returncode\r\n     if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n         code=Data.HELP\r\n     d = res.stdout.readlines()\r\n@@ -101,18 +104,19 @@\n         return next_Cpu(command,funs)\r\n def _run(socket):\r\n     funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n     #默认dos目录获取\r\n-    \r\n+    cwd=cd_pwd\r\n     while 1:\r\n         data = recver_message(socket)\r\n         myPrint_Success(\"收到:\", data)\r\n \r\n         res:Result=next_Cpu(data,copy(funs))\r\n         # myPrint_Success(res)\r\n         send_obj(socket, res)\r\n def cd_pwd():\r\n-    general_manage(Data.Data.pwd_cd)\r\n+    res:Result=general_manage(Data.Data.pwd_cd(),[])\r\n+    return res.output\r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697446921565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n import pickle\r\n cwd=None\r\n debug=True\r\n def general_manage(command,funs)->Result:\r\n+    global cwd\r\n     if cwd is None:\r\n         res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n     else: \r\n         res = subprocess.Popen(command,cwd=cwd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n@@ -103,8 +104,9 @@\n     else:\r\n         return next_Cpu(command,funs)\r\n def _run(socket):\r\n     funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    global cwd\r\n     #默认dos目录获取\r\n     cwd=cd_pwd\r\n     while 1:\r\n         data = recver_message(socket)\r\n"
                },
                {
                    "date": 1697446959971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,8 +112,9 @@\n         data = recver_message(socket)\r\n         myPrint_Success(\"收到:\", data)\r\n \r\n         res:Result=next_Cpu(data,copy(funs))\r\n+        res.cwd=cwd\r\n         # myPrint_Success(res)\r\n         send_obj(socket, res)\r\n def cd_pwd():\r\n     res:Result=general_manage(Data.Data.pwd_cd(),[])\r\n"
                },
                {
                    "date": 1697447087514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n def _run(socket):\r\n     funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n     global cwd\r\n     #默认dos目录获取\r\n-    cwd=cd_pwd\r\n+    cwd=cd_pwd()\r\n     while 1:\r\n         data = recver_message(socket)\r\n         myPrint_Success(\"收到:\", data)\r\n \r\n"
                },
                {
                    "date": 1697447174372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n from Shell_Tools.online_remote_shell.Tools import next_Cpu\r\n import pickle\r\n cwd=None\r\n debug=True\r\n+data_str=Data.Data()\r\n def general_manage(command,funs)->Result:\r\n     global cwd\r\n     if cwd is None:\r\n         res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n@@ -116,9 +117,9 @@\n         res.cwd=cwd\r\n         # myPrint_Success(res)\r\n         send_obj(socket, res)\r\n def cd_pwd():\r\n-    res:Result=general_manage(Data.Data.pwd_cd(),[])\r\n+    res:Result=general_manage(.pwd_cd(),[])\r\n     return res.output\r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n"
                },
                {
                    "date": 1697447200526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n from Shell_Tools.online_remote_shell.Tools import next_Cpu\r\n import pickle\r\n cwd=None\r\n debug=True\r\n-data_str=Data.Data()\r\n+data_str=Data.Data(\"win\")\r\n def general_manage(command,funs)->Result:\r\n     global cwd\r\n     if cwd is None:\r\n         res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n@@ -117,9 +117,9 @@\n         res.cwd=cwd\r\n         # myPrint_Success(res)\r\n         send_obj(socket, res)\r\n def cd_pwd():\r\n-    res:Result=general_manage(.pwd_cd(),[])\r\n+    res:Result=general_manage(data_str.pwd_cd(),[])\r\n     return res.output\r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n"
                },
                {
                    "date": 1697447463150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,23 +104,26 @@\n         return Result.getResult(processor=\"fliter\")\r\n     else:\r\n         return next_Cpu(command,funs)\r\n def _run(socket):\r\n-    funs=[help,fliter,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    funs=[help,fliter,cd_pwd,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n     global cwd\r\n-    #默认dos目录获取\r\n-    cwd=cd_pwd()\r\n+    \r\n     while 1:\r\n         data = recver_message(socket)\r\n         myPrint_Success(\"收到:\", data)\r\n \r\n         res:Result=next_Cpu(data,copy(funs))\r\n         res.cwd=cwd\r\n         # myPrint_Success(res)\r\n         send_obj(socket, res)\r\n-def cd_pwd():\r\n-    res:Result=general_manage(data_str.pwd_cd(),[])\r\n-    return res.output\r\n+def cd_pwd(command,funs):\r\n+    global cwd\r\n+    if command==data_str.pwd_cd():\r\n+        res:Result=general_manage(data_str.pwd_cd(),[])\r\n+        cwd=res.output\r\n+        return res\r\n+    return next_Cpu(command,funs)\r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697447762482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n         # myPrint_Success(res)\r\n         send_obj(socket, res)\r\n def cd_pwd(command,funs):\r\n     global cwd\r\n-    if command==data_str.pwd_cd():\r\n+    if command==data_str.pwd_cd() and cwd is None:\r\n         res:Result=general_manage(data_str.pwd_cd(),[])\r\n         cwd=res.output\r\n         return res\r\n     return next_Cpu(command,funs)\r\n"
                },
                {
                    "date": 1697447864863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,12 +117,13 @@\n         # myPrint_Success(res)\r\n         send_obj(socket, res)\r\n def cd_pwd(command,funs):\r\n     global cwd\r\n-    if command==data_str.pwd_cd() and cwd is None:\r\n-        res:Result=general_manage(data_str.pwd_cd(),[])\r\n-        cwd=res.output\r\n-        return res\r\n+    if command==data_str.pwd_cd():\r\n+        if cwd is None:\r\n+            res:Result=general_manage(data_str.pwd_cd(),[])\r\n+            cwd=res.output\r\n+        return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n     return next_Cpu(command,funs)\r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n"
                },
                {
                    "date": 1697450320878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,8 +113,9 @@\n         myPrint_Success(\"收到:\", data)\r\n \r\n         res:Result=next_Cpu(data,copy(funs))\r\n         res.cwd=cwd\r\n+        res.command=data\r\n         # myPrint_Success(res)\r\n         send_obj(socket, res)\r\n def cd_pwd(command,funs):\r\n     global cwd\r\n"
                },
                {
                    "date": 1697451277598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n     global cwd\r\n     if command==data_str.pwd_cd():\r\n         if cwd is None:\r\n             res:Result=general_manage(data_str.pwd_cd(),[])\r\n-            cwd=res.output\r\n+            cwd=res.output.strip()\r\n         return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n     return next_Cpu(command,funs)\r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n"
                },
                {
                    "date": 1697452110091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,15 +116,17 @@\n         res.cwd=cwd\r\n         res.command=data\r\n         # myPrint_Success(res)\r\n         send_obj(socket, res)\r\n-def cd_pwd(command,funs):\r\n+def cd_pwd(command:str,funs:list):\r\n     global cwd\r\n     if command==data_str.pwd_cd():\r\n         if cwd is None:\r\n             res:Result=general_manage(data_str.pwd_cd(),[])\r\n             cwd=res.output.strip()\r\n         return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n+    elif command.split(\" \")[0] == data_str.pwd_cd():\r\n+        \r\n     return next_Cpu(command,funs)\r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n"
                },
                {
                    "date": 1697454598801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n             res:Result=general_manage(data_str.pwd_cd(),[])\r\n             cwd=res.output.strip()\r\n         return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n     elif command.split(\" \")[0] == data_str.pwd_cd():\r\n-        \r\n+        pass\r\n     return next_Cpu(command,funs)\r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n"
                },
                {
                    "date": 1697454757852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n     else: \r\n         res = subprocess.Popen(command,cwd=cwd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n     code=res.returncode\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n+    if type(command) is str and command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n         code=Data.HELP\r\n     d = res.stdout.readlines()\r\n     e = res.stderr.readlines()\r\n     if len(funs) !=0:\r\n"
                },
                {
                    "date": 1697454801284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n     else: \r\n         res = subprocess.Popen(command,cwd=cwd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n     code=res.returncode\r\n-    if type(command) is str and command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n+    if type(command) is str and (command == \"help\" or command.split(\" \")[-1]==\"-h\"):\r\n         code=Data.HELP\r\n     d = res.stdout.readlines()\r\n     e = res.stderr.readlines()\r\n     if len(funs) !=0:\r\n"
                },
                {
                    "date": 1697455104693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,12 @@\n             res:Result=general_manage(data_str.pwd_cd(),[])\r\n             cwd=res.output.strip()\r\n         return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n     elif command.split(\" \")[0] == data_str.pwd_cd():\r\n-        pass\r\n+        res:Result=general_manage(command,[])\r\n+        if res.err==\"\":\r\n+            cwd=res.output.strip()\r\n+        return Result.getResult(processor=\"cd_pwd\",err=res.err,returncode=2)\r\n     return next_Cpu(command,funs)\r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n"
                },
                {
                    "date": 1697455188465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+\r\n+\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+import Data\r\n+from Shell_Tools.online_remote_shell.Tools import next_Cpu\r\n+import pickle\r\n+cwd=None\r\n+debug=True\r\n+data_str=Data.Data(\"win\")\r\n+def general_manage(command,funs)->Result:\r\n+    global cwd\r\n+    if cwd is None:\r\n+        res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    else: \r\n+        res = subprocess.Popen(command,cwd=cwd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n+        code=Data.HELP\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) !=0:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    if d==None:\r\n+        d=\"\"\r\n+    if e==None:\r\n+        e=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\"%(i.decode(\"gbk\"))\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    if command == \"help\":\r\n+        res = get_txt_image(Data.QIAN_MING_IMAGE)+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return next_Cpu(command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return next_Cpu(command,funs)\r\n+\r\n+def exit(command,funs):\r\n+        if command == \"exit\" or command == \"logout\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n+        else:\r\n+           return next_Cpu(command,funs)\r\n+def help(command : str,funs):\r\n+    \"\"\"\r\n+    !todo 实现所有方法的help\r\n+\r\n+    Args:\r\n+        command (_type_): _description_\r\n+        funs (_type_): _description_\r\n+\r\n+    Returns:\r\n+        _type_: _description_\r\n+    \"\"\"\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n+        output=\"\" \r\n+        for fun in funs:\r\n+            res:Result=fun(command,[])\r\n+            if res.returncode==Data.HELP:\r\n+                output+=res.output+res.err+\"\\n\"\r\n+        return Result.getResult(output=output)\r\n+                    \r\n+    else:\r\n+        return next_Cpu(command,funs)\r\n+def fliter(command,funs):\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n+        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n+    if command == \"\":  \r\n+        return Result.getResult(processor=\"fliter\")\r\n+    else:\r\n+        return next_Cpu(command,funs)\r\n+def _run(socket):\r\n+    funs=[help,fliter,cd_pwd,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    global cwd\r\n+    \r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        res:Result=next_Cpu(data,copy(funs))\r\n+        res.cwd=cwd\r\n+        res.command=data\r\n+        # myPrint_Success(res)\r\n+        send_obj(socket, res)\r\n+def cd_pwd(command:str,funs:list):\r\n+    global cwd\r\n+    if command==data_str.pwd_cd():\r\n+        if cwd is None:\r\n+            res:Result=general_manage(data_str.pwd_cd(),[])\r\n+            cwd=res.output.strip()\r\n+        return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n+    elif command.split(\" \")[0] == data_str.pwd_cd():\r\n+        res:Result=general_manage(command,[])\r\n+        if res.err==\"\":\r\n+            cwd=res.output.strip()\r\n+        return Result.getResult(processor=\"cd_pwd\",err=res.err,returncode=2)\r\n+    return next_Cpu(command,funs)\r\n+if __name__ == '__main__':\r\n+    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697456634727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,138 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+\r\n+\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+import Data\r\n+from Shell_Tools.online_remote_shell.Tools import next_Cpu\r\n+import pickle\r\n+cwd=None\r\n+debug=True\r\n+data_str=Data.Data(\"win\")\r\n+def general_manage(command,funs)->Result:\r\n+    global cwd\r\n+    if cwd is None:\r\n+        res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    else: \r\n+        res = subprocess.Popen(command,cwd=cwd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n+        code=Data.HELP\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) !=0:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    if d==None:\r\n+        d=\"\"\r\n+    if e==None:\r\n+        e=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\"%(i.decode(\"gbk\"))\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    if command == \"help\":\r\n+        res = get_txt_image(Data.QIAN_MING_IMAGE)+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return next_Cpu(command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return next_Cpu(command,funs)\r\n+\r\n+def exit(command,funs):\r\n+        if command == \"exit\" or command == \"logout\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n+        else:\r\n+           return next_Cpu(command,funs)\r\n+def help(command : str,funs):\r\n+    \"\"\"\r\n+    !todo 实现所有方法的help\r\n+\r\n+    Args:\r\n+        command (_type_): _description_\r\n+        funs (_type_): _description_\r\n+\r\n+    Returns:\r\n+        _type_: _description_\r\n+    \"\"\"\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n+        output=\"\" \r\n+        for fun in funs:\r\n+            res:Result=fun(command,[])\r\n+            if res.returncode==Data.HELP:\r\n+                output+=res.output+res.err+\"\\n\"\r\n+        return Result.getResult(output=output)\r\n+                    \r\n+    else:\r\n+        return next_Cpu(command,funs)\r\n+def fliter(command,funs):\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n+        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n+    if command == \"\":  \r\n+        return Result.getResult(processor=\"fliter\")\r\n+    else:\r\n+        return next_Cpu(command,funs)\r\n+def _run(socket):\r\n+    funs=[help,fliter,cd_pwd,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    global cwd\r\n+    \r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        res:Result=next_Cpu(data,copy(funs))\r\n+        res.cwd=cwd\r\n+        res.command=data\r\n+        # myPrint_Success(res)\r\n+        send_obj(socket, res)\r\n+def cd_pwd(command:str,funs:list):\r\n+    global cwd\r\n+    if command==data_str.pwd_cd():\r\n+        if cwd is None:\r\n+            res:Result=general_manage(data_str.pwd_cd(),[])\r\n+            cwd=res.output.strip()\r\n+        return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n+    elif command.split(\" \")[0] == data_str.pwd_cd():\r\n+        if command.split(\" \")[1]=='\\.\\.':\r\n+            \r\n+        res:Result=general_manage(command,[])\r\n+        if res.err==\"\":\r\n+            cwd=res.output.strip()\r\n+        return Result.getResult(processor=\"cd_pwd\",err=res.err,returncode=2)\r\n+    return next_Cpu(command,funs)\r\n+if __name__ == '__main__':\r\n+    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697456808520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,8 @@\n             res:Result=general_manage(data_str.pwd_cd(),[])\r\n             cwd=res.output.strip()\r\n         return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n     elif command.split(\" \")[0] == data_str.pwd_cd():\r\n-        if command.split(\" \")[1]=='\\.\\.':\r\n             \r\n         res:Result=general_manage(command,[])\r\n         if res.err==\"\":\r\n             cwd=res.output.strip()\r\n@@ -134,277 +133,5 @@\n     return next_Cpu(command,funs)\r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-\r\n-\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-import Data\r\n-from Shell_Tools.online_remote_shell.Tools import next_Cpu\r\n-import pickle\r\n-cwd=None\r\n-debug=True\r\n-data_str=Data.Data(\"win\")\r\n-def general_manage(command,funs)->Result:\r\n-    global cwd\r\n-    if cwd is None:\r\n-        res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    else: \r\n-        res = subprocess.Popen(command,cwd=cwd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n-        code=Data.HELP\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) !=0:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    if d==None:\r\n-        d=\"\"\r\n-    if e==None:\r\n-        e=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\"%(i.decode(\"gbk\"))\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n-\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    if command == \"help\":\r\n-        res = get_txt_image(Data.QIAN_MING_IMAGE)+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return next_Cpu(command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n-    except Exception as e:\r\n-        return next_Cpu(command,funs)\r\n-\r\n-def exit(command,funs):\r\n-        if command == \"exit\" or command == \"logout\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n-        else:\r\n-           return next_Cpu(command,funs)\r\n-def help(command : str,funs):\r\n-    \"\"\"\r\n-    !todo 实现所有方法的help\r\n-\r\n-    Args:\r\n-        command (_type_): _description_\r\n-        funs (_type_): _description_\r\n-\r\n-    Returns:\r\n-        _type_: _description_\r\n-    \"\"\"\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n-        output=\"\" \r\n-        for fun in funs:\r\n-            res:Result=fun(command,[])\r\n-            if res.returncode==Data.HELP:\r\n-                output+=res.output+res.err+\"\\n\"\r\n-        return Result.getResult(output=output)\r\n-                    \r\n-    else:\r\n-        return next_Cpu(command,funs)\r\n-def fliter(command,funs):\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n-        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n-    if command == \"\":  \r\n-        return Result.getResult(processor=\"fliter\")\r\n-    else:\r\n-        return next_Cpu(command,funs)\r\n-def _run(socket):\r\n-    funs=[help,fliter,cd_pwd,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    global cwd\r\n-    \r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-\r\n-        res:Result=next_Cpu(data,copy(funs))\r\n-        res.cwd=cwd\r\n-        res.command=data\r\n-        # myPrint_Success(res)\r\n-        send_obj(socket, res)\r\n-def cd_pwd(command:str,funs:list):\r\n-    global cwd\r\n-    if command==data_str.pwd_cd():\r\n-        if cwd is None:\r\n-            res:Result=general_manage(data_str.pwd_cd(),[])\r\n-            cwd=res.output.strip()\r\n-        return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n-    elif command.split(\" \")[0] == data_str.pwd_cd():\r\n-        res:Result=general_manage(command,[])\r\n-        if res.err==\"\":\r\n-            cwd=res.output.strip()\r\n-        return Result.getResult(processor=\"cd_pwd\",err=res.err,returncode=2)\r\n-    return next_Cpu(command,funs)\r\n-if __name__ == '__main__':\r\n-    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n-\r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-\r\n-\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-import Data\r\n-from Shell_Tools.online_remote_shell.Tools import next_Cpu\r\n-import pickle\r\n-cwd=None\r\n-debug=True\r\n-data_str=Data.Data(\"win\")\r\n-def general_manage(command,funs)->Result:\r\n-    global cwd\r\n-    if cwd is None:\r\n-        res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    else: \r\n-        res = subprocess.Popen(command,cwd=cwd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    if type(command) is str and (command == \"help\" or command.split(\" \")[-1]==\"-h\"):\r\n-        code=Data.HELP\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) !=0:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    if d==None:\r\n-        d=\"\"\r\n-    if e==None:\r\n-        e=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\"%(i.decode(\"gbk\"))\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n-\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    if command == \"help\":\r\n-        res = get_txt_image(Data.QIAN_MING_IMAGE)+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return next_Cpu(command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n-    except Exception as e:\r\n-        return next_Cpu(command,funs)\r\n-\r\n-def exit(command,funs):\r\n-        if command == \"exit\" or command == \"logout\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n-        else:\r\n-           return next_Cpu(command,funs)\r\n-def help(command : str,funs):\r\n-    \"\"\"\r\n-    !todo 实现所有方法的help\r\n-\r\n-    Args:\r\n-        command (_type_): _description_\r\n-        funs (_type_): _description_\r\n-\r\n-    Returns:\r\n-        _type_: _description_\r\n-    \"\"\"\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n-        output=\"\" \r\n-        for fun in funs:\r\n-            res:Result=fun(command,[])\r\n-            if res.returncode==Data.HELP:\r\n-                output+=res.output+res.err+\"\\n\"\r\n-        return Result.getResult(output=output)\r\n-                    \r\n-    else:\r\n-        return next_Cpu(command,funs)\r\n-def fliter(command,funs):\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n-        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n-    if command == \"\":  \r\n-        return Result.getResult(processor=\"fliter\")\r\n-    else:\r\n-        return next_Cpu(command,funs)\r\n-def _run(socket):\r\n-    funs=[help,fliter,cd_pwd,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    global cwd\r\n-    \r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-\r\n-        res:Result=next_Cpu(data,copy(funs))\r\n-        res.cwd=cwd\r\n-        res.command=data\r\n-        # myPrint_Success(res)\r\n-        send_obj(socket, res)\r\n-def cd_pwd(command:str,funs:list):\r\n-    global cwd\r\n-    if command==data_str.pwd_cd():\r\n-        if cwd is None:\r\n-            res:Result=general_manage(data_str.pwd_cd(),[])\r\n-            cwd=res.output.strip()\r\n-        return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n-    elif command.split(\" \")[0] == data_str.pwd_cd():\r\n-        res:Result=general_manage(command,[])\r\n-        if res.err==\"\":\r\n-            cwd=res.output.strip()\r\n-        return Result.getResult(processor=\"cd_pwd\",err=res.err,returncode=2)\r\n-    return next_Cpu(command,funs)\r\n-if __name__ == '__main__':\r\n-    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n-\r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697457074032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,137 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+\r\n+\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+import Data\r\n+from Shell_Tools.online_remote_shell.Tools import next_Cpu\r\n+import pickle\r\n+cwd=os.getcwd()\r\n+debug=True\r\n+data_str=Data.Data(\"win\")\r\n+def general_manage(command,funs)->Result:\r\n+    global cwd\r\n+    if cwd is None:\r\n+        res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    else: \r\n+        res = subprocess.Popen(command,cwd=cwd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n+        code=Data.HELP\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) !=0:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    if d==None:\r\n+        d=\"\"\r\n+    if e==None:\r\n+        e=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\"%(i.decode(\"gbk\"))\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    if command == \"help\":\r\n+        res = get_txt_image(Data.QIAN_MING_IMAGE)+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return next_Cpu(command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return next_Cpu(command,funs)\r\n+\r\n+def exit(command,funs):\r\n+        if command == \"exit\" or command == \"logout\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n+        else:\r\n+           return next_Cpu(command,funs)\r\n+def help(command : str,funs):\r\n+    \"\"\"\r\n+    !todo 实现所有方法的help\r\n+\r\n+    Args:\r\n+        command (_type_): _description_\r\n+        funs (_type_): _description_\r\n+\r\n+    Returns:\r\n+        _type_: _description_\r\n+    \"\"\"\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n+        output=\"\" \r\n+        for fun in funs:\r\n+            res:Result=fun(command,[])\r\n+            if res.returncode==Data.HELP:\r\n+                output+=res.output+res.err+\"\\n\"\r\n+        return Result.getResult(output=output)\r\n+                    \r\n+    else:\r\n+        return next_Cpu(command,funs)\r\n+def fliter(command,funs):\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n+        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n+    if command == \"\":  \r\n+        return Result.getResult(processor=\"fliter\")\r\n+    else:\r\n+        return next_Cpu(command,funs)\r\n+def _run(socket):\r\n+    funs=[help,fliter,cd_pwd,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    global cwd\r\n+    \r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        res:Result=next_Cpu(data,copy(funs))\r\n+        res.cwd=cwd\r\n+        res.command=data\r\n+        # myPrint_Success(res)\r\n+        send_obj(socket, res)\r\n+def cd_pwd(command:str,funs:list):\r\n+    global cwd\r\n+    if command==data_str.pwd_cd():\r\n+        if cwd is None:\r\n+            res:Result=general_manage(data_str.pwd_cd(),[])\r\n+            cwd=res.output.strip()\r\n+        return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n+    elif command.split(\" \")[0] == data_str.pwd_cd():\r\n+            \r\n+        res:Result=general_manage(command,[])\r\n+        if res.err==\"\":\r\n+            cwd=res.output.strip()\r\n+        return Result.getResult(processor=\"cd_pwd\",err=res.err,returncode=2)\r\n+    return next_Cpu(command,funs)\r\n+if __name__ == '__main__':\r\n+    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697457282001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,156 +119,15 @@\n         send_obj(socket, res)\r\n def cd_pwd(command:str,funs:list):\r\n     global cwd\r\n     if command==data_str.pwd_cd():\r\n-        if cwd is None:\r\n-            res:Result=general_manage(data_str.pwd_cd(),[])\r\n-            cwd=res.output.strip()\r\n         return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n     elif command.split(\" \")[0] == data_str.pwd_cd():\r\n-            \r\n-        res:Result=general_manage(command,[])\r\n-        if res.err==\"\":\r\n-            cwd=res.output.strip()\r\n-        return Result.getResult(processor=\"cd_pwd\",err=res.err,returncode=2)\r\n+        path=command.split(\" \")[0]\r\n+        cwd=os.path.join(cwd,path)\r\n+        \r\n+        return Result.getResult(processor=\"cd_pwd\",err=cwd,returncode=2)\r\n     return next_Cpu(command,funs)\r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-\r\n-\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-import Data\r\n-from Shell_Tools.online_remote_shell.Tools import next_Cpu\r\n-import pickle\r\n-cwd=None\r\n-debug=True\r\n-data_str=Data.Data(\"win\")\r\n-def general_manage(command,funs)->Result:\r\n-    global cwd\r\n-    if cwd is None:\r\n-        res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    else: \r\n-        res = subprocess.Popen(command,cwd=cwd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n-        code=Data.HELP\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) !=0:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    if d==None:\r\n-        d=\"\"\r\n-    if e==None:\r\n-        e=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\"%(i.decode(\"gbk\"))\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n-\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    if command == \"help\":\r\n-        res = get_txt_image(Data.QIAN_MING_IMAGE)+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return next_Cpu(command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n-    except Exception as e:\r\n-        return next_Cpu(command,funs)\r\n-\r\n-def exit(command,funs):\r\n-        if command == \"exit\" or command == \"logout\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n-        else:\r\n-           return next_Cpu(command,funs)\r\n-def help(command : str,funs):\r\n-    \"\"\"\r\n-    !todo 实现所有方法的help\r\n-\r\n-    Args:\r\n-        command (_type_): _description_\r\n-        funs (_type_): _description_\r\n-\r\n-    Returns:\r\n-        _type_: _description_\r\n-    \"\"\"\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n-        output=\"\" \r\n-        for fun in funs:\r\n-            res:Result=fun(command,[])\r\n-            if res.returncode==Data.HELP:\r\n-                output+=res.output+res.err+\"\\n\"\r\n-        return Result.getResult(output=output)\r\n-                    \r\n-    else:\r\n-        return next_Cpu(command,funs)\r\n-def fliter(command,funs):\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n-        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n-    if command == \"\":  \r\n-        return Result.getResult(processor=\"fliter\")\r\n-    else:\r\n-        return next_Cpu(command,funs)\r\n-def _run(socket):\r\n-    funs=[help,fliter,cd_pwd,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    global cwd\r\n-    \r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-\r\n-        res:Result=next_Cpu(data,copy(funs))\r\n-        res.cwd=cwd\r\n-        res.command=data\r\n-        # myPrint_Success(res)\r\n-        send_obj(socket, res)\r\n-def cd_pwd(command:str,funs:list):\r\n-    global cwd\r\n-    if command==data_str.pwd_cd():\r\n-        if cwd is None:\r\n-            res:Result=general_manage(data_str.pwd_cd(),[])\r\n-            cwd=res.output.strip()\r\n-        return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n-    elif command.split(\" \")[0] == data_str.pwd_cd():\r\n-            \r\n-        res:Result=general_manage(command,[])\r\n-        if res.err==\"\":\r\n-            cwd=res.output.strip()\r\n-        return Result.getResult(processor=\"cd_pwd\",err=res.err,returncode=2)\r\n-    return next_Cpu(command,funs)\r\n-if __name__ == '__main__':\r\n-    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n-\r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697457376442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,11 +122,13 @@\n     if command==data_str.pwd_cd():\r\n         return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n     elif command.split(\" \")[0] == data_str.pwd_cd():\r\n         path=command.split(\" \")[0]\r\n-        cwd=os.path.join(cwd,path)\r\n-        \r\n-        return Result.getResult(processor=\"cd_pwd\",err=cwd,returncode=2)\r\n+        try:\r\n+            cwd=os.path.join(cwd,path)\r\n+        except Exception as e:\r\n+            return Result.getResult(processor=\"cd_pwd\",err=path+\"  不存在\",returncode=2)\r\n+        return Result.getResult(processor=\"cd_pwd\",err=cwd,returncode=1)\r\n     return next_Cpu(command,funs)\r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n"
                },
                {
                    "date": 1697457436699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n         return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n     elif command.split(\" \")[0] == data_str.pwd_cd():\r\n         path=command.split(\" \")[0]\r\n         try:\r\n-            cwd=os.path.join(cwd,path)\r\n+            cwd=os.path.abspath(os.path.join(cwd,path))\r\n         except Exception as e:\r\n             return Result.getResult(processor=\"cd_pwd\",err=path+\"  不存在\",returncode=2)\r\n         return Result.getResult(processor=\"cd_pwd\",err=cwd,returncode=1)\r\n     return next_Cpu(command,funs)\r\n"
                },
                {
                    "date": 1697457468083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,135 @@\n+# author:高金磊\r\n+# datetime:2022/6/22 10:08\r\n+import os\r\n+import subprocess\r\n+import sys\r\n+\r\n+\r\n+BASE_DIR = os.path.dirname(__file__)\r\n+for i in range(3):###距离项目根目录的距离____终端使用\r\n+    BASE_DIR=os.path.dirname(BASE_DIR)\r\n+    sys.path.append(BASE_DIR)\r\n+from copy import copy\r\n+from Result import Result\r\n+from Image_Tools.Image_char import get_txt_image\r\n+from Os_Tools.Os_Info import get_os_info\r\n+from Os_Tools.process_tool import Chain_Process_tool\r\n+from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n+import Data\r\n+from Shell_Tools.online_remote_shell.Tools import next_Cpu\r\n+import pickle\r\n+cwd=os.getcwd()\r\n+debug=True\r\n+data_str=Data.Data(\"win\")\r\n+def general_manage(command,funs)->Result:\r\n+    global cwd\r\n+    if cwd is None:\r\n+        res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    else: \r\n+        res = subprocess.Popen(command,cwd=cwd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n+    code=res.returncode\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n+        code=Data.HELP\r\n+    d = res.stdout.readlines()\r\n+    e = res.stderr.readlines()\r\n+    if len(funs) !=0:\r\n+        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n+    res=\"\"\r\n+    if d==None:\r\n+        d=\"\"\r\n+    if e==None:\r\n+        e=\"\"\r\n+    for i in d:\r\n+        res+=\"%s\"%(i.decode(\"gbk\"))\r\n+    err_res=\"\"\r\n+    for i in e:\r\n+        err_res+=\"%s\"%(i.decode(\"gbk\"))\r\n+    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n+\r\n+def other_command(command,funs):\r\n+    def hello():\r\n+       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n+        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n+        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n+        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n+        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n+    _all_fun = {\r\n+       \"hello\":hello,\r\n+        \"who\":get_txt_image\r\n+    }\r\n+    if command == \"help\":\r\n+        res = get_txt_image(Data.QIAN_MING_IMAGE)+\"\\n\"\r\n+        for re in _all_fun.keys():\r\n+            res += str(re)\r\n+            res += '\\n'\r\n+        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n+    try:\r\n+        if command not in _all_fun.keys():\r\n+            return next_Cpu(command,funs)\r\n+        else:\r\n+            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n+    except Exception as e:\r\n+        return next_Cpu(command,funs)\r\n+\r\n+def exit(command,funs):\r\n+        if command == \"exit\" or command == \"logout\":  \r\n+            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n+        else:\r\n+           return next_Cpu(command,funs)\r\n+def help(command : str,funs):\r\n+    \"\"\"\r\n+    !todo 实现所有方法的help\r\n+\r\n+    Args:\r\n+        command (_type_): _description_\r\n+        funs (_type_): _description_\r\n+\r\n+    Returns:\r\n+        _type_: _description_\r\n+    \"\"\"\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n+        output=\"\" \r\n+        for fun in funs:\r\n+            res:Result=fun(command,[])\r\n+            if res.returncode==Data.HELP:\r\n+                output+=res.output+res.err+\"\\n\"\r\n+        return Result.getResult(output=output)\r\n+                    \r\n+    else:\r\n+        return next_Cpu(command,funs)\r\n+def fliter(command,funs):\r\n+    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n+        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n+    if command == \"\":  \r\n+        return Result.getResult(processor=\"fliter\")\r\n+    else:\r\n+        return next_Cpu(command,funs)\r\n+def _run(socket):\r\n+    funs=[help,fliter,cd_pwd,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n+    global cwd\r\n+    \r\n+    while 1:\r\n+        data = recver_message(socket)\r\n+        myPrint_Success(\"收到:\", data)\r\n+\r\n+        res:Result=next_Cpu(data,copy(funs))\r\n+        res.cwd=cwd\r\n+        res.command=data\r\n+        # myPrint_Success(res)\r\n+        send_obj(socket, res)\r\n+def cd_pwd(command:str,funs:list):\r\n+    global cwd\r\n+    if command==data_str.pwd_cd():\r\n+        return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n+    elif command.split(\" \")[0] == data_str.pwd_cd():\r\n+        path=command.split(\" \")[1]\r\n+        try:\r\n+            cwd=os.path.abspath(os.path.join(cwd,path))\r\n+        except Exception as e:\r\n+            return Result.getResult(processor=\"cd_pwd\",err=path+\"  不存在\",returncode=2)\r\n+        return Result.getResult(processor=\"cd_pwd\",err=cwd,returncode=1)\r\n+    return next_Cpu(command,funs)\r\n+if __name__ == '__main__':\r\n+    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n+\r\n+    SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697457724073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,13 @@\n         return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n     elif command.split(\" \")[0] == data_str.pwd_cd():\r\n         path=command.split(\" \")[1]\r\n         try:\r\n-            cwd=os.path.abspath(os.path.join(cwd,path))\r\n+            middle=os.path.abspath(os.path.join(cwd,path))\r\n+            if os.path.exists(middle):\r\n+                cwd=middle\r\n+            else:\r\n+                throw \r\n         except Exception as e:\r\n             return Result.getResult(processor=\"cd_pwd\",err=path+\"  不存在\",returncode=2)\r\n         return Result.getResult(processor=\"cd_pwd\",err=cwd,returncode=1)\r\n     return next_Cpu(command,funs)\r\n"
                },
                {
                    "date": 1697457787951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,148 +127,13 @@\n             middle=os.path.abspath(os.path.join(cwd,path))\r\n             if os.path.exists(middle):\r\n                 cwd=middle\r\n             else:\r\n-                throw \r\n+                raise Exception(\"目录不存在\") \r\n         except Exception as e:\r\n             return Result.getResult(processor=\"cd_pwd\",err=path+\"  不存在\",returncode=2)\r\n         return Result.getResult(processor=\"cd_pwd\",err=cwd,returncode=1)\r\n     return next_Cpu(command,funs)\r\n if __name__ == '__main__':\r\n     from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n \r\n-    SocketServer().startup(_run)\n-# author:高金磊\r\n-# datetime:2022/6/22 10:08\r\n-import os\r\n-import subprocess\r\n-import sys\r\n-\r\n-\r\n-BASE_DIR = os.path.dirname(__file__)\r\n-for i in range(3):###距离项目根目录的距离____终端使用\r\n-    BASE_DIR=os.path.dirname(BASE_DIR)\r\n-    sys.path.append(BASE_DIR)\r\n-from copy import copy\r\n-from Result import Result\r\n-from Image_Tools.Image_char import get_txt_image\r\n-from Os_Tools.Os_Info import get_os_info\r\n-from Os_Tools.process_tool import Chain_Process_tool\r\n-from myPrint import myPrint_Success,myPrint_Err,myPrint_Hint\r\n-import Data\r\n-from Shell_Tools.online_remote_shell.Tools import next_Cpu\r\n-import pickle\r\n-cwd=os.getcwd()\r\n-debug=True\r\n-data_str=Data.Data(\"win\")\r\n-def general_manage(command,funs)->Result:\r\n-    global cwd\r\n-    if cwd is None:\r\n-        res = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    else: \r\n-        res = subprocess.Popen(command,cwd=cwd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n-    code=res.returncode\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"-h\":\r\n-        code=Data.HELP\r\n-    d = res.stdout.readlines()\r\n-    e = res.stderr.readlines()\r\n-    if len(funs) !=0:\r\n-        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n-    res=\"\"\r\n-    if d==None:\r\n-        d=\"\"\r\n-    if e==None:\r\n-        e=\"\"\r\n-    for i in d:\r\n-        res+=\"%s\"%(i.decode(\"gbk\"))\r\n-    err_res=\"\"\r\n-    for i in e:\r\n-        err_res+=\"%s\"%(i.decode(\"gbk\"))\r\n-    return Result.getResult(processor=\"remote_cmd\",returncode=code,output=res,err=err_res) \r\n-\r\n-def other_command(command,funs):\r\n-    def hello():\r\n-       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n-        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n-        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n-        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n-        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n-    _all_fun = {\r\n-       \"hello\":hello,\r\n-        \"who\":get_txt_image\r\n-    }\r\n-    if command == \"help\":\r\n-        res = get_txt_image(Data.QIAN_MING_IMAGE)+\"\\n\"\r\n-        for re in _all_fun.keys():\r\n-            res += str(re)\r\n-            res += '\\n'\r\n-        return Result.getResult(processor=\"\",output=res,returncode=Data.HELP) \r\n-    try:\r\n-        if command not in _all_fun.keys():\r\n-            return next_Cpu(command,funs)\r\n-        else:\r\n-            return Result.getResult(processor=\"os_info\",returncode=1,output=_all_fun[command]()) \r\n-    except Exception as e:\r\n-        return next_Cpu(command,funs)\r\n-\r\n-def exit(command,funs):\r\n-        if command == \"exit\" or command == \"logout\":  \r\n-            return Result.getResult(output=\"good bye\",returncode=Data.LOG_OUT)\r\n-        else:\r\n-           return next_Cpu(command,funs)\r\n-def help(command : str,funs):\r\n-    \"\"\"\r\n-    !todo 实现所有方法的help\r\n-\r\n-    Args:\r\n-        command (_type_): _description_\r\n-        funs (_type_): _description_\r\n-\r\n-    Returns:\r\n-        _type_: _description_\r\n-    \"\"\"\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\": \r\n-        output=\"\" \r\n-        for fun in funs:\r\n-            res:Result=fun(command,[])\r\n-            if res.returncode==Data.HELP:\r\n-                output+=res.output+res.err+\"\\n\"\r\n-        return Result.getResult(output=output)\r\n-                    \r\n-    else:\r\n-        return next_Cpu(command,funs)\r\n-def fliter(command,funs):\r\n-    if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n-        return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n-    if command == \"\":  \r\n-        return Result.getResult(processor=\"fliter\")\r\n-    else:\r\n-        return next_Cpu(command,funs)\r\n-def _run(socket):\r\n-    funs=[help,fliter,cd_pwd,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n-    global cwd\r\n-    \r\n-    while 1:\r\n-        data = recver_message(socket)\r\n-        myPrint_Success(\"收到:\", data)\r\n-\r\n-        res:Result=next_Cpu(data,copy(funs))\r\n-        res.cwd=cwd\r\n-        res.command=data\r\n-        # myPrint_Success(res)\r\n-        send_obj(socket, res)\r\n-def cd_pwd(command:str,funs:list):\r\n-    global cwd\r\n-    if command==data_str.pwd_cd():\r\n-        return Result.getResult(processor=\"cd_pwd\",output=cwd)\r\n-    elif command.split(\" \")[0] == data_str.pwd_cd():\r\n-        path=command.split(\" \")[0]\r\n-        try:\r\n-            cwd=os.path.abspath(os.path.join(cwd,path))\r\n-        except Exception as e:\r\n-            return Result.getResult(processor=\"cd_pwd\",err=path+\"  不存在\",returncode=2)\r\n-        return Result.getResult(processor=\"cd_pwd\",err=cwd,returncode=1)\r\n-    return next_Cpu(command,funs)\r\n-if __name__ == '__main__':\r\n-    from  Shell_Tools.online_remote_shell.sockets  import SocketServer, recver_message, send_obj\r\n-\r\n     SocketServer().startup(_run)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697458480558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,10 @@\n     if command == \"help\" or command.split(\" \")[-1]==\"help\":\r\n         return Result.getResult(processor=\"fliter\",output=\"这是fliter，暂时没有帮助文档\\n\",returncode=Data.HELP)\r\n     if command == \"\":  \r\n         return Result.getResult(processor=\"fliter\")\r\n+    elif command == \"python\":\r\n+        return Result.getResult(processor=\"fliter\",output=\"不能使用交互式python终端\",returncode=2)\r\n     else:\r\n         return next_Cpu(command,funs)\r\n def _run(socket):\r\n     funs=[help,fliter,cd_pwd,exit,other_command,get_os_info,Chain_Process_tool,general_manage]\r\n"
                }
            ],
            "date": 1697271608243,
            "name": "Commit-0",
            "content": "# author:高金磊\r\n# datetime:2022/6/22 10:08\r\nimport os\r\nimport sys\r\nBASE_DIR = os.path.dirname(__file__)\r\nfor i in range(3):###距离项目根目录的距离____终端使用\r\n    BASE_DIR=os.path.dirname(BASE_DIR)\r\nsys.path.append(BASE_DIR)\r\nfrom copy import copy\r\n\r\nfrom Image_Tools.Image_char import get_txt_image\r\nfrom Os_Tools.Os_Info import get_os_info\r\nfrom Os_Tools.process_tool import Chain_Process_tool\r\nfrom myPrint import myPrint_Success,myPrint_Err\r\n\r\ndef general_manage(data,funs):\r\n    if data =='-h':\r\n        data='help'\r\n    f = os.popen(data, 'r', )\r\n    d = f.readlines()\r\n    f.close()\r\n    if len(funs) != 1:\r\n        myPrint_Err(\"责任链顺序有误,请把本方法置于责任链最后\")\r\n    res=\" \"\r\n    for i in d:\r\n        res+=\"%s\\n\"%(i)\r\n    return [\"\",res]\r\ndef other_command(command,funs):\r\n    def hello():\r\n       return \"  _   _      _ _    __        __         _     _ \\n\" + \\\r\n        \"| | | | ___| | | __\\\\ \\\\      / /__  _ __| | __| |\\n\" + \\\r\n        \"| |_| |/ _ \\\\ | |/ _ \\\\ \\\\ /\\\\ / / _ \\\\| '__| |/ _` |\\n\" + \\\r\n        \"|  _  |  __/ | | (_) \\\\ V  V / (_) | |  | | (_| |\\n\" + \\\r\n        \"|_| |_|\\\\___|_|_|\\\\___/ \\\\_/\\\\_/ \\\\___/|_|  |_|\\\\__,_|\"\r\n    _all_fun = {\r\n       \"hello\":hello,\r\n        \"who\":get_txt_image\r\n    }\r\n    funs.pop(0)\r\n    if command == \"-h\":\r\n        res = get_txt_image()+\"\\n\"\r\n        for re in _all_fun.keys():\r\n            res += str(re)\r\n            res += '\\n'\r\n        return [\"\", res + funs[0](command, funs)[1]]\r\n    try:\r\n        if command not in _all_fun.keys():\r\n            return funs[0](command,funs)\r\n        else:\r\n            return [\"get_os_info\",_all_fun[command]()]\r\n    except Exception as e:\r\n        return funs[0](command,funs)\r\n\r\ndef _run(socket):\r\n    funs=[other_command,get_os_info,Chain_Process_tool,general_manage]\r\n    while 1:\r\n        data = recver_message(socket)\r\n        myPrint_Success(\"收到:\", data)\r\n        if data == \"exit\":\r\n            socket.close()\r\n            return 1\r\n        else:\r\n            if data==\"\":\r\n                continue\r\n\r\n        response_message=funs[0](data,copy(funs))\r\n        myPrint_Success(response_message)\r\n        send_blog_message(socket, [response_message[1]])\r\n\r\nif __name__ == '__main__':\r\n    from  Socket_Tools.sockets  import SocketServer, recver_message, send_blog_message\r\n\r\n    SocketServer().startup(_run)"
        }
    ]
}